[P8_Replace_Mix]^private final SymbolType PROPERTY  = null ;^57^^^^^52^62^private final SymbolType PROPERTY = SymbolType.PROPERTY;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private final SymbolType VAR  = null ;^58^^^^^53^63^private final SymbolType VAR = SymbolType.VAR;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^60^^^^^55^65^private final AbstractCompiler compiler;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  boolean anchorUnusedVars;^62^^^^^57^67^private final boolean anchorUnusedVars;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  JSModuleGraph moduleGraph;^63^^^^^58^68^private final JSModuleGraph moduleGraph;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  JSModule firstModule;^64^^^^^59^69^private final JSModule firstModule;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P3_Replace_Literal]^private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toS", "valueOf" ) ;^67^68^^^^67^68^private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P3_Replace_Literal]^private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOflue" ) ;^67^68^^^^67^68^private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private static  Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^67^68^^^^67^68^private static final Set<String> IMPLICITLY_USED_PROPERTIES = ImmutableSet.of ( "length", "toString", "valueOf" ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  LinkedDirectedGraph<NameInfo, JSModule> symbolGraph = new LinkedDirectedGraph<NameInfo, JSModule> (  ) ;^86^87^^^^86^87^private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph = new LinkedDirectedGraph<NameInfo, JSModule> (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P4_Replace_Constructor]^private final NameInfo globalNode = private final new PropagateReferences (  )  ;^90^^^^^85^95^private final NameInfo globalNode = new NameInfo ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private final NameInfo globalNode  = null ;^90^^^^^85^95^private final NameInfo globalNode = new NameInfo ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P4_Replace_Constructor]^private final NameInfo externNode = private final new PropagateReferences (  )  ;^93^^^^^88^98^private final NameInfo externNode = new NameInfo ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private final NameInfo externNode = new NameInfo ( this ) ;^93^^^^^88^98^private final NameInfo externNode = new NameInfo ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private final Map<String, NameInfo> propertyNameInfo  = null ;^97^^^^^92^102^private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Map<String, NameInfo> varNameInfo = Maps.newHashMap (  ) ;^101^^^^^96^106^private final Map<String, NameInfo> varNameInfo = Maps.newHashMap (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P4_Replace_Constructor]^private Stack<NameInfo> symbolStack = private new NameInfo ( name )  ;^188^^^^^183^193^private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^183^193^private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node nameNode;^429^^^^^424^434^private final Node nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node node;^480^^^^^475^485^private final Node node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node key;^525^^^^^520^530^private final Node key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node value;^526^^^^^521^531^private final Node value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node map;^527^^^^^522^532^private final Node map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  Node assign;^528^^^^^523^533^private final Node assign;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private  JSModule module;^529^^^^^524^534^private final JSModule module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P1_Replace_Type]^final char name;^572^^^^^567^577^final String name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P3_Replace_Literal]^private boolean referenced = true;^574^^^^^569^579^private boolean referenced = false;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private final Deque<Symbol> declarations  = null ;^575^^^^^570^580^private final Deque<Symbol> declarations = new ArrayDeque<Symbol> (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^private JSModule deepestCommonModuleRef = false;^576^^^^^571^581^private JSModule deepestCommonModuleRef = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { private JSModule deepestCommonModuleRef = null; }^576^^^^^571^581^private JSModule deepestCommonModuleRef = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^116^^^^^115^142^this.compiler = compiler;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.compiler = compiler;^116^^^^^115^142^this.compiler = compiler;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.compiler = compiler;^116^^^^^115^142^this.compiler = compiler;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.compiler = compiler;^116^^^^^115^142^this.compiler = compiler;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.moduleGraph =  null;^117^^^^^115^142^this.moduleGraph = moduleGraph;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.moduleGraph = moduleGraph;^117^^^^^115^142^this.moduleGraph = moduleGraph;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.canModifyExterns =  null;^118^^^^^115^142^this.canModifyExterns = canModifyExterns;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.anchorUnusedVars = referenced;^119^^^^^115^142^this.anchorUnusedVars = anchorUnusedVars;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( moduleGraph == null )  {^121^^^^^115^142^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( moduleGraph != this )  {^121^^^^^115^142^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^firstModule = moduleGraph.getRootModule();^121^122^123^124^125^115^142^if  ( moduleGraph != null )  { firstModule = moduleGraph.getRootModule (  ) ; } else { firstModule = null; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^121^122^123^124^125^115^142^if  ( moduleGraph != null )  { firstModule = moduleGraph.getRootModule (  ) ; } else { firstModule = null; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^firstModule = false;^124^^^^^121^125^firstModule = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;firstModule = null;^124^^^^^121^125^firstModule = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^firstModule = moduleGraph .getAllModules (  )  ;^122^^^^^115^142^firstModule = moduleGraph.getRootModule (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^firstModule =  null.getRootModule (  ) ;^122^^^^^115^142^firstModule = moduleGraph.getRootModule (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^122^^^^^115^142^firstModule = moduleGraph.getRootModule (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;firstModule = moduleGraph.getRootModule (  ) ;^122^^^^^115^142^firstModule = moduleGraph.getRootModule (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^firstModule = false;^124^^^^^115^142^firstModule = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;firstModule = null;^124^^^^^115^142^firstModule = null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^globalNode.NameInfo ( null ) ;^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^globalNode .isReferenced (  )  ;^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^return dest.markReference ( edge ) ;globalNode.markReference ( null ) ;^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^externNode.markReference ( null ) ;globalNode.markReference ( null ) ;^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^return dest.markReference ( startModule ) ;globalNode.markReference ( null ) ;^127^^^^^115^142^globalNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^externNode.NameInfo ( null ) ;^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^externNode .isReferenced (  )  ;^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^globalNode.markReference ( null ) ;externNode.markReference ( null ) ;^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^return dest.markReference ( edge ) ;externNode.markReference ( null ) ;^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^return dest.markReference ( startModule ) ;externNode.markReference ( null ) ;^128^^^^^115^142^externNode.markReference ( null ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.createNode ( nameInfo ) ;^129^^^^^115^142^symbolGraph.createNode ( globalNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^129^130^^^^115^142^symbolGraph.createNode ( globalNode ) ; symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Sets.newHashSet ( externNode, globalNode )  ) ;symbolGraph.createNode ( globalNode ) ;^129^^^^^115^142^symbolGraph.createNode ( globalNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.createNode ( globalNode ) ;^129^^^^^115^142^symbolGraph.createNode ( globalNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;symbolGraph.createNode ( globalNode ) ;^129^^^^^115^142^symbolGraph.createNode ( globalNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( externNode ) ;symbolGraph.createNode ( globalNode ) ;^129^^^^^115^142^symbolGraph.createNode ( globalNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.createNode ( nameInfo ) ;^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( globalNode ) ;symbolGraph.createNode ( externNode ) ;^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, module, nameInfo ) ;symbolGraph.createNode ( externNode ) ;^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.createNode ( externNode ) ;^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;symbolGraph.createNode ( externNode ) ;^130^^^^^115^142^symbolGraph.createNode ( externNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( moduleGraph != null )  {^134^^^^^115^142^if  ( moduleGraph == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( firstModuleGraph == null )  {^134^^^^^115^142^if  ( moduleGraph == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( moduleGraphGraph == null )  {^134^^^^^115^142^if  ( moduleGraph == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( firstModuleGraph == true )  {^134^^^^^115^142^if  ( moduleGraph == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^symbolGraph.connect(externNode, null, nameInfo);^134^135^136^137^138^115^142^if  ( moduleGraph == null )  { symbolGraph.connect ( externNode, null, nameInfo ) ; } else { for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^134^135^136^137^138^115^142^if  ( moduleGraph == null )  { symbolGraph.connect ( externNode, null, nameInfo ) ; } else { for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^for  ( JSModule module : moduleGraph .getRootModule (  )   )  {^137^^^^^134^140^for  ( JSModule module : moduleGraph.getAllModules (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^137^138^139^^^134^140^for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, module, globalNode ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode,  nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, module ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect (  module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( module, externNode, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, module, externNode ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( externNode ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^134^140^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, null, globalNode ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, null ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect (  null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, null, externNode ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( globalNode ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, module, nameInfo ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( externNode ) ;symbolGraph.connect ( externNode, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P1_Replace_Type]^for  ( char property : IMPLICITLY_USED_PROPERTIES )  {^132^^^^^115^142^for  ( String property : IMPLICITLY_USED_PROPERTIES )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo nameInfo = getNameInfoForName ( name, PROPERTY ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo nameInfo = getNameInfoForName ( property, VAR ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo nameInfo = getNameInfoForName (  PROPERTY ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo nameInfo = getNameInfoForName ( property ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo nameInfo = getNameInfoForName ( PROPERTY, property ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^133^^^^^115^142^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, null, nameInfo ) ;^135^^^^^115^142^symbolGraph.connect ( externNode, null, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^137^138^139^^^115^142^for  ( JSModule module : moduleGraph.getAllModules (  )  )  { symbolGraph.connect ( externNode, module, nameInfo ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, module, globalNode ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode,  nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, module ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect (  module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, module, externNode ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( module, externNode, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( externNode ) ;symbolGraph.connect ( externNode, module, nameInfo ) ;^138^^^^^115^142^symbolGraph.connect ( externNode, module, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModuleGraph,boolean,boolean)   AbstractCompiler compiler JSModuleGraph moduleGraph boolean canModifyExterns boolean anchorUnusedVars [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  key  map  nameNode  node  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  == Token.VAR && NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.3 || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isExprAssign ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Preconditions.checkState ( nameNode.removeChild (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( node )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil.isExprAssign ( parent )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.nameNode = parent;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.nameNode =  value;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.nameNode = nameNode;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.nameNode = nameNode;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.nameNode = nameNode;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.nameNode = nameNode;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.module = firstModule;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^firstModule = null;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.moduleGraph = moduleGraph;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^deepestCommonModuleRef = module;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.node = parent;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.node =  nameNode;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.key = key;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.module = firstModule;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^firstModule = null;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.moduleGraph = moduleGraph;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^deepestCommonModuleRef = module;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.key = parent;^533^^^^^531^538^this.key = key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.key =  value;^533^^^^^531^538^this.key = key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.key = key;^533^^^^^531^538^this.key = key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.key = key;^533^^^^^531^538^this.key = key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.key = key;^533^^^^^531^538^this.key = key;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.value = parent;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.value =  nameNode;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.map = value;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.key = key;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.assign = value;^536^^^^^531^538^this.assign = assign;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^this.assign =  null;^536^^^^^531^538^this.assign = assign;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.module = firstModule;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^firstModule = null;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.moduleGraph = moduleGraph;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^deepestCommonModuleRef = module;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.name = name;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^this.name = property;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.value = value;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.map = map;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.node = node;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.key = key;this.name = name;^584^^^^^583^585^this.name = name;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  gramps  key  map  nameNode  node  parent  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !referenced )  {^145^^^^^144^156^if  ( !canModifyExterns )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externRoot, new com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessExternProperties());^145^146^147^148^^144^156^if  ( !canModifyExterns )  { NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P16_Remove_Block]^^145^146^147^148^^144^156^if  ( !canModifyExterns )  { NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P4_Replace_Constructor]^new PropagateReferences (  )   ) ;^147^^^^^144^156^new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, externRoot, NodeTraversal.traverse ( compiler, externRoot,  new PropagateReferences (  )   ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, value, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse (  externRoot, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( externRoot, compiler, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, node, new ProcessExternProperties (  )  ) ;^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P14_Delete_Statement]^^146^147^^^^144^156^NodeTraversal.traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P13_Insert_Block]^if  ( ! ( canModifyExterns )  )  {     traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ; }^146^^^^^144^156^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new PropagateReferences (  )   ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, value, new ProcessProperties (  )  ) ;^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P14_Delete_Statement]^^150^^^^^144^156^NodeTraversal.traverse ( compiler, root, new ProcessProperties (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P4_Replace_Constructor]^FixedPointGraphTraversal.FixedPointGraphTraversal.Traversal (  new NameInfo ( name )   ) ;^153^^^^^144^156^FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P4_Replace_Constructor]^FixedPointGraphTraversal<NameInfo, JSModule> t = FixedPointGraphTraversal.FixedPointGraphTraversal<NameInfo, JSModule> t = FixedPointGraphTraversal.Traversal (  new NameInfo ( name )   ) ;^152^153^^^^144^156^FixedPointGraphTraversal<NameInfo, JSModule> t = FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P8_Replace_Mix]^FixedPointGraphTraversal .computeFixedPoint ( 0 )  ;^153^^^^^144^156^FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P14_Delete_Statement]^^153^^^^^144^156^FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( nameInfo, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, nameInfo )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint (  Sets.newHashSet ( externNode, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet (  globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( externNode, Sets.newHashSet ( symbolGraph, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( globalNode, externNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P7_Replace_Invocation]^t.newTraversal ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P8_Replace_Mix]^t.newTraversal ( symbolGraph, Sets.newHashSet ( nameInfo, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P14_Delete_Statement]^^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P11_Insert_Donor_Statement]^Sets.newHashSet ( externNode, globalNode )  ) ;t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^154^155^^^^144^156^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^Sets.newHashSet ( nameInfo, globalNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^Sets.newHashSet ( externNode, nameInfo )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^Sets.newHashSet (  globalNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^Sets.newHashSet ( externNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P5_Replace_Variable]^Sets.newHashSet ( globalNode, externNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P14_Delete_Statement]^^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( globalNode ) ;Sets.newHashSet ( externNode, globalNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P11_Insert_Donor_Statement]^t.computeFixedPoint ( symbolGraph, Sets.newHashSet ( externNode, globalNode )  ) ;Sets.newHashSet ( externNode, globalNode )  ) ;^155^^^^^144^156^Sets.newHashSet ( externNode, globalNode )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  FixedPointGraphTraversal  t  
[P8_Replace_Mix]^List<NameInfo> result = Lists.newArrayList ( null.values (  )  ) ;^162^^^^^161^165^List<NameInfo> result = Lists.newArrayList ( propertyNameInfo.values (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getAllNameInfo [RETURN_TYPE] Collection   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  List  result  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^162^^^^^161^165^List<NameInfo> result = Lists.newArrayList ( propertyNameInfo.values (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getAllNameInfo [RETURN_TYPE] Collection   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  List  result  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^162^163^^^^161^165^List<NameInfo> result = Lists.newArrayList ( propertyNameInfo.values (  )  ) ; result.addAll ( varNameInfo.values (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getAllNameInfo [RETURN_TYPE] Collection   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  List  result  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^result.addAll ( null.values (  )  ) ;^163^^^^^161^165^result.addAll ( varNameInfo.values (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getAllNameInfo [RETURN_TYPE] Collection   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  List  result  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^163^164^^^^161^165^result.addAll ( varNameInfo.values (  )  ) ; return result;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getAllNameInfo [RETURN_TYPE] Collection   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  List  result  SymbolType  PROPERTY  VAR  Map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^Map<String, NameInfo> map = type != PROPERTY ? propertyNameInfo : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Map<String, NameInfo> map = VAR == PROPERTY ? propertyNameInfo : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Map<String, NameInfo> map = type == type ? propertyNameInfo : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Map<String, NameInfo> map = PROPERTY == type ? propertyNameInfo : varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Map<String, NameInfo> map = type == PROPERTY ? varNameInfo : propertyNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^Map<String, NameInfo> map = type ( varNameInfo;^175^176^^^^174^185^Map<String, NameInfo> map = type == PROPERTY ? propertyNameInfo : varNameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( map.containsKey ( property )  )  {^177^^^^^174^185^if  ( map.containsKey ( name )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( name.containsKey ( map )  )  {^177^^^^^174^185^if  ( map.containsKey ( name )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( map.put ( name )  )  {^177^^^^^174^185^if  ( map.containsKey ( name )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return globalNode;^183^^^^^174^185^return nameInfo;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^NameInfo nameInfo = new PropagateReferences (  )  ;^180^^^^^174^185^NameInfo nameInfo = new NameInfo ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo propertyInfo = new NameInfo ( name ) ;^180^^^^^174^185^NameInfo nameInfo = new NameInfo ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;NameInfo nameInfo = new NameInfo ( name ) ;^180^^^^^174^185^NameInfo nameInfo = new NameInfo ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;NameInfo nameInfo = new NameInfo ( name ) ;^180^^^^^174^185^NameInfo nameInfo = new NameInfo ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( ! ( canModifyExterns )  )  {     traverse ( compiler, externRoot, new ProcessExternProperties (  )  ) ; }^180^^^^^174^185^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.put ( name, globalNode ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.put (  nameInfo ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.put ( name ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^map.put ( property, nameInfo ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( nameInfo ) ;map.put ( name, nameInfo ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.createNode ( globalNode ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^map.put ( name, nameInfo ) ;symbolGraph.createNode ( nameInfo ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( globalNode ) ;symbolGraph.createNode ( nameInfo ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, module, nameInfo ) ;symbolGraph.createNode ( nameInfo ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.createNode ( nameInfo ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.createNode ( externNode ) ;symbolGraph.createNode ( nameInfo ) ;^182^^^^^174^185^symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return name.get ( map ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return map.put ( name ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return map.get ( property ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return map.put ( property ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( 0.containsKey ( name )  )  {^177^^^^^174^185^if  ( map.containsKey ( name )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return null.put ( name ) ;^178^^^^^174^185^return map.get ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.put ( nameInfo, name ) ;^181^^^^^174^185^map.put ( name, nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^181^182^^^^174^185^map.put ( name, nameInfo ) ; symbolGraph.createNode ( nameInfo ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getNameInfoForName [RETURN_TYPE] AnalyzePrototypeProperties$NameInfo   String name SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( nameNode )  )  {^191^^^^^190^201^if  ( isPrototypePropertyAssign ( n )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( isPrototypePropertyAssign ( parent )  )  {^191^^^^^190^201^if  ( isPrototypePropertyAssign ( n )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {     String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;     symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^191^^^^^190^201^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, nameNode, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n, nameNode )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration (  n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t,  parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, parent, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( shouldTraverse ( t, n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( shouldTraverse ( t, node, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^java.lang.String name = ((parent.getType()) == (com.google.javascript.rhino.Token.NAME)) ? parent.getString() : n.getFirstChild().getString(); symbolStack.push(getNameInfoForName(name, VAR));^194^195^196^197^198^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  { String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^194^195^196^197^198^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  { String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( isPrototypePropertyAssign ( n )  )  {     symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }else     if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {         String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;         symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;     }^194^^^^^190^201^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P1_Replace_Type]^char name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^String name = parent.getType (  )  != Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = node.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String nodeame = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String parentame = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = parent.removeChild (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = parent .getString (  )   == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String name = n.removeChild (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {     String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;     symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^195^^^^^190^201^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = value.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String name = nameNode.removeChild (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^196^197^198^^^190^201^p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^n symbolStack.push ( getNameInfoForName ( nameNodeame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^n symbolStack.push ( getNameInfoForName ( valueame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( name, type )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName (  VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( VAR, name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack .pop (  )  ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( property, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = root.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String valueame = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, value, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n, value )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( n, t, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^} else if  ( shouldTraverse ( t, node, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String name = nameNode .getString (  )   == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^n symbolStack.push ( getNameInfoForName ( nodeame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^n symbolStack.push ( getNameInfoForName ( parentame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( value.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , type )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  )  )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( PROPERTY.getFirstChild (  ) .getLastChild (  ) .getString (  ) , n )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.removeChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  )  .getLastChild (  )  , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^symbolStack.push ( getNameInfoForName ( nameNode .getLastChild (  )  .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.removeChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n .getLastChild (  )  .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( isGlobalFunctionDeclaration ( t, nameNode, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^String name = parent.getType (  )  <= Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String nameNodeame = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String nameNodeame = parent.removeChild (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^n symbolStack.push ( getNameInfoForName ( rootame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^String name = parent.getType (  )  < Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( node.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n .getLastChild (  )  .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( nameNode.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  )  .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.getFirstChild (  )  .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( parent, n, t )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return false;^200^^^^^190^201^return true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  root  value  LinkedDirectedGraph  symbolGraph  String  name  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( n.getType() == OBJECTLIT && !((((parent.getType()) == ASSIGN) && getType() == GETPROP)) && equals("prototype")) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( n.getType (  )  == OBJECTLIT )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( ((parent.getType() == ASSIGN) && getType() == GETPROP) && equals("prototype")) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( (parent.getType() == ASSIGN && getType() == GETPROP) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  ) .getType (  )  == GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType() == STRING && !(propNameNode.isQuotedString()) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( n.getType() == NAME )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( (var != null && var.isGlobal()) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var.getInitialValue (  )  != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n.getVar (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.OBJECTLIT ||^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( node.getType (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == OBJECTLIT )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( ((parent.getType() == ASSIGN) && getType() == GETPROP) && equals("prototype")) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( (parent.getType() == ASSIGN && getType() == GETPROP) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == ASSIGN )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( parent.getFirstChild (  ) .getType (  )  == GETPROP )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( propNameNode != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( propNameNode.getType() == STRING && !(propNameNode.isQuotedString()) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( propNameNode.getType (  )  == STRING )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( n.getType() == NAME )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( (var != null && var.isGlobal()) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  )  != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n.removeChild (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n .getString (  )   == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n.getVar (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^} else if  ( n.getType (  )  > Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( (var != null && var.isGlobal()) )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var != null )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  )  != null )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n.removeChild (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n .getString (  )   == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( n.getVar (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( parent.removeChild (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( var != null || var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( var == null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  == null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( var != nodeull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.null )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != varull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var != null ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( (var != null && var.isGlobal()) )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var.getInitialValue (  )  != null )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( var != null && var .getInitialValue (  )   && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var .isGlobal (  )   != null && var^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getVar (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  )  .getString (  )   == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( var != true && var.isGlobal (  )  && var.getInitialValue (  )  != true && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^if (!(processGlobalFunctionDeclaration(t, n, parent, parent.getParent()))) {    addGlobalUseOfSymbol(name, t.getModule(), VAR);};^238^239^240^241^242^235^246^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^238^239^240^241^242^235^246^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , type ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, node, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, node, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.removeChild (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, node, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^239^240^241^242^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^239^240^241^242^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , type ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.removeChild (  )  )  )  {^240^^^^^235^246^parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^240^241^^^^235^246^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, nameNode, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( t .getScope (  )   )  {^238^^^^^235^246^if  ( t.inGlobalScope (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( property, t .getScope (  )  , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( t .getScope (  )   )  {^238^^^^^223^253^if  ( t.inGlobalScope (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^if (!(processGlobalFunctionDeclaration(t, n, parent, parent.getParent()))) {    addGlobalUseOfSymbol(name, t.getModule(), VAR);};^238^239^240^241^242^223^253^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^238^239^240^241^242^223^253^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , type ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( property, t .getScope (  )  , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, node, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, node, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, value, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^239^240^241^242^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^239^240^241^242^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( name, t.getModule (  ) , type ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, value, parent, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.removeChild (  )  )  )  {^240^^^^^225^255^parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent .getString (  )   )  )  {^240^^^^^225^255^parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^240^241^^^^225^255^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( name, t.getModule (  ) , type ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, root, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P1_Replace_Type]^char name = n.getchar (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = n.removeChild (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String parentame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node parent = nameNode.getParent (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( property ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Var var = name.getScope (  ) .getVar ( t ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Var var = t .inGlobalScope (  )  .getVar ( name ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Var var = t.getScope (  ) .getVar ( name ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String nodeame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String valueame = n.removeChild (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^var.getInitialValue (  ) .getVar (  )  == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^var .isGlobal (  )  .getType (  )  == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, root, parent, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( property, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != this && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( name, t .getScope (  )  , type ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, value, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent .getString (  )   )  )  {^240^^^^^235^246^parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, root, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent .getString (  )   )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( name, t.getModule (  ) , type ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String nodeame = n.removeChild (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( node.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = n .getLastChild (  )  ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^var .isGlobal (  )   != null && var^236^237^^^^221^251^var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , type ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( property, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  == Token.STRING || !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  <= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.removeChild (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.removeChild (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.STRING ) {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);^225^226^227^228^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^225^226^227^228^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^225^^^^^210^240^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( node.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , type ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^for  ( Node propNameNode = parent.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^for  ( Node node = n.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^for  ( Node n = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^for  ( Node propNameNode = n.removeChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^for  ( Node propNameNode = n .getLastChild (  )  ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = parent.removeChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  == Token.STRING || !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  > Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.removeChild (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.removeChild (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode .getString (  )   )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);^225^226^227^228^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^225^226^227^228^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^225^^^^^223^229^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( root.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , type ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( nameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^!propNameNode.removeChild (  )  )  {^226^^^^^223^229^!propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^!propNameNode .getString (  )   )  {^226^^^^^223^229^!propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^226^227^^^^223^229^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^propNameNode = nameNode.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^propNameNode = propNameNode.getVar (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^propNameNode = propNameNode.removeChild (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = value.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^223^224^225^226^227^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^propNameNode = value.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^propNameNode = propNameNode .getType (  )^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^propNameNode = node.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^propNameNode = root.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^!propNameNode.removeChild (  )  )  {^226^^^^^211^241^!propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^!propNameNode .getString (  )   )  {^226^^^^^211^241^!propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^226^227^^^^211^241^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( node.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , type ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( node.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  != Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode .getString (  )   )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( root.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.this )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( var != rootull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( var != false ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( name, t.getModule (  ) , type ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( property, t .getScope (  )  , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, nameNode, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, node, parent, parent .getString (  )   )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( property, t .getScope (  )  , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( name, t.getModule (  ) , type ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String valueame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, value, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( var != valueull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( var != this && var.isGlobal (  )  && var.getInitialValue (  )  != this && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( property, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( name, t .getScope (  )  , type ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = root.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  <= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( propNameNode .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.STRING ) {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( value.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( value .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameNode.removeChild (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , type ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( nameNode.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Var var = t .inGlobalScope (  )  .getVar ( property ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( value.getType (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^! ( parent.removeChild (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^! ( root.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && nameNode.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getVar (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  )  .getString (  )   == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.removeChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent .getLastChild (  )  .getType (  )  == Token.GETPROP && parent^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent .getLastChild (  )  .getType (  )  == Token.GETPROP && propNameNode^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && value.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent.removeChild (  ) .getType (  )  == Token.GETPROP && propNameNode.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "otyp" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getLastChild (  ) .getVar (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getVar (  ) .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  )  .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.removeChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getLastChild (  )  .getLastChild (  )  .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent .getLastChild (  )  .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = node.removeChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^propNameNode = node.removeChild (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( nameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( value.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propNameNodeame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^var.getInitialValue (  )  .getString (  )   == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( propName.equals ( "prototypepr" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( property.equals ( "prototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^206^^^^^191^221^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {     addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; }else {     addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^206^^^^^191^221^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( compiler.getCodingConvention (  ) .isExported ( property )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( propName.getCodingConvention (  ) .isExported ( compiler )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^} else {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( compiler.getCodingConvention (  ) .getVar ( propName )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);^208^209^210^211^212^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^208^209^210^211^212^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^208^^^^^193^223^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^208^^^^^193^223^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^208^^^^^193^223^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( property, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  ) , type ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , type ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  )  ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, PROPERTY.getModule (  ) , t ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( PROPERTY, t.getModule (  ) , propName ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^} else if  ( compiler.getCodingConvention (  )  .getFirstChild (  )   )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( property, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  ) , type ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^processPrototypeParent ( t, nameNode ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^processPrototypeParent (  parent ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^processPrototypeParent ( t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^processPrototypeParent ( parent, t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( t, node ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P1_Replace_Type]^char propName = n.getFirstChild (  ) .getNext (  ) .getchar (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String propName = value.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  ) .getNext (  ) .getVar (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  ) .getNext (  )  .getLastChild (  )  ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  ) .getVar (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  )  .getType (  )  .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n.removeChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String propName = n .getLastChild (  )  .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String propName = node.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propName = parent.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( property, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( propName.equals ( "protrototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( compiler.getCodingConvention (  ) .isExported ( property )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , type ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( t, value ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( parent.removeChild (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^} else if  ( n.getType (  )  < Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^} else if  ( propNameNode.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( var != true ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, node, parent, parent.removeChild (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, node, parent.removeChild (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propNameNodeame = n .getLastChild (  )  ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, root, parent.removeChild (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String rootame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( nameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , type ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^for  ( Node root = n.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = root.removeChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( propNameNode.removeChild (  ) , t.getModule (  ) , type ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = node.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^propNameNode = parent.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^propNameNode = nameNode.removeChild (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.removeChild (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  >= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.STRING ) {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^}  if  ( value.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.removeChild (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, node, parent.removeChild (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( property, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( property, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^processPrototypeParent ( name, t.getModule (  ) , type ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^for  ( Node nameNode = n.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  != Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( node.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addSymbolUse ( node.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^propNameNode =  null.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propName = propNameNode .getLastChild (  )  .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^for  ( Node propNameNode = value.removeChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propName = root.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String propName = propNameNode.removeChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( propName.equals ( "prorototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^} else if  ( value .getString (  )   == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^! ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^! ( parent .getString (  )   == Token.ASSIGN && parent.getFirstChild (  )^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^! ( nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent.getFirstChild (  ) .getVar (  )  == Token.GETPROP && root.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && root.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "ro" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addSymbolUse ( nameNode.removeChild (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( isPrototypePropertyAssign ( n )  && isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( parent )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, node )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t,  parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration (  n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( parent )  || isGlobalFunctionDeclaration ( t, n, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( t )  || isGlobalFunctionDeclaration ( n, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( parent, n, t )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( isPrototypePropertyAssign ( n )  ) {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( isPrototypePropertyAssign ( n )  || shouldTraverse ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^symbolStack.pop();^249^250^251^252^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^249^250^251^252^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.peek (  ) ;^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( symbolStack.empty (  )  )  { symbolStack.pop (  ) ; }^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( node )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, value, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, n, value )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( n, t, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^shouldTraverse ( t, n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^isGlobalFunctionDeclaration ( t, node, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^250^251^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolStack.peek (  ) ;^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( symbolStack.empty (  )  )  { symbolStack.pop (  ) ; }^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Var  var  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( null.empty (  )  )  {^256^^^^^255^264^if  ( symbolStack.empty (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( symbolStack.pop (  )  )  {^256^^^^^255^264^if  ( symbolStack.empty (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( !symbolStack.peek (  ) .equals ( nameInfo )  )  {^260^^^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( !symbolStack.pop (  ) .equals ( info )  )  {^260^^^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^symbolGraph.connect(symbolStack.peek(), module, info);^260^261^262^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  { symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^260^261^262^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  { symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , firstModule, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , module, nameInfo ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( null.peek (  ) , module, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) ,  info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( module.peek (  ) , symbolStack, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , info, module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph .connect ( nameInfo , this , info )  ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( symbolStack.pop (  ) , module, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( ! ( symbolStack.peek (  ) .equals ( info )  )  )  {     symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^261^^^^^255^264^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( property, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( name, VAR ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName (  type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( type, name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NameInfo info = process ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NameInfo info = process ( property, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo nameInfo = getNameInfoForName ( property, PROPERTY ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo nameInfo = new NameInfo ( name ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, firstModule, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, module, VAR ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name,  type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( module, name, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( type, module, name ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addSymbolUse ( name, module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph .connect ( nameInfo , 3 , globalNode )  ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( symbolStack .push ( null )  , module, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, type, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^return t.inGlobalScope (  )  || ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  && n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  < Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  != Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( node )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return n.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( t )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( parent )  || n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return t.inGlobalScope (  )  && ( NodeUtil.isExprAssign ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.removeChild (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return t.inGlobalScope (  )  ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^( NodeUtil.isFunctionDeclaration ( parent )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^( NodeUtil.isExprAssign ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.removeChild (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  { n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ; }^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^n.getType (  )  == Token.FUNCTION && nameNode.getType (  )  == Token.NAME ) ;^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^n.getType (  )  == Token.FUNCTION && node.getType (  )  == Token.NAME ) ;^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node n = parent.getFirstChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node n = assign.removeChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node n = assign .getLastChild (  )  ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node n = nameNode.getFirstChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node n = value.getFirstChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n != null || NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n == null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  != Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( nameNode != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n, nameNode )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.null )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs (  assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( assign != null && NodeUtil.isLhs ( n, n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( n != null ) {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( (n != null && isLhs(n, assign)) )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( n.getType (  )  == GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( getType() == GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( child.getType() == STRING && equals("prototype") )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil .isExprAssign ( nameNode )   && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.removeChild (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getVar (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( n != false ) {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( referenced )  {^285^^^^^277^296^if  ( isChainedProperty )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^285^^^^^277^296^if  ( isChainedProperty )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^285^^^^^277^296^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototypeto" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( child.getType (  )  == Token.STRING ) {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( child.removeChild (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( child.getType (  )  == Token.STRING && child.removeChild (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.STRING ) {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^return true;^288^289^290^291^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^288^289^290^291^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return false;^290^^^^^277^296^return true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getVar (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node child = n.getVar (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node child = n.removeChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node child = nameNode.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node child = n.getFirstChild (  ) .getFirstChild (  )  .getType (  )  ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node child = n .getLastChild (  )^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node child = value.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node child = node.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^child.getString (  ) .equals ( "prototypepr" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^child.removeChild (  ) .equals ( "prototype" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^child .getLastChild (  )  .equals ( "prototype" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^289^290^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  { return true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototy" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( child.getType (  )  == Token.null ) {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  != Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^boolean isChainedProperty = node.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^boolean isChainedProperty = n.getFirstChild (  ) .getVar (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^boolean isChainedProperty = n.getFirstChild (  )  .getString (  )   == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^boolean isChainedProperty = n.removeChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^boolean isChainedProperty = parent.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node child = propNameNode.getFirstChild (  ) .getFirstChild (  )  .getType (  )  ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getVar (  )  == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.getFirstChild (  )  .getString (  )   == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.removeChild (  ) .getType (  )  == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n .getLastChild (  )  .getType (  )  == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node child = parent.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node child = propNameNode.removeChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( parent.removeChild (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^child.getString (  ) .equals ( "prot" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( child.getType (  )  <= Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "pro" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( child.getType (  )  == Token.STRING && child .getLastChild (  )  .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^child.getString (  ) .equals ( "rototype" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "torototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.STRING && child.removeChild (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^boolean isChainedProperty = nameNode.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node child = root.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( value != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n, node )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( parent != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^n.removeChild (  )  == Token.GETPROP )  {^280^^^^^277^296^n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( node .getString (  )   == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^child.getString (  ) .equals ( "prototypepro" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return true;^295^^^^^277^296^return false;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  externRoot  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node firstChild = value.getFirstChild (  ) ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node firstChild = nameNode.removeChild (  ) ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node firstChild = nameNode .getLastChild (  )  ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node firstChild = root.getFirstChild (  ) ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node firstChild = node.getFirstChild (  ) ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  &&  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild == null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, node, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, parent, value )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  nameNode != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, parent, firstChild )  ||  gramps != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( (firstChild != null && isGlobalFunctionDeclaration(t, firstChild, nameNode)) )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( firstChild != null )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( isExported(name) || anchorUnusedVars )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( shouldTraverse ( t, parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != true &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  && anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( property )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || referenced )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( anchorUnusedVars.getCodingConvention (  ) .isExported ( name )  || compiler )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  ) {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getVar ( name )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .getFirstChild (  )   || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  (  referenced )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^317^318^319^320^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^317^318^319^320^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^317^^^^^302^325^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {     addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; }else {     addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^317^^^^^302^325^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( property, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , type ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return false;^322^^^^^302^325^return true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )   )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, value, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, parent, value, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, parent, t, gramps.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^new GlobalFunction ( nameNode, parent, node, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = nameNode.removeChild (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String name = n.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node firstChild = nameNode.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node parent = nameNode.getParent (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^String name = propNameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^String name = value.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add (  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )   )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName (  VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( property, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( node, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, n, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, nameNode, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, type ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( VAR, name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, t, gramps.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, parent ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, VAR, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( name, VAR ) .NameInfo (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( name, VAR )  .getDeepestCommonModuleRef (  )  .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t .getScope (  )   )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, parent, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^new GlobalFunction ( nameNode, parent, gramps, t .getScope (  )   )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( compiler.getCodingConvention (  ) .getVar ( property )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( name, t .getScope (  )  , type ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( parent, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, n, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^new GlobalFunction ( nameNode, parent, nameNode, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, nameNode, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent, node )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( gramps, parent, t )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( parent, t, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^shouldTraverse ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^isGlobalFunctionDeclaration ( t, parent, nameNode )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, node, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, firstChild, node )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( nameNode, firstChild, t )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, nameNode, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^shouldTraverse ( t, firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^shouldTraverse ( t, root, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^310^311^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  { String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^String name = nameNode .getLastChild (  )  ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, root, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, node, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( nameNode, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( name, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, nameNode ) .getDeclarations (  ) .add ( new GlobalFunction ( VAR, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, t, gramps, parent.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return true;^324^^^^^302^325^return false;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  externRoot  firstChild  gramps  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( dest.getType (  )  == Token.STRING || NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( dest.getType (  )  != Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs (  parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( nameNode )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( nameNode, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, map )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( grandParent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( dest )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( parent )  && NodeUtil.isLhs ( n, grandParent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( parent, n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, dest )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  ( dest.getType (  )  == Token.STRING ) {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  (  NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  ( (dest.getType() == STRING && isExprAssign(grandParent)) )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  ( dest.getType (  )  == STRING )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( dest.removeChild (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.removeChild ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  (  NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = Property prop =  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )  , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( propNameNode, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.removeChild (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent .getString (  )  , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( parent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P1_Replace_Type]^char name = dest.getchar (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = propNameNode.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = dest.removeChild (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( n, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t .getScope (  )   ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = n.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = dest .getLastChild (  )  ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = node.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^grandParent.removeChild (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^345^346^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( property, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, type ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY ) .NameInfo (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( map.getType (  )  != Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( map.getType (  )  <= Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  ( key != null )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P6_Replace_Expression]^if  ( key.getType() == STRING )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( map.removeChild (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( map .getString (  )   == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     String name = key.getString (  ) ;     Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^353^^^^^338^368^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^353^^^^^338^368^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( key.getType (  )  > Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P15_Unwrap_Block]^java.lang.String name = key.getString(); com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getNext(), map, n, t.getModule()); getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);^358^359^360^361^362^343^373^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P16_Remove_Block]^^358^359^360^361^362^343^373^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  ( map.getType (  )  )  ==  ( OBJECTLIT )  )  {     for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         if  (  ( key.getType (  )  )  ==  ( STRING )  )  {             String name = key.getString (  ) ;             Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;             getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;         }     } }^358^^^^^343^373^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^358^^^^^343^373^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = Property prop =  new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  )  , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( value, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , nameNode, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( key, key.getNext (  ) , root, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P1_Replace_Type]^char name = key.getchar (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = value.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = key.removeChild (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = node.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = propNameNodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = nameNode.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = key .getLastChild (  )  ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = value.removeChild (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key, nameNode.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key, n.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^361^362^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( property, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, type ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY ) .NameInfo (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY )  .getDeepestCommonModuleRef (  )  .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^getNameInfoForName ( name, type ) .NameInfo (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node key = node.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node node = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^for  ( Node key = map.removeChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^for  ( Node key = map .getLastChild (  )  ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^for  ( Node value = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( key.removeChild (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P15_Unwrap_Block]^java.lang.String name = key.getString(); com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getNext(), map, n, t.getModule()); getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);^358^359^360^361^362^356^364^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P16_Remove_Block]^^358^359^360^361^362^356^364^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  ( map.getType (  )  )  ==  ( OBJECTLIT )  )  {     for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         if  (  ( key.getType (  )  )  ==  ( STRING )  )  {             String name = key.getString (  ) ;             Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;             getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;         }     } }^358^^^^^356^364^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^358^^^^^356^364^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = Property prop =  new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( node, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , parent, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = parentew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( parent, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P1_Replace_Type]^char name = key.getchar (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = node.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = key.removeChild (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = nameNode.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( value, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , nameNode, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = nameNodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = nodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = key .getLastChild (  )  ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = nameNode.removeChild (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key, nameNode.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key, key .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key, n.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^361^362^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( property, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY ) .NameInfo (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY )  .getDeepestCommonModuleRef (  )  .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^getNameInfoForName ( name, type ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( nameNode, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , value, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( value, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = n.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = value.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , propNameNode, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = rootew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( key, key.removeChild (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key != null; n = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key != null; key = key.getVar (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key != null; key = key .getType (  )^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key != null; key = key.removeChild (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key !=  null; node^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = nodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( nameNode, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node key = root.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node firstChild = nameNode.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = n.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = valueew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( parent, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node key = propNameNode.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^for  ( Node key = parent.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^return assign.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^return node.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key != null; value = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^357^358^359^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key != null; node = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key != null; propNameNode = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( n.removeChild (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^key, key .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( root, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , propNameNode, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = propNameNode.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key, n.removeChild (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node key = value.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node nameNode = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^for  ( Node map = key.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^for  ( Node key = nameNode.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( key.removeChild (  )  == Token.3 )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = propNameNodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = root.removeChild (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key, node.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = rootew LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = node.removeChild (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key, root.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^getNameInfoForName ( property, PROPERTY ) .NameInfo (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key !=  null; nameNode^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = Property prop =  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )  , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( n, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.removeChild (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent .getString (  )  , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( root, grandParent .getString (  )  , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , node, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( root, key.removeChild (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node dest = root.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .getVar (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node dest = n.removeChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node dest = n .getLastChild (  )  .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node dest = n.getFirstChild (  )  .getType (  )  ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node parent = nameNode.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node parent = n.removeChild (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node parent = n .getString (  )  ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node parent = n.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node parent = n.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node parent = nameNode.getParent (  ) ;Node parent = n.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node grandParent = value.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node grandParent = parent.removeChild (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node grandParent = n.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node parent = nameNode.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P1_Replace_Type]^char name = dest.getchar (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = nameNode.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = dest.removeChild (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = propNameNode.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( nameNode, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t .getScope (  )   ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( node, grandParent.removeChild (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node map = node.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node map = n.getFirstChild (  ) .getVar (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node map = n.getFirstChild (  )  .getType (  )  ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^Node map = n.removeChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( name ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Property prop = nameNodeew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^switch  ( map.getType (  )  )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^switch  ( nameNode.getType (  )  )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node dest = nameNode.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^336^337^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ; Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node dest = value.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node parent = value.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^337^338^^^^322^352^Node parent = n.getParent (  ) ; Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node grandParent = nameNode.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^Node grandParent = map.removeChild (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isExprAssign ( nameNode )  && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^NodeUtil.removeChild ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^NodeUtil .isFunctionDeclaration ( grandParent )   && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^NodeUtil.isExprAssign ( n )  && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^341^342^343^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  { String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isLhs ( node, parent )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isLhs ( n, map )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isLhs (  parent )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isLhs ( n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^NodeUtil.isLhs ( parent, n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^NodeUtil .isExprAssign ( externRoot )   )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^NodeUtil.isLhs ( n, nameNode )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^342^343^^^^327^357^NodeUtil.isLhs ( n, parent )  )  { String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^String name = value.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^String name = dest .getLastChild (  )  ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^String name = n.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^grandParent.removeChild (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^grandParent .getString (  )  , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^345^346^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( property, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, type ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P7_Replace_Invocation]^getNameInfoForName ( name, PROPERTY ) .NameInfo (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^getNameInfoForName ( name, type ) .NameInfo (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node map = map.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P14_Delete_Statement]^^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P11_Insert_Donor_Statement]^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^Node map = propNameNode.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^if  ( propNameNode.removeChild (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^for  ( Node key = node.removeChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P8_Replace_Mix]^key != null; root = key.removeChild (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key != null; nameNode = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^key, node.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  Property  prop  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( property, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, VAR )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode,  getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName (  type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect (  module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( module, globalNode, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( name, module, getNameInfoForName ( globalNode, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, type, getNameInfoForName ( name, module )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( globalNode, module, process ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^symbolGraph.connect ( globalNode, firstModule, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, module, nameInfo ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, null, nameInfo ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( type, name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^symbolGraph.connect(externNode, firstModule, getNameInfoForName(n.getLastChild().getString(), PROPERTY));^378^379^380^381^^377^382^if  ( n.getType (  )  == Token.GETPROP )  { symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^378^379^380^381^^377^382^if  ( n.getType (  )  == Token.GETPROP )  { symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( node.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, module, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , type )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect (  firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode,  getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( PROPERTY.getLastChild (  ) .getString (  ) , n )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( firstModule, externNode, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, PROPERTY, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , firstModule )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.createNode ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  )  .getLastChild (  )  , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.removeChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^symbolGraph.createNode ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , type )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( GETPROP )  )  {     symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^379^^^^^377^382^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( nameNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , type )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY.getLastChild (  ) .getString (  ) , n )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( n.getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( n.getLastChild (  )  .getLastChild (  )  , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( n.removeChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^getNameInfoForName ( n.removeChild (  ) .getString (  ) , type )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( parent.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^getNameInfoForName ( nameNode .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( value.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^getNameInfoForName ( n .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^getNameInfoForName ( map.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( propNameNode.getType (  )  == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( map.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( nameInfo, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( n, firstModule, getNameInfoForName ( externNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( PROPERTY, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , externNode )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, n, getNameInfoForName ( firstModule.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^getNameInfoForName ( nameNode.removeChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^getNameInfoForName ( root.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  NodeTraversal  t  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  externNode  globalNode  info  nameInfo  JSModule  deepestCommonModuleRef  firstModule  module  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( nameInfo.isReferenced (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( startModule != null )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( start.NameInfo (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  (  ( startModule != null )  &&  ( moduleGraph.dependsOn ( startModule, edge )  )  )  {     return dest.markReference ( startModule ) ; }else {     return dest.markReference ( edge ) ; }^388^^^^^387^398^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( startModule != null || moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( startModule == null && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( firstModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn (  edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn ( startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( startModule != null ) {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( startModule != null && moduleGraph.getDeepestCommonDependencyInclusive ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( startModule != this ) {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^return dest.markReference(startModule);^390^391^392^393^394^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ; } else { return dest.markReference ( edge ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^390^391^392^393^394^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ; } else { return dest.markReference ( edge ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P13_Insert_Block]^if  ( start.isReferenced (  )  )  {     JSModule startModule = start.getDeepestCommonModuleRef (  ) ;     if  (  ( startModule != null )  &&  ( moduleGraph.dependsOn ( startModule, edge )  )  )  {         return dest.markReference ( startModule ) ;     }else {         return dest.markReference ( edge ) ;     } }^390^^^^^387^398^[Delete]^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return nameInfo.markReference ( edge ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return dest.markReference ( startModule ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return edge.markReference ( dest ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return nameInfo .isReferenced (  )  ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return nameInfo.markReference ( startModule ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return startModule.markReference ( dest ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return start .isReferenced (  )  ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return dest.markReference ( module ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return dest .isReferenced (  )  ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return dest.markReference ( firstModule ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return dest.markReference ( module ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return dest .isReferenced (  )  ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^JSModule nameInfoModule = start.getDeepestCommonModuleRef (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^JSModule startModule = start.NameInfo (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^JSModule originalDeepestCommon = deepestCommonModuleRef;JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^JSModule nameInfoModule = start .getDeclarations (  )  ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.dependsOn ( module, edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.dependsOn ( startModule, module )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.dependsOn (  edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.dependsOn ( startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.dependsOn ( edge, startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^moduleGraph.getDeepestCommonDependencyInclusive ( startModule, edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^moduleGraph .getDeepestCommonDependencyInclusive ( deepestCommonModuleRef , edge )   )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^moduleGraph.getDeepestCommonDependencyInclusive ( module, edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^391^392^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return start.markReference ( startModule ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return start.markReference ( edge ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( module != null && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn ( startModule, module )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != null && edge.dependsOn ( startModule, moduleGraph )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( startModule != null && moduleGraph .getDeepestCommonDependencyInclusive ( deepestCommonModuleRef , firstModule )   )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( startModule != false && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^JSModule infoModule = start.getDeepestCommonModuleRef (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameInfo.NameInfo (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^moduleGraph .getDeepestCommonDependencyInclusive ( edge , deepestCommonModuleRef )   )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^moduleGraph .getDeepestCommonDependencyInclusive ( startModule , module )   )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^return true;^397^^^^^387^398^return false;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node parent = value.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Node parent = nameNode.getString (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Node parent = node.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node firstChild = nameNode.getFirstChild (  ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^Node parent = map.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( node.getParent (  ) , node ) ;Node parent = nameNode.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.FUNCTION && parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  != 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 6 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.FUNCTION ) {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  (  parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FUNCTION )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( parent.getType (  )  == VAR )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.FUNCTION || parent.removeChild (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 3 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);^443^444^445^446^447^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  { NodeUtil.removeChild ( parent.getParent (  ) , parent ) ; } else { Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^443^444^445^446^447^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  { NodeUtil.removeChild ( parent.getParent (  ) , parent ) ; } else { Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^Preconditions.checkState ( parent .getString (  )   == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Preconditions.checkState ( map.getType (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Preconditions.checkState ( nameNode.getType (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^parent.removeChild ( map ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^parent .isFunctionDeclaration ( externRoot )  ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^map.removeChild ( value ) ;parent.removeChild ( nameNode ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( node.getParent (  ) , node ) ;parent.removeChild ( nameNode ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^map.removeChild ( key ) ;parent.removeChild ( nameNode ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.removeChild ( nameNode.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil.isLhs ( parent.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil .isFunctionDeclaration ( dest )  ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil.removeChild ( parent.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NodeUtil.removeChild ( root.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( node.getParent (  ) , node ) ;NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.removeChild ( map.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil.removeChild ( parent .getString (  )  , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NodeUtil.removeChild ( nameNode .getString (  )  , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( propNameNode.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.FUNCTION || parent .getParent (  )   == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.removeChild ( n.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NodeUtil.removeChild ( node.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NodeUtil.removeChild ( n.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Preconditions.checkState ( node.getType (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^446^447^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^Preconditions.checkState ( n.removeChild (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^parent.removeChild ( value ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^parent.removeChild ( propNameNode ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return startModule;^453^^^^^452^454^return module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.removeChild ( n.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil .isFunctionDeclaration ( key )  ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^NodeUtil.removeChild ( node.getString (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^NodeUtil.removeChild ( map.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;NodeUtil.removeChild ( node.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.removeChild ( nameNode ) ;NodeUtil.removeChild ( node.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^Node parent = nameNode.getParent (  ) ;NodeUtil.removeChild ( node.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^NodeUtil.removeChild ( propNameNode.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return getValueParent (  ) .getLastChild (  ) .getFirstChild (  ) ;^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return getValueParent (  )  .getLastChild (  )^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return getValueParent (  ) .getFirstChild (  ) ;^504^^^^^503^505^return getValueParent (  ) .getLastChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^504^^^^^503^505^return getValueParent (  ) .getLastChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return parent.getFirstChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return node.getLastChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return root.getFirstChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return startModule;^514^^^^^513^515^return module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.removeChild ( root ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^map.getChildCount ( key ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^map.removeChild ( nameNode ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^542^543^^^^541^544^map.removeChild ( key ) ; map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.removeChild ( nameNode ) ;map.removeChild ( key ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^map.removeChild ( value ) ;map.removeChild ( key ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^map.removeChild ( propNameNode ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^map.getChildCount ( value ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^parent.removeChild ( nameNode ) ;map.removeChild ( value ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^map.removeChild ( key ) ;map.removeChild ( value ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return n.getFirstChild (  ) ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^return assign.getLastChild (  ) ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return nameNode.getLastChild (  ) ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return value.getFirstChild (  ) ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return n;^553^^^^^552^554^return value;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^return n;^558^^^^^557^559^return map;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return startModule;^563^^^^^562^564^return module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^@Override public String toString (  )  { return property; }^587^^^^^582^592^@Override public String toString (  )  { return name; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return isChainedProperty;^591^^^^^590^592^return referenced;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] isReferenced [RETURN_TYPE] boolean   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^boolean hasChanged = true;^601^^^^^600^624^boolean hasChanged = false;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( !isChainedProperty )  {^602^^^^^600^624^if  ( !referenced )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^referenced = true; hasChanged = true;^602^603^604^605^^600^624^if  ( !referenced )  { referenced = true; hasChanged = true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^602^603^604^605^^600^624^if  ( !referenced )  { referenced = true; hasChanged = true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^referenced = false;^603^^^^^600^624^referenced = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^hasChanged = true;referenced = true;^603^^^^^600^624^referenced = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^hasChanged = false;^604^^^^^600^624^hasChanged = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^referenced = true;hasChanged = true;^604^^^^^600^624^hasChanged = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( moduleGraph == null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModuleGraph != null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( deepestCommonModuleRef == null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P6_Replace_Expression]^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( startModuleGraph != false )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( deepestCommonModuleRef != null )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule == null )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( deepestCommonModuleRef == this )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( startModule, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^deepestCommonModuleRef =  startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( startModule, module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P14_Delete_Statement]^^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = originalDeepestCommon;^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^deepestCommonModuleRef =  startModule;^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^this.module = module;deepestCommonModuleRef = module;^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { deepestCommonModuleRef = module; }^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P2_Replace_Operator]^if  ( originalDeepestCommon >= deepestCommonModuleRef )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( startModule != deepestCommonModuleRef )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( originalDeepestCommon != startModule )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P15_Unwrap_Block]^hasChanged = true;^618^619^620^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P16_Remove_Block]^^618^619^620^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P3_Replace_Literal]^hasChanged = false;^619^^^^^600^624^hasChanged = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^referenced = true;hasChanged = true;^619^^^^^600^624^hasChanged = true;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^deepestCommonModuleRef = moduleGraph .getRootModule (  )  ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^deepestCommonModuleRef =  nullGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, null ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^JSModule originalDeepestCommon = startModule;^608^^^^^600^624^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P11_Insert_Donor_Statement]^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;JSModule originalDeepestCommon = deepestCommonModuleRef;^608^^^^^600^624^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( originalDeepestCommon != deepestCommonModuleRef )  { JSModule originalDeepestCommon = deepestCommonModuleRef; }^608^^^^^600^624^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^if  ( deepestCommonModuleRef == false )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( originalDeepestCommon, module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P7_Replace_Invocation]^moduleGraph .getRootModule (  )  ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^deepestCommonModuleRef =  null;^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraphGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return isChainedProperty;^623^^^^^600^624^return hasChanged;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^return startModule;^631^^^^^630^632^return deepestCommonModuleRef;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getDeepestCommonModuleRef [RETURN_TYPE] JSModule   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { return deepestCommonModuleRef; }^631^^^^^630^632^return deepestCommonModuleRef;^[CLASS] AnalyzePrototypeProperties ProcessProperties ProcessExternProperties PropagateReferences SymbolType GlobalFunction AssignmentProperty LiteralProperty NameInfo  [METHOD] getDeepestCommonModuleRef [RETURN_TYPE] JSModule   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P8_Replace_Mix]^private Stack<NameInfo> symbolStack  = null ;^188^^^^^183^193^private Stack<NameInfo> symbolStack = new Stack<NameInfo> (  ) ;^[CLASS] ProcessProperties  [METHOD] getDeclarations [RETURN_TYPE] Deque   [VARIABLES] Set  IMPLICITLY_USED_PROPERTIES  Node  assign  child  dest  externRoot  firstChild  gramps  grandParent  key  map  n  nameNode  node  parent  propNameNode  root  value  LinkedDirectedGraph  symbolGraph  String  name  propName  property  Deque  declarations  JSModuleGraph  moduleGraph  Stack  symbolStack  AbstractCompiler  compiler  boolean  anchorUnusedVars  canModifyExterns  hasChanged  isChainedProperty  referenced  NameInfo  dest  externNode  globalNode  info  nameInfo  start  JSModule  deepestCommonModuleRef  edge  firstModule  module  originalDeepestCommon  startModule  SymbolType  PROPERTY  VAR  type  Map  map  propertyNameInfo  varNameInfo  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( parent )  )  {^191^^^^^190^201^if  ( isPrototypePropertyAssign ( n )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P13_Insert_Block]^if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {     String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;     symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^191^^^^^190^201^[Delete]^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, parent, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration (  n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t,  parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( parent, n, t )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P6_Replace_Expression]^} else {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^} else if  ( shouldTraverse ( t, n, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P15_Unwrap_Block]^java.lang.String name = ((parent.getType()) == (com.google.javascript.rhino.Token.NAME)) ? parent.getString() : n.getFirstChild().getString(); symbolStack.push(getNameInfoForName(name, VAR));^194^195^196^197^198^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  { String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P16_Remove_Block]^^194^195^196^197^198^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  { String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P13_Insert_Block]^if  ( isPrototypePropertyAssign ( n )  )  {     symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }else     if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {         String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;         symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;     }^194^^^^^190^201^[Delete]^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P1_Replace_Type]^char name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^String name = parent.getType (  )  <= Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^String parentame = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^String parentame = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P13_Insert_Block]^if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {     String name =  (  ( parent.getType (  )  )  ==  ( NAME )  )  ? parent.getString (  )  : n.getFirstChild (  ) .getString (  ) ;     symbolStack.push ( getNameInfoForName ( name, VAR )  ) ; }^195^^^^^190^201^[Delete]^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^String name = n.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^196^197^198^^^190^201^p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P8_Replace_Mix]^n symbolStack.push ( getNameInfoForName ( parentame, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^197^198^^^^190^201^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName (  VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( VAR, name )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^String name = parent.getType (  )  < Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( t, parent, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P8_Replace_Mix]^symbolStack.push ( getNameInfoForName ( name, 4 )  ) ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  )  )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( PROPERTY.getFirstChild (  ) .getLastChild (  ) .getString (  ) , n )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack .pop (  )  .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n .getString (  )  .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , 2 )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getLastChild (  ) .getVar (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getVar (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^n.getFirstChild (  )  .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P8_Replace_Mix]^}  if  ( shouldTraverse ( t, n, n )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^String name = parent.getType (  )  != Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^String name = parent.getType (  )  >= Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^String name = parent .getString (  )   == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^195^196^197^198^^190^201^String name = parent.getType (  )  == Token.NAME ? p n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  )  .getFirstChild (  )  .getString (  ) , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  )  .getLastChild (  )  , PROPERTY )  ) ;^192^193^^^^190^201^symbolStack.push ( getNameInfoForName ( n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getLastChild (  )  .getLastChild (  )  , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P8_Replace_Mix]^n .getString (  )  .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^193^^^^^190^201^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^} else if  ( isGlobalFunctionDeclaration ( n, t, parent )  )  {^194^^^^^190^201^} else if  ( isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^symbolStack .pop (  )  ;^198^^^^^190^201^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P3_Replace_Literal]^return false;^200^^^^^190^201^return true;^[CLASS] ProcessProperties  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( propNameNode.getType (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( n.getType() == OBJECTLIT && !((((parent.getType()) == ASSIGN) && getType() == GETPROP)) && equals("prototype")) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( n.getType (  )  == OBJECTLIT )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( ((parent.getType() == ASSIGN) && getType() == GETPROP) && equals("prototype")) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( (parent.getType() == ASSIGN && getType() == GETPROP) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  ) .getType (  )  == GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType() == STRING && !(propNameNode.isQuotedString()) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( n.getType() == NAME )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( (var != null && var.isGlobal()) )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var.getInitialValue (  )  != null )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( n.getVar (  )  == Token.GETPROP )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P9_Replace_Statement]^if  ( map.getType (  )  == Token.OBJECTLIT )  {^204^^^^^189^219^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.OBJECTLIT ||^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == OBJECTLIT )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( ((parent.getType() == ASSIGN) && getType() == GETPROP) && equals("prototype")) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( (parent.getType() == ASSIGN && getType() == GETPROP) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( parent.getType (  )  == ASSIGN )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( parent.getFirstChild (  ) .getType (  )  == GETPROP )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( propNameNode != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( propNameNode.getType() == STRING && !(propNameNode.isQuotedString()) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( propNameNode.getType (  )  == STRING )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( n.getType() == NAME )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( (var != null && var.isGlobal()) )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  )  != null )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^} else if  ( n .getString (  )   == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^} else if  ( n.getVar (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^} else if  ( n.getType (  )  <= Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( propNameNode.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal()) && (var.getInitialValue() != null) && getType() == FUNCTION )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( (var != null && var.isGlobal()) )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var != null )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  )  != null )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^} else if  ( n .getString (  )   == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^} else if  ( n.getVar (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^}  if  ( propNameNode.getType (  )  == Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( var != null || var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( var == null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  == null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  != Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( var != propNameNodeull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var != null ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( ((var != null) && var.isGlobal() && var.getInitialValue() != null) )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( (var != null && var.isGlobal()) )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var.getInitialValue (  )  != null )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( var.getInitialValue (  ) .getType (  )  == FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( var != null && var .getInitialValue (  )   && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var .isGlobal (  )   != null && var^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getVar (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( var != false ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( t .getScope (  )   )  {^238^^^^^235^246^if  ( t.inGlobalScope (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^if (!(processGlobalFunctionDeclaration(t, n, parent, parent.getParent()))) {    addGlobalUseOfSymbol(name, t.getModule(), VAR);};^238^239^240^241^242^235^246^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^238^239^240^241^242^235^246^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^239^240^241^242^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^239^240^241^242^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^235^246^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^240^241^^^^235^246^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^parent .getString (  )   )  )  {^240^^^^^235^246^parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^if (!(processGlobalFunctionDeclaration(t, n, parent, parent.getParent()))) {    addGlobalUseOfSymbol(name, t.getModule(), VAR);};^238^239^240^241^242^223^253^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^238^239^240^241^242^223^253^if  ( t.inGlobalScope (  )  )  { if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration (  n, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t,  parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, n,  parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( n, t, parent, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^239^240^241^242^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^239^240^241^242^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( t, parent, n, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^239^^^^^224^254^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^240^241^^^^225^255^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( !processGlobalFunctionDeclaration ( parent, n, t, parent.getParent (  )  )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent .getString (  )   )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P1_Replace_Type]^char name = n.getchar (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^String propNameNodeame = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = n.getString (  ) ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^Var var = t.getScope (  ) .getVar ( propName ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^Var var = name.getScope (  ) .getVar ( t ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^Var var = t.getScope (  )  .getString (  )  ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Var var = t.getScope (  ) .getVar ( name ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^String name = n .getLastChild (  )  ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^Var var = t .inGlobalScope (  )  .getVar ( name ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^var.getInitialValue (  ) .getVar (  )  == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^var .isGlobal (  )  .getType (  )  == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( t .getScope (  )   )  {^238^^^^^223^253^if  ( t.inGlobalScope (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^241^^^^^226^256^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  )  ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( VAR, t.getModule (  ) , name ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( name, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( n != varull && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  )  .getString (  )   == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != true && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t, name.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^String propNameNodeame = n .getLastChild (  )  ;^231^^^^^216^246^String name = n.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^Var var = t .inGlobalScope (  )  .getVar ( propName ) ;^234^^^^^219^249^Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^var .isGlobal (  )   != null && var^236^237^^^^221^251^var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( name, t .getScope (  )  , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  == Token.STRING || !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  < Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  (  !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( propNameNode .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);^225^226^227^228^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^225^226^227^228^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^225^^^^^210^240^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , 4 ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( parent .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode == null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^for  ( Node propNameNode = parent.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^for  ( Node parent = n.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^for  ( Node n = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  == Token.STRING || !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  != Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == Token.STRING ) {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  (  !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( propNameNode.getType (  )  == STRING )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( propNameNode .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.STRING ) {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);^225^226^227^228^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^225^226^227^228^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^225^^^^^223^229^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^226^227^^^^223^229^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( parent .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^propNameNode = parent.getNext (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^propNameNode = propNameNode.getVar (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^propNameNode = propNameNode .getType (  )^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^for  ( Node propNameNode = propNameNode.getFirstChild (  ) ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^for  ( Node propNameNode = n .getString (  )  ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^223^224^225^226^227^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null; propNameNode = propNameNode.getNext (  ) .getNext (  )  )  { if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^propNameNode = parent .getType (  )^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^226^227^^^^211^241^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) .getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  )  ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY.getString (  ) , t.getModule (  ) , propNameNode ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode.getString (  ) , t .getScope (  )  , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^!propNameNode.isQuotedString (  )  )  { addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  >= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propNameNode.getString (  ) , PROPERTY.getModule (  ) , t ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( parent.getString (  ) , t.getModule (  ) , PROPERTY ) ;^227^^^^^225^228^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^} else if  ( n.getType (  )  >= Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^} else if  ( n.getType (  )  < Token.NAME )  {^230^^^^^215^245^} else if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  (  var.isGlobal (  )  && var.getInitialValue (  )  != this && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , 1 ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^244^^^^^235^246^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , 1 ) ;^241^^^^^239^242^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^var.getInitialValue (  )  .getString (  )   == Token.FUNCTION )  {^237^^^^^222^252^var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, n, propNameNode, parent .getString (  )   )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, VAR.getModule (  ) , t ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( var != true && var.isGlobal (  )  && var .isGlobal (  )   != true && var^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , null ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , this ) ;^244^^^^^238^245^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^parent .getString (  )   )  )  {^240^^^^^225^255^parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  >= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( propNameNode.getType (  )  == Token.4 && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( propNameNode .getLastChild (  )  , t.getModule (  ) , null ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^!propNameNode .getString (  )   )  {^226^^^^^223^229^!propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( propNameNode.getType (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^! ( propNameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && propNameNode.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getVar (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prorototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getLastChild (  ) .getVar (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getLastChild (  )  .getLastChild (  )  .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  ) .getVar (  ) .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  )  .getFirstChild (  )  .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^propNameNode = parent.getVar (  ) .getNext (  )  )  {^224^^^^^209^239^propNameNode = propNameNode.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^!propNameNode .getString (  )   )  {^226^^^^^211^241^!propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t.getString (  ) , propNameNode.getModule (  ) , PROPERTY ) ;^227^^^^^212^242^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^if  ( propName.equals ( "prototyrototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( name.equals ( "prototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^206^^^^^191^221^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {     addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; }else {     addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^206^^^^^191^221^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( propName.getCodingConvention (  ) .isExported ( compiler )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^} else {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^} else if  ( compiler.getCodingConvention (  ) .getVar ( propName )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);^208^209^210^211^212^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^208^209^210^211^212^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  { addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; } else { addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  (  ( compiler.getCodingConvention (  ) .isExported ( name )  )  ||  ( anchorUnusedVars )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^208^^^^^193^223^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( t.inGlobalScope (  )  )  {     if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {         addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;     } }else {     addSymbolUse ( name, t.getModule (  ) , VAR ) ; }^208^^^^^193^223^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P13_Insert_Block]^if  ( propName.equals ( "prototype" )  )  {     processPrototypeParent ( t, parent ) ; }else     if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {         addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;     }else {         addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;     }^208^^^^^193^223^[Delete]^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, t.getModule (  )  ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, propName.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( propName, PROPERTY.getModule (  ) , t ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^} else if  ( compiler.getCodingConvention (  )  .getFirstChild (  )   )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( PROPERTY, t.getModule (  ) , propName ) ;^209^^^^^194^224^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( name, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse (  t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, t.getModule (  )  ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( PROPERTY, t.getModule (  ) , propName ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( propName, PROPERTY.getModule (  ) , t ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^processPrototypeParent ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^processPrototypeParent ( t, propNameNode ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^processPrototypeParent (  parent ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^processPrototypeParent ( t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^processPrototypeParent ( parent, t ) ;^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^207^^^^^192^222^processPrototypeParent ( t, parent ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^addSymbolUse ( propName, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P1_Replace_Type]^char propName = n.getFirstChild (  ) .getNext (  ) .getchar (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  ) .getNext (  ) .getVar (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  ) .getVar (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^String propName = n .getString (  )  .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^String propName = propNameNode .getString (  )  .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^String propName = n.getFirstChild (  )  .getType (  )  .getString (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^if  ( propName.equals ( "prrototype" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^} else if  ( null.getCodingConvention (  ) .isExported ( propName )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^} else if  ( 1.getCodingConvention (  ) .isExported ( propName )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addSymbolUse ( t, propName.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^if  ( propName.equals ( "pr" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( name, t .getScope (  )  , PROPERTY ) ;^211^^^^^208^212^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^}  if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^208^^^^^193^223^} else if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^}  if  ( parent.getVar (  )  == Token.OBJECTLIT &&^213^214^215^216^^198^228^} else if  ( n.getType (  )  == Token.OBJECTLIT &&^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( var != false && var.isGlobal (  )  && var .isGlobal (  )   != false && var^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent .getString (  )   )  )  {^239^240^^^^235^246^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( name, t.getModule (  ) , null ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addGlobalUseOfSymbol ( propName, t .getScope (  )  , VAR ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( !processGlobalFunctionDeclaration ( t, propNameNode, parent, parent .getString (  )   )  )  {^239^240^^^^224^254^if  ( !processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  != Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( propNameNode.getType (  )  == Token.null && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode .getString (  )   )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^223^229^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , 1 ) ;^227^^^^^223^229^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^for  ( Node propNameNode = parent .getString (  )  ; propNameNode != null;^223^^^^^208^238^for  ( Node propNameNode = n.getFirstChild (  ) ; propNameNode != null;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( propNameNode.getType (  )  <= Token.STRING && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( propNameNode.getType (  )  == Token.2 && !propNameNode.isQuotedString (  )  )  {^225^226^^^^210^240^if  ( propNameNode.getType (  )  == Token.STRING && !propNameNode.isQuotedString (  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( var != this && var.isGlobal (  )  && var.getInitialValue (  )  != this && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , 2 ) ;^241^^^^^235^246^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( propName, t.getModule (  ) , VAR ) ;^244^^^^^229^259^addSymbolUse ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  ( var != true ) {^235^236^237^^^220^250^if  ( var != null && var.isGlobal (  )  && var.getInitialValue (  )  != null && var.getInitialValue (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^String propName = propNameNode.getFirstChild (  ) .getNext (  ) .getVar (  ) ;^205^^^^^190^220^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^if  ( propName.equals ( "p" )  )  {^206^^^^^191^221^if  ( propName.equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^processPrototypeParent ( name, t.getModule (  ) , PROPERTY ) ;^211^^^^^196^226^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^! ( propNameNode .getString (  )   == Token.ASSIGN && parent.getFirstChild (  )^217^218^219^220^^202^232^! ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent.getFirstChild (  )  .getString (  )   == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent .getString (  )  .getType (  )  == Token.GETPROP && parent^218^219^220^^^203^233^parent.getFirstChild (  ) .getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P3_Replace_Literal]^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototypeprot" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^parent .getString (  )  .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^219^220^^^^204^234^parent.getFirstChild (  ) .getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P2_Replace_Operator]^if  ( isPrototypePropertyAssign ( n )  && isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( propNameNode )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, propNameNode )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t,  parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration (  n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^if  ( isPrototypePropertyAssign ( parent )  || isGlobalFunctionDeclaration ( t, n, n )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  ( isPrototypePropertyAssign ( n )  ) {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P6_Replace_Expression]^if  (  isGlobalFunctionDeclaration ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( isPrototypePropertyAssign ( n )  || shouldTraverse ( t, n, parent )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P8_Replace_Mix]^if  (  shouldTraverse ( t, n, propNameNode )  )  {^249^250^^^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P15_Unwrap_Block]^symbolStack.pop();^249^250^251^252^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P16_Remove_Block]^^249^250^251^252^^234^264^if  ( isPrototypePropertyAssign ( n )  || isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ; }^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^symbolStack.peek (  ) ;^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P12_Insert_Condition]^if  ( symbolStack.empty (  )  )  { symbolStack.pop (  ) ; }^251^^^^^249^252^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, propNameNode, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, n, propNameNode )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( parent, n, t )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent, n )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^shouldTraverse ( t, n, parent )  )  {^250^^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^250^251^^^^235^265^isGlobalFunctionDeclaration ( t, n, parent )  )  { symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^symbolStack.peek (  ) ;^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P14_Delete_Statement]^^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P12_Insert_Condition]^if  ( symbolStack.empty (  )  )  { symbolStack.pop (  ) ; }^251^^^^^236^266^symbolStack.pop (  ) ;^[CLASS] ProcessProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  name  propName  boolean  NodeTraversal  t  Var  var  Stack  symbolStack  Node  n  parent  propNameNode  
[P7_Replace_Invocation]^if  ( symbolStack.pop (  )  )  {^256^^^^^255^264^if  ( symbolStack.empty (  )  )  {^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P7_Replace_Invocation]^if  ( !symbolStack.pop (  ) .equals ( info )  )  {^260^^^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P15_Unwrap_Block]^symbolGraph.connect(symbolStack.peek(), module, info);^260^261^262^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  { symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P16_Remove_Block]^^260^261^262^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  { symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) ,  info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( module.peek (  ) , symbolStack, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( info.peek (  ) , module, symbolStack ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P7_Replace_Invocation]^symbolGraph.connect ( symbolStack.pop (  ) , module, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P14_Delete_Statement]^^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P13_Insert_Block]^if  ( ! ( symbolStack.peek (  ) .equals ( info )  )  )  {     symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ; }^261^^^^^255^264^[Delete]^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName (  type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^NameInfo info = getNameInfoForName ( type, name ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P14_Delete_Statement]^^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;NameInfo info = getNameInfoForName ( name, type ) ;^259^^^^^255^264^NameInfo info = getNameInfoForName ( name, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( symbolStack.peek (  ) , info, module ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name,  type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( module, name, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, type, module ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( type, module, name ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P7_Replace_Invocation]^addSymbolUse ( name, module, type ) ;^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P14_Delete_Statement]^^257^^^^^255^264^addGlobalUseOfSymbol ( name, module, type ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P8_Replace_Mix]^symbolGraph.connect ( symbolStack .push ( 3 )  , module, info ) ;^261^^^^^255^264^symbolGraph.connect ( symbolStack.peek (  ) , module, info ) ;^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P7_Replace_Invocation]^if  ( !symbolStack .push ( 2 )  .equals ( info )  )  {^260^^^^^255^264^if  ( !symbolStack.peek (  ) .equals ( info )  )  {^[CLASS] ProcessProperties  [METHOD] addSymbolUse [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  NameInfo  info  boolean  SymbolType  type  Stack  symbolStack  
[P2_Replace_Operator]^return t.inGlobalScope (  )  || ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  && n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P2_Replace_Operator]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  >= Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^return parent.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && t.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( parent )  || n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^return t.inGlobalScope (  )  && ( NodeUtil.isExprAssign ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^272^273^274^^^270^275^return t.inGlobalScope (  )  && ( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^( NodeUtil.isFunctionDeclaration ( parent )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^( NodeUtil.isExprAssign ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^273^274^^^^270^275^( NodeUtil.isFunctionDeclaration ( n )  || n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P7_Replace_Invocation]^n .getString (  )   == Token.FUNCTION && parent^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P14_Delete_Statement]^^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^n.getType (  )  == Token.FUNCTION && n.getType (  )  == Token.NAME ) ;^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P8_Replace_Mix]^n .getString (  )   == Token.FUNCTION && n^274^^^^^270^275^n.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.NAME ) ;^[CLASS] ProcessProperties  [METHOD] isGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Stack  symbolStack  Node  n  parent  
[P5_Replace_Variable]^Node n = child.getFirstChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^Node n = assign .getString (  )  ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^Node n = n.getFirstChild (  ) ;^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P14_Delete_Statement]^^278^^^^^277^296^Node n = assign.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( n != null || NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( n == null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  != Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( child != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n, n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs (  assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( n != null ) {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  (  NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( (n != null && isLhs(n, assign)) )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( n.getType (  )  == GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( getType() == GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( child.getType() == STRING && equals("prototype") )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil .isExprAssign ( child )   && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n .getString (  )   == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getVar (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^if  ( n != false && NodeUtil.isLhs ( n, n )  && n.getVar (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^285^^^^^277^296^if  ( isChainedProperty )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P13_Insert_Block]^if  (  (  ( child.getType (  )  )  ==  ( STRING )  )  &&  ( child.getString (  ) .equals ( "prototype" )  )  )  {     return true; }^285^^^^^277^296^[Delete]^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( child.getType (  )  == Token.STRING || child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( child.getType (  )  < Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prorototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( child.getType (  )  == Token.STRING ) {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  (  child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P6_Replace_Expression]^if  ( child.getType (  )  == STRING )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P15_Unwrap_Block]^return true;^288^289^290^291^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P16_Remove_Block]^^288^289^290^291^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  { return true; }^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^return false;^290^^^^^277^296^return true;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^Node child = assign.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getVar (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^Node child = n.getVar (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^Node child = child.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^Node child = n.getFirstChild (  ) .getFirstChild (  )  .getType (  )  ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^Node child = n .getString (  )^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P14_Delete_Statement]^^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^n.getFirstChild (  ) .getLastChild (  ) .getString (  ) , PROPERTY )  ) ;Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^Node child = child.getVar (  ) .getFirstChild (  ) .getNext (  ) ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^child.getString (  ) .equals ( "prototypepr" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P14_Delete_Statement]^^289^290^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  { return true;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^child .getLastChild (  )  .equals ( "prototype" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "p" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^if  ( child.getType (  )  == Token.STRING && child .getLastChild (  )  .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  >= Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^boolean isChainedProperty = child.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^boolean isChainedProperty = n.getFirstChild (  ) .getVar (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^n.getFirstChild (  ) .getVar (  )  == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^n.getFirstChild (  )  .getString (  )   == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P7_Replace_Invocation]^n .getString (  )  .getType (  )  == Token.GETPROP;^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P14_Delete_Statement]^^283^^^^^277^296^n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^child.getString (  ) .equals ( "protrototype" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^if  ( n .getString (  )   == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^Node child = child.getFirstChild (  ) .getFirstChild (  )  .getType (  )  ;^286^^^^^277^296^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^child.getString (  ) .equals ( "prototyperotot" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "tot" )  )  {^288^289^^^^277^296^if  ( child.getType (  )  == Token.STRING && child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P2_Replace_Operator]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  != Token.GETPROP;^282^283^^^^277^296^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( n != null && NodeUtil.isLhs ( n, child )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^if  ( assign != null && NodeUtil.isLhs ( n, n )  && n.getType (  )  == Token.GETPROP )  {^279^280^^^^277^296^if  ( n != null && NodeUtil.isLhs ( n, assign )  && n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P8_Replace_Mix]^n .getString (  )   == Token.GETPROP )  {^280^^^^^277^296^n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^child.getString (  ) .equals ( "oto" )  )  {^289^^^^^277^296^child.getString (  ) .equals ( "prototype" )  )  {^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P3_Replace_Literal]^return true;^295^^^^^277^296^return false;^[CLASS] ProcessProperties  [METHOD] isPrototypePropertyAssign [RETURN_TYPE] boolean   Node assign [VARIABLES] Stack  symbolStack  Node  assign  child  n  boolean  isChainedProperty  
[P5_Replace_Variable]^Node firstChild = parent.getFirstChild (  ) ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^Node firstChild = parent .getString (  )  ;^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^304^^^^^302^325^Node firstChild = nameNode.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P2_Replace_Operator]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  &&  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P2_Replace_Operator]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild == null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^if  ( isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, parent, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  parent != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^if  ( isGlobalFunctionDeclaration ( t, gramps, parent )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P6_Replace_Expression]^if  ( (firstChild != null && isGlobalFunctionDeclaration(t, firstChild, nameNode)) )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P6_Replace_Expression]^if  ( firstChild != null )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P6_Replace_Expression]^if  ( isExported(name) || anchorUnusedVars )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^if  ( shouldTraverse ( t, parent, gramps )  ||  firstChild != null &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != false &&^306^307^308^309^^302^325^if  ( isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null &&^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P2_Replace_Operator]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  && anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( anchorUnusedVars )  || name )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P6_Replace_Expression]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  ) {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P6_Replace_Expression]^if  (  anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .getVar ( name )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  )  .getFirstChild (  )   || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^if  ( compiler.getCodingConvention (  )  .getFirstChild (  )   ) {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P15_Unwrap_Block]^addGlobalUseOfSymbol(name, t.getModule(), VAR);^317^318^319^320^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P16_Remove_Block]^^317^318^319^320^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P13_Insert_Block]^if  ( ! ( processGlobalFunctionDeclaration ( t, n, parent, parent.getParent (  )  )  )  )  {     addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ; }^317^^^^^302^325^[Delete]^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( propName )  )  {     addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ; }else {     addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ; }^317^^^^^302^325^[Delete]^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol (  t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  )  ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( t, name.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, VAR.getModule (  ) , t ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^processPrototypeParent ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^addGlobalUseOfSymbol ( name, t .getScope (  )  , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addSymbolUse ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, module, type ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^parent.getParent (  )  )  )  { addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addSymbolUse ( propName, t.getModule (  ) , PROPERTY ) ;addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P3_Replace_Literal]^return false;^322^^^^^302^325^return true;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )   )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( parent, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, nameNode, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, parent, nameNode, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, t, gramps, parent.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, parent, t, gramps.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^new GlobalFunction ( nameNode, parent, gramps, t .getScope (  )   )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^new GlobalFunction ( nameNode, gramps, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^Node firstChild = nameNode.getFirstChild (  ) ;String name = nameNode.getString (  ) ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^String name = nameNode .getLastChild (  )  ;^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^311^^^^^302^325^String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add (  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )   )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName (  VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction (  parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode,  gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent,  t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P4_Replace_Constructor]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, paren gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, gramps, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, parent, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( gramps, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, name, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, t, gramps, parent.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, parent ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, VAR, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, nameNode, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( VAR, name ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^if  ( name.getCodingConvention (  ) .isExported ( compiler )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^if  ( this.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^317^318^^^^302^325^if  ( compiler.getCodingConvention (  ) .isExported ( name )  || anchorUnusedVars )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( name, t.getModule (  ) , this ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^addGlobalUseOfSymbol ( VAR, t.getModule (  ) , name ) ;^319^^^^^302^325^addGlobalUseOfSymbol ( name, t.getModule (  ) , VAR ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, parent, parent, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( parent, nameNode, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^new GlobalFunction ( nameNode, gramps, parent, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P8_Replace_Mix]^new GlobalFunction ( gramps, parent, gramps, t.getModule (  )  )  ) ;^313^^^^^302^325^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, nameNode, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent, nameNode )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( parent, t, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, gramps, parent )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^shouldTraverse ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^307^308^309^310^^302^325^isGlobalFunctionDeclaration ( t, parent, gramps )  ||  firstChild != null && isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, parent, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, firstChild, parent )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration (  firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t,  nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( firstChild, t, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^isGlobalFunctionDeclaration ( t, nameNode, firstChild )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^shouldTraverse ( t, firstChild, nameNode )  )  {^310^^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  {^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P14_Delete_Statement]^^310^311^^^^302^325^isGlobalFunctionDeclaration ( t, firstChild, nameNode )  )  { String name = nameNode.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( parent, parent, gramps, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, nameNode, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( gramps, parent, nameNode, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( t, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, name.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, gramps ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, VAR, t.getModule (  )  )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P7_Replace_Invocation]^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t .getScope (  )   )  ) ;^312^313^^^^302^325^getNameInfoForName ( name, VAR ) .getDeclarations (  ) .add ( new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P3_Replace_Literal]^return true;^324^^^^^302^325^return false;^[CLASS] ProcessProperties  [METHOD] processGlobalFunctionDeclaration [RETURN_TYPE] boolean   NodeTraversal t Node nameNode Node parent Node gramps [VARIABLES] String  name  boolean  NodeTraversal  t  Stack  symbolStack  Node  firstChild  gramps  nameNode  parent  
[P2_Replace_Operator]^if  ( dest.getType (  )  == Token.STRING || NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( dest.getType (  )  < Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs (  parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( n )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( parent, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, map )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( dest, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( grandParent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( dest )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( n )  && NodeUtil.isLhs ( grandParent, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( parent, n )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  ( dest.getType (  )  == Token.STRING ) {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  (  NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  ( (dest.getType() == STRING && isExprAssign(grandParent)) )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  ( dest.getType (  )  == STRING )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( dest .getString (  )   == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isFunctionDeclaration ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil .isExprAssign ( n )   )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = Property prop =  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )  , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t .getScope (  )   ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( parent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P1_Replace_Type]^char name = dest.getchar (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^String name = n.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^String name = parent.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( n, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^340^347^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^343^^^^^340^347^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^grandParent.getParent (  ) , t .getScope (  )   ) ;^345^^^^^340^347^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^346^^^^^340^347^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( map.getType (  )  != Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  ( key != null )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P6_Replace_Expression]^if  ( key.getType() == STRING )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( map .getString (  )   == Token.OBJECTLIT )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^if  ( map.getType (  )  == Token.0 )  {^353^^^^^338^368^if  ( map.getType (  )  == Token.OBJECTLIT )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     String name = key.getString (  ) ;     Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^353^^^^^338^368^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^353^^^^^338^368^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( key.getType (  )  != Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P15_Unwrap_Block]^java.lang.String name = key.getString(); com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getNext(), map, n, t.getModule()); getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);^358^359^360^361^362^343^373^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P16_Remove_Block]^^358^359^360^361^362^343^373^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  ( map.getType (  )  )  ==  ( OBJECTLIT )  )  {     for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         if  (  ( key.getType (  )  )  ==  ( STRING )  )  {             String name = key.getString (  ) ;             Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;             getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;         }     } }^358^^^^^343^373^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^358^^^^^343^373^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = Property prop =  new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  )  , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = parentew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( parent, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P1_Replace_Type]^char name = key.getchar (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^String name = key .getLastChild (  )  ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = key.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , parent, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( parent, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^String name = n.getString (  ) ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^key, parent.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key, n .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^361^362^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, 4 ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^for  ( Node key = parent.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^for  ( Node n = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^for  ( Node map = key.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^for  ( Node parent = map .getString (  )  ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( key.getType (  )  > Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( key.getType (  )  == Token.null )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P15_Unwrap_Block]^java.lang.String name = key.getString(); com.google.javascript.jscomp.AnalyzePrototypeProperties.Property prop = new com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty(key, key.getNext(), map, n, t.getModule()); getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);^358^359^360^361^362^356^364^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P16_Remove_Block]^^358^359^360^361^362^356^364^if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ; Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  ( map.getType (  )  )  ==  ( OBJECTLIT )  )  {     for  ( Node key = map.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {         if  (  ( key.getType (  )  )  ==  ( STRING )  )  {             String name = key.getString (  ) ;             Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;             getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;         }     } }^358^^^^^356^364^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P13_Insert_Block]^if  (  (  (  ( dest.getType (  )  )  ==  ( STRING )  )  &&  ( isExprAssign ( grandParent )  )  )  &&  ( isLhs ( n, parent )  )  )  {     String name = dest.getString (  ) ;     Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;     getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ; }^358^^^^^356^364^[Delete]^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = Property prop =  new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty (  key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) ,  n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map,  t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( parent, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , parent, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = parentew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = keyew LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = tew LiteralProperty ( key, key.getNext (  ) , map, n, n.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key .getType (  )  , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P1_Replace_Type]^char name = key.getchar (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = key.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( t, key.getNext (  ) , map, n, key.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( map, key.getNext (  ) , key, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = mapew LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^String name = key .getLastChild (  )  ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^key, n.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^361^362^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ; getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^grandParent.getParent (  ) , t.getModule (  )  ) ;key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^getNameInfoForName ( name, 3 ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^String name = n.getString (  ) ;^359^^^^^356^364^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( key, key .getType (  )  , parent, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^key, parent.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, 2 ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^key != null; n = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^key != null; key = key.getVar (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^key != null; key = key .getType (  )^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key !=  null; n^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^for  ( Node key = map .getString (  )  ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node firstChild = nameNode.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;for  ( Node key = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , n, n, t.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^key != null; parent = key.getNext (  ) .getNext (  )  )  {^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^357^358^359^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^key, key .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key, n.getNext (  ) , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^key, key.getNext (  ) , map, n, t .getScope (  )   ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( prop, PROPERTY ) .getDeclarations (  ) .add ( name ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^358^^^^^343^373^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( key, key.getNext (  ) , t, n, map.getModule (  )  ) ;^360^361^^^^345^375^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key, parent .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^346^376^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^getNameInfoForName ( name, null ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^for  ( Node parent = map.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P2_Replace_Operator]^if  ( key.getType (  )  >= Token.STRING )  {^358^^^^^356^364^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new LiteralProperty ( n, key.getNext (  ) , map, n, t.getModule (  )  ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^key, key .getType (  )  , map, n, t.getModule (  )  ) ;^361^^^^^356^364^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, 1 ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^356^364^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new LiteralProperty ( key, key.getNext (  ) , parent, n, t .getScope (  )   ) ;^360^361^^^^356^364^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key !=  null; parent^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = Property prop =  new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  )  , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty (  grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P4_Replace_Constructor]^Property prop = new AssignmentProperty ( grandParen grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Property prop = new AssignmentProperty ( t, grandParent.getParent (  ) , grandParent.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent .getString (  )  , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t .getScope (  )   ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Property prop = new AssignmentProperty ( parent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Node dest = n.getFirstChild (  ) .getVar (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Node dest = n .getString (  )  .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Node dest = parent.getFirstChild (  ) .getVar (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node map = n.getFirstChild (  ) .getNext (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^boolean isChainedProperty = n.getFirstChild (  ) .getType (  )  == Token.GETPROP;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node dest = n.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Node parent = map.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;Node parent = n.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node parent = n.getParent (  ) ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Node grandParent = n.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node parent = n.getParent (  ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = dest.getString (  ) ;Node grandParent = parent.getParent (  ) ;^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P1_Replace_Type]^char name = dest.getchar (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^String name = parent.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^String name = dest .getLastChild (  )  ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node grandParent = parent.getParent (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = key.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String name = dest.getString (  ) ;^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Property prop = new LiteralProperty ( key, key.getNext (  ) , map, n, t.getModule (  )  ) ;Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^344^345^^^^329^359^Property prop = new AssignmentProperty ( grandParent, grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Node map = parent.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Node map = n.getFirstChild (  ) .getVar (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Var var = t.getScope (  ) .getVar ( name ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node dest = n.getFirstChild (  ) .getNext (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) .getFirstChild (  ) .getNext (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^Node n = assign.getFirstChild (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^String propName = n.getFirstChild (  ) .getNext (  ) .getString (  ) ;Node map = n.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^switch  ( parent .getString (  )   )  {^333^^^^^318^348^switch  ( n.getType (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Node dest = map.getFirstChild (  ) .getNext (  ) ;^336^^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^336^337^^^^321^351^Node dest = n.getFirstChild (  ) .getNext (  ) ; Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Node parent = n .getString (  )  ;^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^337^^^^^322^352^Node parent = n.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^338^^^^^323^353^Node grandParent = parent.getParent (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^340^341^342^^^325^355^if  ( dest.getType (  )  == Token.STRING && NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^NodeUtil.isExprAssign ( parent )  && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^NodeUtil.isFunctionDeclaration ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^NodeUtil .isFunctionDeclaration ( dest )   && NodeUtil.isLhs ( n, parent )  )  {^341^342^^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^341^342^343^^^326^356^NodeUtil.isExprAssign ( grandParent )  && NodeUtil.isLhs ( n, parent )  )  { String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^NodeUtil.isLhs (  parent )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^NodeUtil.isLhs ( n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^NodeUtil.isLhs ( parent, n )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^NodeUtil .isExprAssign ( parent )   )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^NodeUtil.isLhs ( n, map )  )  {^342^^^^^327^357^NodeUtil.isLhs ( n, parent )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^342^343^^^^327^357^NodeUtil.isLhs ( n, parent )  )  { String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^343^^^^^328^358^String name = dest.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^grandParent .getString (  )  , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^addSymbolUse ( propNameNode.getString (  ) , t.getModule (  ) , PROPERTY ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^new GlobalFunction ( nameNode, parent, gramps, t.getModule (  )  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P11_Insert_Donor_Statement]^key, key.getNext (  ) , map, n, t.getModule (  )  ) ;grandParent.getParent (  ) , t.getModule (  )  ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^grandParent.getParent (  ) , t .getScope (  )   ) ;^345^^^^^330^360^grandParent.getParent (  ) , t.getModule (  )  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName (  PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY, name ) .getDeclarations (  ) .add ( prop ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, prop ) .getDeclarations (  ) .add ( PROPERTY ) ;^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^346^^^^^331^361^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^Node map = map.getFirstChild (  ) .getNext (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P7_Replace_Invocation]^Node map = n.getFirstChild (  )  .getType (  )  ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^Node map = parent.getFirstChild (  ) .getVar (  ) ;^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P14_Delete_Statement]^^352^^^^^337^367^Node map = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^for  ( Node key = n.getFirstChild (  ) ;^356^^^^^341^371^for  ( Node key = map.getFirstChild (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^key != null; n = key .getType (  )^357^^^^^342^372^key != null; key = key.getNext (  ) .getNext (  )  )  {^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P8_Replace_Mix]^String name = n .getLastChild (  )  ;^359^^^^^344^374^String name = key.getString (  ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( name, 3 ) .getDeclarations (  ) .add ( prop ) ;^362^^^^^347^377^getNameInfoForName ( name, PROPERTY ) .getDeclarations (  ) .add ( prop ) ;^[CLASS] ProcessProperties  [METHOD] processPrototypeParent [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] String  name  boolean  NodeTraversal  t  Property  prop  Stack  symbolStack  Node  dest  grandParent  key  map  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode,  getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName (  type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect (  module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, name, getNameInfoForName ( module, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, type, getNameInfoForName ( name, module )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( name, module, getNameInfoForName ( globalNode, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P14_Delete_Statement]^^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^n symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^symbolStack.push ( getNameInfoForName ( name, VAR )  ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P11_Insert_Donor_Statement]^NameInfo info = getNameInfoForName ( name, type ) ;symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P5_Replace_Variable]^symbolGraph.connect ( globalNode, module, getNameInfoForName ( type, name )  ) ;^372^^^^^370^373^symbolGraph.connect ( globalNode, module, getNameInfoForName ( name, type )  ) ;^[CLASS] ProcessProperties  [METHOD] addGlobalUseOfSymbol [RETURN_TYPE] void   String name JSModule module SymbolType type [VARIABLES] JSModule  module  String  name  boolean  SymbolType  type  Stack  symbolStack  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( n .getLastChild (  )   == Token.GETPROP )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^if  ( n .getLastChild (  )   == Token.4 )  {^378^^^^^377^382^if  ( n.getType (  )  == Token.GETPROP )  {^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^symbolGraph.connect(externNode, firstModule, getNameInfoForName(n.getLastChild().getString(), PROPERTY));^378^379^380^381^^377^382^if  ( n.getType (  )  == Token.GETPROP )  { symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^378^379^380^381^^377^382^if  ( n.getType (  )  == Token.GETPROP )  { symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( parent.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect (  firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( externNode,  getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( n, firstModule, getNameInfoForName ( externNode.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( firstModule, externNode, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^symbolGraph.connect ( PROPERTY, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , externNode )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( GETPROP )  )  {     symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ; }^379^^^^^377^382^[Delete]^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( parent.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , null )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( n.getLastChild (  ) .getString (  )  )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^getNameInfoForName ( PROPERTY.getLastChild (  ) .getString (  ) , n )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^getNameInfoForName ( n .getType (  )  .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n .getType (  )  .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( parent .getType (  )  .getString (  ) , PROPERTY )  ) ;^379^380^^^^377^382^symbolGraph.connect ( externNode, firstModule, getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^getNameInfoForName ( parent .getType (  )  .getString (  ) , PROPERTY )  ) ;^380^^^^^377^382^getNameInfoForName ( n.getLastChild (  ) .getString (  ) , PROPERTY )  ) ;^[CLASS] ProcessExternProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( dest.isReferenced (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P6_Replace_Expression]^if  ( startModule != null )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P7_Replace_Invocation]^if  ( start.markReference (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P13_Insert_Block]^if  (  ( startModule != null )  &&  ( moduleGraph.dependsOn ( startModule, edge )  )  )  {     return dest.markReference ( startModule ) ; }else {     return dest.markReference ( edge ) ; }^388^^^^^387^398^[Delete]^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P2_Replace_Operator]^if  ( startModule != null || moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P2_Replace_Operator]^if  ( startModule == null && moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn (  edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( startModule != null && moduleGraph.dependsOn ( startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( edge != null && moduleGraph.dependsOn ( startModule, startModule )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( moduleGraph != null && startModule.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P6_Replace_Expression]^if  ( startModule != null ) {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P6_Replace_Expression]^if  (  moduleGraph.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P15_Unwrap_Block]^return dest.markReference(startModule);^390^391^392^393^394^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ; } else { return dest.markReference ( edge ) ; }^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P16_Remove_Block]^^390^391^392^393^394^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ; } else { return dest.markReference ( edge ) ; }^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P13_Insert_Block]^if  ( start.isReferenced (  )  )  {     JSModule startModule = start.getDeepestCommonModuleRef (  ) ;     if  (  ( startModule != null )  &&  ( moduleGraph.dependsOn ( startModule, edge )  )  )  {         return dest.markReference ( startModule ) ;     }else {         return dest.markReference ( edge ) ;     } }^390^^^^^387^398^[Delete]^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^return edge.markReference ( dest ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^return dest.markReference ( startModule ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^return start.markReference ( edge ) ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P14_Delete_Statement]^^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^return start.markReference ( startModule ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^return dest.markReference ( edge ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^return startModule.markReference ( dest ) ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^return dest .isReferenced (  )  ;^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P14_Delete_Statement]^^392^^^^^387^398^return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^return dest .isReferenced (  )  ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^JSModule destModule = start.getDeepestCommonModuleRef (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P7_Replace_Invocation]^JSModule startModule = start.markReference (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^JSModule destModule = start.markReference (  ) ;^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P14_Delete_Statement]^^389^^^^^387^398^JSModule startModule = start.getDeepestCommonModuleRef (  ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^moduleGraph.dependsOn ( startModule, startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^moduleGraph.dependsOn (  edge )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^moduleGraph.dependsOn ( startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^moduleGraph.dependsOn ( edge, startModule )  )  {^391^^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P14_Delete_Statement]^^391^392^^^^387^398^moduleGraph.dependsOn ( startModule, edge )  )  { return dest.markReference ( startModule ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P5_Replace_Variable]^if  ( startModule != null && 3.dependsOn ( startModule, edge )  )  {^390^391^^^^387^398^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^return start .isReferenced (  )  ;^394^^^^^387^398^return dest.markReference ( edge ) ;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^if  ( dest.markReference (  )  )  {^388^^^^^387^398^if  ( start.isReferenced (  )  )  {^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P3_Replace_Literal]^return true;^397^^^^^387^398^return false;^[CLASS] PropagateReferences  [METHOD] traverseEdge [RETURN_TYPE] boolean   NameInfo start JSModule edge NameInfo dest [VARIABLES] NameInfo  dest  start  boolean  JSModule  edge  startModule  
[P8_Replace_Mix]^private  JSModule module;^430^^^^^425^435^private final JSModule module;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] AnalyzePrototypeProperties$SymbolType()   [VARIABLES] SymbolType  PROPERTY  VAR  boolean  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  == Token.VAR && NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.removeChild ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil .removeChild ( gramps )   ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( nameNode.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^433^434^435^^^432^438^Preconditions.checkState ( parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^parent.removeChild (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^parent .getParent (  )   == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P11_Insert_Donor_Statement]^NodeUtil.isFunctionDeclaration ( parent )  ) ;parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^434^435^^^^432^438^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^NodeUtil.isFunctionDeclaration ( nameNode )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( parent )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^NodeUtil.removeChild ( nameNode )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^435^436^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ; this.nameNode = nameNode;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P11_Insert_Donor_Statement]^parent.getType (  )  == Token.VAR || NodeUtil.isFunctionDeclaration ( parent )  ) ;NodeUtil.isFunctionDeclaration ( parent )  ) ;^435^^^^^432^438^NodeUtil.isFunctionDeclaration ( parent )  ) ;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^this.nameNode = parent;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P11_Insert_Donor_Statement]^this.module = module;this.nameNode = nameNode;^436^^^^^432^438^this.nameNode = nameNode;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^this.module =  null;^437^^^^^432^438^this.module = module;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P11_Insert_Donor_Statement]^this.nameNode = nameNode;this.module = module;^437^^^^^432^438^this.module = module;^[CLASS] GlobalFunction  [METHOD] <init> [RETURN_TYPE] JSModule)   Node nameNode Node parent Node gramps JSModule module [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^Node parent = gramps.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^Node parent = nameNode.getType (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^442^^^^^441^449^Node parent = nameNode.getParent (  ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.FUNCTION && parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  <= 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P3_Replace_Literal]^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 7 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.FUNCTION ) {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P6_Replace_Expression]^if  (  parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FUNCTION )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P6_Replace_Expression]^if  ( parent.getType (  )  == VAR )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^if  ( parent .getParent (  )   == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.FUNCTION || parent.removeChild (  )  == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);^443^444^445^446^447^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  { NodeUtil.removeChild ( parent.getParent (  ) , parent ) ; } else { Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ; }^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P16_Remove_Block]^^443^444^445^446^447^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  { NodeUtil.removeChild ( parent.getParent (  ) , parent ) ; } else { Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ; }^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  > Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( nameNode.getType (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( parent.removeChild (  )  == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( parent.getType (  )  == Token.this ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^446^447^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ; parent.removeChild ( nameNode ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( parent .getParent (  )   == Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^parent .isFunctionDeclaration ( gramps )  ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^parent.removeChild ( gramps ) ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^NodeUtil.removeChild ( nameNode.getParent (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( parent.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^NodeUtil.removeChild ( nameNode .getType (  )  , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P14_Delete_Statement]^^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.FUNCTION || parent .getParent (  )   == 1 )  {^443^^^^^441^449^if  ( parent.getType (  )  == Token.FUNCTION || parent.getChildCount (  )  == 1 )  {^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( parent .getType (  )  , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^NodeUtil.removeChild ( nameNode.removeChild (  ) , parent ) ;^444^^^^^441^449^NodeUtil.removeChild ( parent.getParent (  ) , parent ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.VAR ) ;^446^^^^^441^449^Preconditions.checkState ( parent.getType (  )  == Token.VAR ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P7_Replace_Invocation]^parent .isFunctionDeclaration ( nameNode )  ;^447^^^^^441^449^parent.removeChild ( nameNode ) ;^[CLASS] GlobalFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P8_Replace_Mix]^private  JSModule module;^481^^^^^476^486^private final JSModule module;^[CLASS] AssignmentProperty  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  gramps  nameNode  parent  boolean  
[P5_Replace_Variable]^this.node = parent;^488^^^^^487^490^this.node = node;^[CLASS] AssignmentProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^this.module = module;this.node = node;^488^^^^^487^490^this.node = node;^[CLASS] AssignmentProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^this.module =  null;^489^^^^^487^490^this.module = module;^[CLASS] AssignmentProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P11_Insert_Donor_Statement]^this.node = node;this.module = module;^489^^^^^487^490^this.module = module;^[CLASS] AssignmentProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node node Node parent JSModule module [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( node.getLastChild (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AssignmentProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^NodeUtil.removeChild ( parent.getParent (  ) , node ) ;^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AssignmentProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P14_Delete_Statement]^^494^^^^^493^495^NodeUtil.removeChild ( node.getParent (  ) , node ) ;^[CLASS] AssignmentProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P7_Replace_Invocation]^return getValueParent (  ) .getLastChild (  ) .getFirstChild (  ) ;^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P7_Replace_Invocation]^return getValueParent (  )  .getLastChild (  )^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P14_Delete_Statement]^^499^^^^^498^500^return getValueParent (  ) .getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P7_Replace_Invocation]^return getValueParent (  ) .getFirstChild (  ) ;^504^^^^^503^505^return getValueParent (  ) .getLastChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P14_Delete_Statement]^^504^^^^^503^505^return getValueParent (  ) .getLastChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P5_Replace_Variable]^return parent.getFirstChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P7_Replace_Invocation]^return node.getLastChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^return parent.getLastChild (  ) ;^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P14_Delete_Statement]^^509^^^^^508^510^return node.getFirstChild (  ) ;^[CLASS] AssignmentProperty  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^private  Node assign;^528^^^^^523^533^private final Node assign;^[CLASS] LiteralProperty  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^private  JSModule module;^529^^^^^524^534^private final JSModule module;^[CLASS] LiteralProperty  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  node  parent  boolean  
[P8_Replace_Mix]^this.key =  null;^533^^^^^531^538^this.key = key;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.map = map;this.key = key;^533^^^^^531^538^this.key = key;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^this.value = map;^534^^^^^531^538^this.value = value;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.module = module;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.map = map;this.value = value;^534^^^^^531^538^this.value = value;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^this.map = value;^535^^^^^531^538^this.map = map;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.value = value;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.module = module;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.key = key;this.map = map;^535^^^^^531^538^this.map = map;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^this.assign = value;^536^^^^^531^538^this.assign = assign;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P8_Replace_Mix]^this.module =  null;^537^^^^^531^538^this.module = module;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.value = value;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^this.map = map;this.module = module;^537^^^^^531^538^this.module = module;^[CLASS] LiteralProperty  [METHOD] <init> [RETURN_TYPE] JSModule)   Node key Node value Node map Node assign JSModule module [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^map.removeChild ( value ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P7_Replace_Invocation]^map.getFirstChild ( key ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P7_Replace_Invocation]^map .getFirstChild (  )  ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P14_Delete_Statement]^^542^543^^^^541^544^map.removeChild ( key ) ; map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^map.removeChild ( value ) ;map.removeChild ( key ) ;^542^^^^^541^544^map.removeChild ( key ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^map.removeChild ( key ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P7_Replace_Invocation]^map.getFirstChild ( value ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P7_Replace_Invocation]^map .getFirstChild (  )  ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P14_Delete_Statement]^^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P11_Insert_Donor_Statement]^map.removeChild ( key ) ;map.removeChild ( value ) ;^543^^^^^541^544^map.removeChild ( value ) ;^[CLASS] LiteralProperty  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^return value.getFirstChild (  ) ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] LiteralProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P8_Replace_Mix]^return assign .removeChild ( assign )  ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] LiteralProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P7_Replace_Invocation]^return assign .removeChild ( value )  ;^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] LiteralProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P14_Delete_Statement]^^548^^^^^547^549^return assign.getFirstChild (  ) ;^[CLASS] LiteralProperty  [METHOD] getPrototype [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^return map;^553^^^^^552^554^return value;^[CLASS] LiteralProperty  [METHOD] getValue [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P5_Replace_Variable]^return value;^558^^^^^557^559^return map;^[CLASS] LiteralProperty  [METHOD] getValueParent [RETURN_TYPE] Node   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P1_Replace_Type]^final char name;^572^^^^^567^577^final String name;^[CLASS] NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P3_Replace_Literal]^private boolean referenced = true;^574^^^^^569^579^private boolean referenced = false;^[CLASS] NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P8_Replace_Mix]^private JSModule deepestCommonModuleRef = this;^576^^^^^571^581^private JSModule deepestCommonModuleRef = null;^[CLASS] NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { private JSModule deepestCommonModuleRef = null; }^576^^^^^571^581^private JSModule deepestCommonModuleRef = null;^[CLASS] NameInfo  [METHOD] getModule [RETURN_TYPE] JSModule   [VARIABLES] JSModule  module  Node  assign  key  map  value  boolean  
[P8_Replace_Mix]^this.name =  null;^584^^^^^583^585^this.name = name;^[CLASS] NameInfo  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] JSModule  deepestCommonModuleRef  boolean  referenced  String  name  Deque  declarations  
[P3_Replace_Literal]^boolean hasChanged = true;^601^^^^^600^624^boolean hasChanged = false;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^if  ( !hasChanged )  {^602^^^^^600^624^if  ( !referenced )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P15_Unwrap_Block]^referenced = true; hasChanged = true;^602^603^604^605^^600^624^if  ( !referenced )  { referenced = true; hasChanged = true; }^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P16_Remove_Block]^^602^603^604^605^^600^624^if  ( !referenced )  { referenced = true; hasChanged = true; }^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P3_Replace_Literal]^referenced = false;^603^^^^^600^624^referenced = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P11_Insert_Donor_Statement]^hasChanged = true;referenced = true;^603^^^^^600^624^referenced = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P3_Replace_Literal]^hasChanged = false;^604^^^^^600^624^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P11_Insert_Donor_Statement]^referenced = true;hasChanged = true;^604^^^^^600^624^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P2_Replace_Operator]^if  ( moduleGraph == null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P6_Replace_Expression]^if  ( deepestCommonModuleRef == null )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P6_Replace_Expression]^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P8_Replace_Mix]^if  ( moduleGraph != false )  {^607^^^^^600^624^if  ( moduleGraph != null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P2_Replace_Operator]^if  ( deepestCommonModuleRef != null )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^if  ( originalDeepestCommon == null )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P8_Replace_Mix]^if  ( deepestCommonModuleRef == true )  {^610^^^^^600^624^if  ( deepestCommonModuleRef == null )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( originalDeepestCommon, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = deepestCommonModuleRefGraph.getDeepestCommonDependencyInclusive ( module, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = module.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, moduleGraph ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P8_Replace_Mix]^deepestCommonModuleRef =  originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( originalDeepestCommon, module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive (  module ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^moduleGraph.getDeepestCommonDependencyInclusive ( module, deepestCommonModuleRef ) ;^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P14_Delete_Statement]^^614^615^^^^600^624^moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = originalDeepestCommon;^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { deepestCommonModuleRef = module; }^611^^^^^600^624^deepestCommonModuleRef = module;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P2_Replace_Operator]^if  ( originalDeepestCommon == deepestCommonModuleRef )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^if  ( module != deepestCommonModuleRef )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^if  ( originalDeepestCommon != module )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^if  ( deepestCommonModuleRef != originalDeepestCommon )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P15_Unwrap_Block]^hasChanged = true;^618^619^620^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P16_Remove_Block]^^618^619^620^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P3_Replace_Literal]^hasChanged = false;^619^^^^^600^624^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P11_Insert_Donor_Statement]^referenced = true;hasChanged = true;^619^^^^^600^624^hasChanged = true;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = deepestCommonModuleRef.getDeepestCommonDependencyInclusive ( moduleGraph, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^JSModule originalDeepestCommon = module;^608^^^^^600^624^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P12_Insert_Condition]^if  ( originalDeepestCommon != deepestCommonModuleRef )  { JSModule originalDeepestCommon = deepestCommonModuleRef; }^608^^^^^600^624^JSModule originalDeepestCommon = deepestCommonModuleRef;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^deepestCommonModuleRef = 0.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P2_Replace_Operator]^if  ( originalDeepestCommon >= deepestCommonModuleRef )  {^618^^^^^600^624^if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P8_Replace_Mix]^deepestCommonModuleRef =  nullGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, null ) ;^613^614^615^^^600^624^deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^return referenced;^623^^^^^600^624^return hasChanged;^[CLASS] NameInfo  [METHOD] markReference [RETURN_TYPE] boolean   JSModule module [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P5_Replace_Variable]^return originalDeepestCommon;^631^^^^^630^632^return deepestCommonModuleRef;^[CLASS] NameInfo  [METHOD] getDeepestCommonModuleRef [RETURN_TYPE] JSModule   [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
[P12_Insert_Condition]^if  ( deepestCommonModuleRef == null )  { return deepestCommonModuleRef; }^631^^^^^630^632^return deepestCommonModuleRef;^[CLASS] NameInfo  [METHOD] getDeepestCommonModuleRef [RETURN_TYPE] JSModule   [VARIABLES] JSModule  deepestCommonModuleRef  module  originalDeepestCommon  boolean  hasChanged  referenced  String  name  Deque  declarations  
