[P8_Replace_Mix]^private  CallbackWrapper[] callbacks;^49^^^^^44^54^private final CallbackWrapper[] callbacks;^[CLASS] CombinedCompilerPass CallbackWrapper   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^50^^^^^45^55^private final AbstractCompiler compiler;^[CLASS] CombinedCompilerPass CallbackWrapper   [VARIABLES] 
[P8_Replace_Mix]^private Node waiting = this;^90^^^^^85^95^private Node waiting = null;^[CLASS] CombinedCompilerPass CallbackWrapper   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^58^^^^^56^63^this.compiler = compiler;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P8_Replace_Mix]^this.callbacks =  new CallbackWrapper[null.length];^59^^^^^56^63^this.callbacks = new CallbackWrapper[callbacks.length];^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P11_Insert_Donor_Statement]^this.callbacks[i] = new CallbackWrapper ( callbacks[i] ) ;this.callbacks = new CallbackWrapper[callbacks.length];^59^^^^^56^63^this.callbacks = new CallbackWrapper[callbacks.length];^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P3_Replace_Literal]^for  ( int i = -9; i < callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P8_Replace_Mix]^this.callbacks[i]  =  this.callbacks[i] ;^61^^^^^56^63^this.callbacks[i] = new CallbackWrapper ( callbacks[i] ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P11_Insert_Donor_Statement]^this.callbacks = new CallbackWrapper[callbacks.length];this.callbacks[i] = new CallbackWrapper ( callbacks[i] ) ;^61^^^^^56^63^this.callbacks[i] = new CallbackWrapper ( callbacks[i] ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P3_Replace_Literal]^for  ( int i = -5; i < callbacks.length; i++ )  {^60^^^^^56^63^for  ( int i = 0; i < callbacks.length; i++ )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback[])   AbstractCompiler compiler  callbacks [VARIABLES] Callback[]  callbacks  ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  int  i  
[P8_Replace_Mix]^this.callback =  null;^93^^^^^92^99^this.callback = callback;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P11_Insert_Donor_Statement]^scopedCallback = null;this.callback = callback;^93^^^^^92^99^this.callback = callback;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P2_Replace_Operator]^if  ( callback  ||  ScopedCallback )  {^94^^^^^92^99^if  ( callback instanceof ScopedCallback )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P15_Unwrap_Block]^scopedCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (callback));^94^95^96^97^98^92^99^if  ( callback instanceof ScopedCallback )  { scopedCallback =  ( ScopedCallback )  callback; } else { scopedCallback = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P16_Remove_Block]^^94^95^96^97^98^92^99^if  ( callback instanceof ScopedCallback )  { scopedCallback =  ( ScopedCallback )  callback; } else { scopedCallback = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P8_Replace_Mix]^scopedCallback = true;^97^^^^^92^99^scopedCallback = null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P11_Insert_Donor_Statement]^this.callback = callback;scopedCallback = null;^97^^^^^92^99^scopedCallback = null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P8_Replace_Mix]^scopedCallback =   ( ScopedCallback )  callback;^95^^^^^92^99^scopedCallback =  ( ScopedCallback )  callback;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  waiting  
[P15_Unwrap_Block]^callback.visit(t, n, parent);^106^107^108^109^110^105^111^if  ( isActive (  )  )  { callback.visit ( t, n, parent ) ; } else if  ( waiting == n )  { waiting = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^106^107^108^109^110^105^111^if  ( isActive (  )  )  { callback.visit ( t, n, parent ) ; } else if  ( waiting == n )  { waiting = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^} else if  ( waiting != n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( n == waiting )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^} else {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^waiting = null;^108^109^110^^^105^111^} else if  ( waiting == n )  { waiting = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^108^109^110^^^105^111^} else if  ( waiting == n )  { waiting = null; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting = true;^109^^^^^105^111^waiting = null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^waiting = n;waiting = null;^109^^^^^105^111^waiting = null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, waiting, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, n, waiting ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit (  n, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t,  parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( parent, n, t ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( n, t, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^callback.shouldTraverse ( t, n, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^callback.shouldTraverse ( t, waiting, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( parent == n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^}  if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting = false;^109^^^^^105^111^waiting = null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, parent, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, waiting, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse (  n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t,  parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( parent, n, t )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, parent, n )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^waiting = n;^114^115^116^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  { waiting = n; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^114^115^116^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  { waiting = n; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^waiting = waiting;^115^^^^^113^117^waiting = n;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting =  parent;^115^^^^^113^117^waiting = n;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^waiting = null;waiting = n;^115^^^^^113^117^waiting = n;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, waiting )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^if  (  scopedCallback != true )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^scopedCallback.enterScope(t);^120^121^122^^^119^123^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.enterScope ( t ) ; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^120^121^122^^^119^123^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.enterScope ( t ) ; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P13_Insert_Block]^if  (  ( isActive (  )  )  &&  (  ( scopedCallback )  != null )  )  {     scopedCallback.exitScope ( t ) ; }^120^^^^^119^123^[Delete]^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^scopedCallback.exitScope ( t ) ;^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^scopedCallback.exitScope ( t ) ;scopedCallback.enterScope ( t ) ;^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^callback.enterScopeIfActive ( t ) ;scopedCallback.enterScope ( t ) ;^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^if  ( isActive (  )  && scopedCallback != false )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^scopedCallback.exitScope(t);^126^127^128^^^125^129^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.exitScope ( t ) ; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^126^127^128^^^125^129^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.exitScope ( t ) ; }^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P13_Insert_Block]^if  (  ( isActive (  )  )  &&  (  ( scopedCallback )  != null )  )  {     scopedCallback.enterScope ( t ) ; }^126^^^^^125^129^[Delete]^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^scopedCallback.enterScope ( t ) ;^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^scopedCallback.enterScope ( t ) ;scopedCallback.exitScope ( t ) ;^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^callback.exitScopeIfActive ( t ) ;scopedCallback.exitScope ( t ) ;^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^return waiting != null;^132^^^^^131^133^return waiting == null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  n  parent  waiting  
[P5_Replace_Variable]^return parent == null;^132^^^^^131^133^return waiting == null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  n  parent  waiting  
[P8_Replace_Mix]^return waiting != null;;^132^^^^^131^133^return waiting == null;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  n  parent  waiting  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, waiting, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, parent, this ) ;^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P14_Delete_Statement]^^138^^^^^137^139^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  Node  externs  n  parent  root  waiting  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( t, waiting, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( t, n, waiting ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive (  n, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( t,  parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( t, n ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( parent, n, t ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.shouldTraverseIfActive ( t, parent, n ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P7_Replace_Invocation]^callback .enterScopeIfActive ( t )  ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P14_Delete_Statement]^^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.visit ( t, n, parent ) ;callback.shouldTraverseIfActive ( t, n, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.enterScopeIfActive ( t ) ;callback.shouldTraverseIfActive ( t, n, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.exitScopeIfActive ( t ) ;callback.shouldTraverseIfActive ( t, n, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.visitOrMaybeActivate ( t, n, parent ) ;callback.shouldTraverseIfActive ( t, n, parent ) ;^144^^^^^142^152^callback.shouldTraverseIfActive ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P3_Replace_Literal]^return false;^151^^^^^142^152^return true;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( t, waiting, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( t, n, waiting ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate (  n, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( t,  parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( t, n ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( parent, n, t ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P5_Replace_Variable]^callback.visitOrMaybeActivate ( t, parent, n ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P14_Delete_Statement]^^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.shouldTraverseIfActive ( t, n, parent ) ;callback.visitOrMaybeActivate ( t, n, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.visit ( t, n, parent ) ;callback.visitOrMaybeActivate ( t, n, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.exitScopeIfActive ( t ) ;callback.visitOrMaybeActivate ( t, n, parent ) ;^157^^^^^155^159^callback.visitOrMaybeActivate ( t, n, parent ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P7_Replace_Invocation]^callback .exitScopeIfActive ( t )  ;^164^^^^^162^166^callback.enterScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P14_Delete_Statement]^^164^^^^^162^166^callback.enterScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.shouldTraverseIfActive ( t, n, parent ) ;callback.enterScopeIfActive ( t ) ;^164^^^^^162^166^callback.enterScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^scopedCallback.enterScope ( t ) ;callback.enterScopeIfActive ( t ) ;^164^^^^^162^166^callback.enterScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.exitScopeIfActive ( t ) ;callback.enterScopeIfActive ( t ) ;^164^^^^^162^166^callback.enterScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P14_Delete_Statement]^^171^^^^^169^173^callback.exitScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.shouldTraverseIfActive ( t, n, parent ) ;callback.exitScopeIfActive ( t ) ;^171^^^^^169^173^callback.exitScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^scopedCallback.exitScope ( t ) ;callback.exitScopeIfActive ( t ) ;^171^^^^^169^173^callback.exitScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.enterScopeIfActive ( t ) ;callback.exitScopeIfActive ( t ) ;^171^^^^^169^173^callback.exitScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P11_Insert_Donor_Statement]^callback.visitOrMaybeActivate ( t, n, parent ) ;callback.exitScopeIfActive ( t ) ;^171^^^^^169^173^callback.exitScopeIfActive ( t ) ;^[CLASS] CombinedCompilerPass CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P8_Replace_Mix]^private  ScopedCallback scopedCallback;^83^^^^^78^88^private final ScopedCallback scopedCallback;^[CLASS] CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P8_Replace_Mix]^private Node waiting ;^90^^^^^85^95^private Node waiting = null;^[CLASS] CallbackWrapper  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  AbstractCompiler  compiler  Callback  callback  boolean  CallbackWrapper[]  callbacks  NodeTraversal  t  Node  externs  n  parent  root  waiting  CallbackWrapper  callback  
[P8_Replace_Mix]^this.callback =  null;^93^^^^^92^99^this.callback = callback;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P11_Insert_Donor_Statement]^scopedCallback = null;this.callback = callback;^93^^^^^92^99^this.callback = callback;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P2_Replace_Operator]^if  ( callback  &  ScopedCallback )  {^94^^^^^92^99^if  ( callback instanceof ScopedCallback )  {^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P15_Unwrap_Block]^scopedCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (callback));^94^95^96^97^98^92^99^if  ( callback instanceof ScopedCallback )  { scopedCallback =  ( ScopedCallback )  callback; } else { scopedCallback = null; }^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P16_Remove_Block]^^94^95^96^97^98^92^99^if  ( callback instanceof ScopedCallback )  { scopedCallback =  ( ScopedCallback )  callback; } else { scopedCallback = null; }^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P8_Replace_Mix]^scopedCallback = true;^97^^^^^92^99^scopedCallback = null;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P11_Insert_Donor_Statement]^this.callback = callback;scopedCallback = null;^97^^^^^92^99^scopedCallback = null;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P8_Replace_Mix]^scopedCallback =   ( ScopedCallback )  callback;^95^^^^^92^99^scopedCallback =  ( ScopedCallback )  callback;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P8_Replace_Mix]^scopedCallback = this;^97^^^^^92^99^scopedCallback = null;^[CLASS] CallbackWrapper  [METHOD] <init> [RETURN_TYPE] Callback)   Callback callback [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  waiting  
[P15_Unwrap_Block]^callback.visit(t, n, parent);^106^107^108^109^110^105^111^if  ( isActive (  )  )  { callback.visit ( t, n, parent ) ; } else if  ( waiting == n )  { waiting = null; }^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^106^107^108^109^110^105^111^if  ( isActive (  )  )  { callback.visit ( t, n, parent ) ; } else if  ( waiting == n )  { waiting = null; }^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^} else if  ( waiting > n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( parent == n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^} else if  ( n == waiting )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^} else {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^waiting = null;^108^109^110^^^105^111^} else if  ( waiting == n )  { waiting = null; }^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^108^109^110^^^105^111^} else if  ( waiting == n )  { waiting = null; }^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting = false;^109^^^^^105^111^waiting = null;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^waiting = n;waiting = null;^109^^^^^105^111^waiting = null;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting = this;^109^^^^^105^111^waiting = null;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, waiting, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, n, waiting ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit (  n, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t,  parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( t, parent, n ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^callback.shouldTraverse ( t, n, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^} else if  ( waiting >= n )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^}  if  ( waiting == parent )  {^108^^^^^105^111^} else if  ( waiting == n )  {^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting = true;^109^^^^^105^111^waiting = null;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^callback.visit ( n, t, parent ) ;^107^^^^^105^111^callback.visit ( t, n, parent ) ;^[CLASS] CallbackWrapper  [METHOD] visitOrMaybeActivate [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, waiting, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, waiting )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse (  n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t,  parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, n )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( n, t, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( t, parent, n )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  !callback.shouldTraverse ( t, n, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^if  ( isActive (  )  && !callback .visit ( t , waiting , n )   )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^if  (  !callback.shouldTraverse ( t, waiting, parent )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^waiting = n;^114^115^116^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  { waiting = n; }^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^114^115^116^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  { waiting = n; }^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^waiting = waiting;^115^^^^^113^117^waiting = n;^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting =  parent;^115^^^^^113^117^waiting = n;^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^waiting = null;waiting = n;^115^^^^^113^117^waiting = n;^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^waiting =  null;^115^^^^^113^117^waiting = n;^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P5_Replace_Variable]^if  ( isActive (  )  && !callback.shouldTraverse ( parent, n, t )  )  {^114^^^^^113^117^if  ( isActive (  )  && !callback.shouldTraverse ( t, n, parent )  )  {^[CLASS] CallbackWrapper  [METHOD] shouldTraverseIfActive [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  scopedCallback != null )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^if  (  scopedCallback != false )  {^120^^^^^119^123^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^scopedCallback.enterScope(t);^120^121^122^^^119^123^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.enterScope ( t ) ; }^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^120^121^122^^^119^123^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.enterScope ( t ) ; }^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P13_Insert_Block]^if  (  ( isActive (  )  )  &&  (  ( scopedCallback )  != null )  )  {     scopedCallback.exitScope ( t ) ; }^120^^^^^119^123^[Delete]^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^scopedCallback.exitScope ( t ) ;^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^scopedCallback.exitScope ( t ) ;scopedCallback.enterScope ( t ) ;^121^^^^^119^123^scopedCallback.enterScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] enterScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  || scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^if  ( isActive (  )  && scopedCallback == null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  ( isActive (  )  ) {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P6_Replace_Expression]^if  (  scopedCallback != null )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P8_Replace_Mix]^if  (  scopedCallback != this )  {^126^^^^^125^129^if  ( isActive (  )  && scopedCallback != null )  {^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P15_Unwrap_Block]^scopedCallback.exitScope(t);^126^127^128^^^125^129^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.exitScope ( t ) ; }^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P16_Remove_Block]^^126^127^128^^^125^129^if  ( isActive (  )  && scopedCallback != null )  { scopedCallback.exitScope ( t ) ; }^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P13_Insert_Block]^if  (  ( isActive (  )  )  &&  (  ( scopedCallback )  != null )  )  {     scopedCallback.enterScope ( t ) ; }^126^^^^^125^129^[Delete]^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P7_Replace_Invocation]^scopedCallback.enterScope ( t ) ;^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P14_Delete_Statement]^^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P11_Insert_Donor_Statement]^scopedCallback.enterScope ( t ) ;scopedCallback.exitScope ( t ) ;^127^^^^^125^129^scopedCallback.exitScope ( t ) ;^[CLASS] CallbackWrapper  [METHOD] exitScopeIfActive [RETURN_TYPE] void   NodeTraversal t [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  NodeTraversal  t  Node  n  parent  waiting  
[P2_Replace_Operator]^return waiting != null;^132^^^^^131^133^return waiting == null;^[CLASS] CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  n  parent  waiting  
[P5_Replace_Variable]^return parent == null;^132^^^^^131^133^return waiting == null;^[CLASS] CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  n  parent  waiting  
[P8_Replace_Mix]^return true ;^132^^^^^131^133^return waiting == null;^[CLASS] CallbackWrapper  [METHOD] isActive [RETURN_TYPE] boolean   [VARIABLES] ScopedCallback  scopedCallback  Callback  callback  boolean  Node  n  parent  waiting  
