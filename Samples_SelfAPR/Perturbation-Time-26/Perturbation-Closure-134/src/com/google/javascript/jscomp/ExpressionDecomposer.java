[P1_Replace_Type]^private static final  short  MAX_INTERATIONS = 100;^68^^^^^63^73^private static final int MAX_INTERATIONS = 100;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState   [VARIABLES] 
[P8_Replace_Mix]^private static final int MAX_INTERATIONS  = null ;^68^^^^^63^73^private static final int MAX_INTERATIONS = 100;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState   [VARIABLES] 
[P1_Replace_Type]^private char tempNamePrefix = "JSCompiler_temp_";^489^^^^^484^494^private String tempNamePrefix = "JSCompiler_temp_";^[CLASS] ExpressionDecomposer DecompositionType DecompositionState   [VARIABLES] 
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P14_Delete_Statement]^^60^61^^^^56^66^Preconditions.checkNotNull ( compiler ) ; Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkNotNull ( compiler ) ;^60^^^^^56^66^Preconditions.checkNotNull ( compiler ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P8_Replace_Mix]^Preconditions.checkNotNull ( this ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P14_Delete_Statement]^^61^62^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ; Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkNotNull ( safeNameIdSupplier ) ;^61^^^^^56^66^Preconditions.checkNotNull ( safeNameIdSupplier ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P14_Delete_Statement]^^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkNotNull ( constNames ) ;^62^^^^^56^66^Preconditions.checkNotNull ( constNames ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P8_Replace_Mix]^this.compiler =  null;^63^^^^^56^66^this.compiler = compiler;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P8_Replace_Mix]^this.safeNameIdSupplier =  null;^64^^^^^56^66^this.safeNameIdSupplier = safeNameIdSupplier;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P8_Replace_Mix]^this.knownConstants =  null;^65^^^^^56^66^this.knownConstants = constNames;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] <init> [RETURN_TYPE] Set)   AbstractCompiler compiler String> safeNameIdSupplier String> constNames [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  
[P1_Replace_Type]^short  i = 0;^77^^^^^75^86^int i = 0;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^int i = MAX_INTERATIONS;^77^^^^^75^86^int i = 0;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^while  ( DecompositionType.DECOMPOSABLE >= canExposeExpression ( expression )  )  {^78^^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( extractBeforeStatement )  )  {^78^^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^while  ( DecompositionType.UNDECOMPOSABLE == canExposeExpression ( expression )  )  {^78^^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^while  ( DecompositionType.DECOMPOSABLE == exposeExpression ( expression )  )  {^78^^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^if  ( i >= MAX_INTERATIONS )  {^80^^^^^75^86^if  ( i > MAX_INTERATIONS )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^if  ( MAX_INTERATIONS > i )  {^80^^^^^75^86^if  ( i > MAX_INTERATIONS )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P6_Replace_Expression]^if  ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  ) )  {^80^^^^^75^86^if  ( i > MAX_INTERATIONS )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("DecomposeExpression depth exceeded on :\n" + (expression.toStringTree())));^80^81^82^83^84^75^86^if  ( i > MAX_INTERATIONS )  { throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P16_Remove_Block]^^80^81^82^83^84^75^86^if  ( i > MAX_INTERATIONS )  { throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  >>  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\neExpre" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + extractBeforeStatement.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.newString (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P13_Insert_Block]^if  ( i >  ( MAX_INTERATIONS )  )  {     throw new IllegalStateException (  ( "DecomposeExpression depth exceeded on :\n" +  ( expression.toStringTree (  )  )  )  ) ; }^81^^^^^75^86^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"   instanceof   expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\neded on :" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^expression.newString (  )  ) ;^83^^^^^75^86^expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^expression .newString ( tempNamePrefix )   ) ;^83^^^^^75^86^expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^83^^^^^75^86^expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  <<  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\no" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  <=  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "Deco" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression ( extractBeforeStatement ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^canExposeExpression ( expression ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;exposeExpression ( expression ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;exposeExpression ( expression ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^exposeExpression ( expressionRoot, expression ) ;exposeExpression ( expression ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;exposeExpression ( expression ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^if  ( MAX_INTERATIONS > MAX_INTERATIONS )  {^80^^^^^75^86^if  ( i > MAX_INTERATIONS )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  ||  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "resecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  <  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "mpos" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "Decompos" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n"  ==  expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P3_Replace_Literal]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\nxpression depth exc" + expression.toStringTree (  )  ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression .newString ( tempNamePrefix )   ) ;^81^82^83^^^75^86^throw new IllegalStateException ( "DecomposeExpression depth exceeded on :\n" + expression.toStringTree (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^while  ( DecompositionType.DECOMPOSABLE == exposeExpression ( extractBeforeStatement )  )  {^78^^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^78^79^^^^75^86^while  ( DecompositionType.DECOMPOSABLE == canExposeExpression ( expression )  )  { exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^canExposeExpression ( extractBeforeStatement ) ;^79^^^^^75^86^exposeExpression ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeDecomposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node extractBeforeStatementRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node expressionRoot = moveExpression ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node extractBeforeStatementRoot = moveExpression ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^94^95^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ; Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^return isSubexpressionMovable ( expressionRoot, subExpression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^exposeExpression ( expressionRoot, expression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^exposeExpression ( expression ) ;Node expressionRoot = findExpressionRoot ( expression ) ;^94^^^^^93^98^Node expressionRoot = findExpressionRoot ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P2_Replace_Operator]^Preconditions.checkState ( expressionRoot == null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Preconditions.checkState ( extractBeforeStatement != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( expressionRoot != null ) ;^95^^^^^93^98^Preconditions.checkState ( expressionRoot != null ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression ( extractBeforeStatement, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression (  expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression ( expressionRoot ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression ( expression, expressionRoot ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^exposeExpression ( expressionRootRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^extractExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^extractExpression ( extractBeforeStatement, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^96^97^^^^93^98^exposeExpression ( expressionRoot, expression ) ; compiler.reportCodeChange (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;exposeExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;exposeExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^return isSubexpressionMovable ( expressionRoot, subExpression ) ;exposeExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;exposeExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^exposeExpression ( expression ) ;exposeExpression ( expressionRoot, expression ) ;^96^^^^^93^98^exposeExpression ( expressionRoot, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^97^^^^^93^98^compiler.reportCodeChange (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionRoot  extractBeforeStatement  Supplier  safeNameIdSupplier  String  tempNamePrefix  int  MAX_INTERATIONS  i  
[P1_Replace_Type]^char resultName = getTempValueName (  ) ;^109^^^^^108^125^String resultName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^String resultName = getTempConstantValueName (  ) ;^109^^^^^108^125^String resultName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^String tempName = getTempValueName (  ) ;String resultName = getTempValueName (  ) ;^109^^^^^108^125^String resultName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^String tempName = getTempConstantValueName (  ) ;String resultName = getTempValueName (  ) ;^109^^^^^108^125^String resultName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^109^110^^^^108^125^String resultName = getTempValueName (  ) ; Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node injectionPoint = findInjectionPoint ( newExpressionRoot ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node injectionPoint = findExpressionRoot ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node injectionPoint = findInjectionPoint ( injectionPointParent ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node injectionPoint = expressionRoot;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node injectionPoint = findInjectionPoint ( expression ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node injectionPoint = findExpressionRoot ( injectionPointParent ) ;^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^110^^^^^108^125^Node injectionPoint = findInjectionPoint ( expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newExpressionRoot ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Preconditions.checkNotNull ( injectionPointParent ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^111^112^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ; Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkNotNull ( injectionPoint ) ;^111^^^^^108^125^Preconditions.checkNotNull ( injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint.newString (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node newExpressionRootParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint .getNext (  )  ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node injectionPointParentParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^112^^^^^108^125^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newExpressionRoot ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^113^114^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ; Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkNotNull ( injectionPointParent ) ;^113^^^^^108^125^Preconditions.checkNotNull ( injectionPointParent ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( newExpressionRoot )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isGet ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( extractBeforeStatement )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint )  ) ;^114^^^^^108^125^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node expressionParent = expression.newString (  ) ;^117^^^^^108^125^Node expressionParent = expression.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node newExpressionRootParent = expression .getNext (  )  ;^117^^^^^108^125^Node expressionParent = expression.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node injectionPointParent = expression.getParent (  ) ;^117^^^^^108^125^Node expressionParent = expression.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node newExpressionRootParent = expression.newString (  ) ;^117^^^^^108^125^Node expressionParent = expression.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^117^^^^^108^125^Node expressionParent = expression.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^expressionParent.replaceChild ( newExpressionRoot, Node.newString ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, tempNamePrefix )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^expressionParent.replaceChild (  Node.newString ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^expressionParent.replaceChild ( expression, Node.replaceChild ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^expressionParent .replaceChild ( extractBeforeStatement )  ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^118^119^^^^108^125^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^expression, Node.newString ( Token.NAME, tempNamePrefix )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^expression, Node.replaceChild ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^expression, Node.replaceChild ( Token.NAME, tempNamePrefix )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;expression, Node.newString ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;expression, Node.newString ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName ) , expr ) ;expression, Node.newString ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;expression, Node.newString ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName )  ) ;expression, Node.newString ( Token.NAME, resultName )  ) ;^119^^^^^108^125^expression, Node.newString ( Token.NAME, resultName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node newExpressionRoot = NodeUtil.newVarNode ( tempNamePrefix, expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node newExpressionRoot = NodeUtil.newVarNode (  expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node newExpressionRoot = NodeUtil.newVarNode ( resultName ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node newExpressionRoot = NodeUtil.newVarNode ( expression, resultName ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node newExpressionRoot = NodeUtil.canBeSideEffected ( resultName, expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P7_Replace_Invocation]^Node newExpressionRoot = NodeUtil .isStatementBlock ( expression )  ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node newExpressionRoot = NodeUtil.canBeSideEffected ( resultName, injectionPointParent ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P8_Replace_Mix]^Node newExpressionRoot = NodeUtil.canBeSideEffected ( tempNamePrefix, expression ) ;^122^^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^122^123^^^^108^125^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ; injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( injectionPointParent, injectionPoint ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPointParent ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^injectionPointParent.addChildBefore (  injectionPoint ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( newExpressionRoot ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^123^124^125^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ; compiler.reportCodeChange (  ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^123^^^^^108^125^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P14_Delete_Statement]^^124^^^^^108^125^compiler.reportCodeChange (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] moveExpression [RETURN_TYPE] void   Node expression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  sideEffects  Node  expression  expressionParent  expressionRoot  extractBeforeStatement  injectionPoint  injectionPointParent  newExpressionRoot  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( newExpressionRoot, expressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( subExpression, newExpressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent (  expressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( subExpression ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( expressionRoot, subExpression ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node nonconditionalExpr = isSubexpressionMovable ( subExpression, expressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node nonconditionalExpr = findNonconditionalParent ( subExpression, injectionPointParent ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( replacement, expressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExpr = findNonconditionalParent ( subExpression, replacement ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node nonconditionalExpr = findNonconditionalParent ( left, expressionRoot ) ;^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^143^144^^^^128^158^Node nonconditionalExpr = findNonconditionalParent ( subExpression, expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( injectionPointParent ) ;^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^boolean hasFollowingSideEffects = NodeUtil.isStatementBlock ( nonconditionalExpr ) ;^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( injectionPoint ) ;^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( replacement ) ;^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^146^147^^^^131^161^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node exprInjectionPoint = findInjectionPoint ( injectionPointParent ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node exprInjectionPoint = findExpressionRoot ( nonconditionalExpr ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node exprInjectionPoint = findExpressionRoot ( subExpression ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( subExpression ) ;Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node exprInjectionPoint = findInjectionPoint ( left ) ;^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^149^^^^^134^164^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.sideEffects = sideEffects;^151^^^^^136^166^state.sideEffects = hasFollowingSideEffects;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.sideEffects =  hasFollowingSideEffects;^151^^^^^136^166^state.sideEffects = hasFollowingSideEffects;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = injectionPointParent;^152^^^^^137^167^state.extractBeforeStatement = exprInjectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement =  exprInjectionPoint;^152^^^^^137^167^state.extractBeforeStatement = exprInjectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = getVarNode;state.extractBeforeStatement = exprInjectionPoint;^152^^^^^137^167^state.extractBeforeStatement = exprInjectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = thisVarNode;state.extractBeforeStatement = exprInjectionPoint;^152^^^^^137^167^state.extractBeforeStatement = exprInjectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;state.extractBeforeStatement = exprInjectionPoint;^152^^^^^137^167^state.extractBeforeStatement = exprInjectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( parentType != Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( parentType <= Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( type == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( injectionPointType == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parentTypeType == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( left != child )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( type == GETELEM )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parentType == CALL && getFirstChild()) )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parentType == CALL )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^} else if  ( parentType == Token.CALL || NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^} else if  ( parentType >= Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( type == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( leftType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^} else if  ( parentType == Token.CALL ) {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^} else if  (  NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^} else if  ( parentType == CALL )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^} else {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.newString (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent .getLastChild (  )   )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , newExpressionRoot, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) ,  state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , child ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( child.getFirstChild (  ) , parent, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getFirstChild (  ) , child, parent ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( parent.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( parent.newString (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( left.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent.newString (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( injectionPointParent.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !moveExpression ( parent.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !maybeExternMethod ( parent.newString (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !maybeExternMethod ( parent .getLastChild (  )   )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( nonconditionalExpr.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe (  state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isSafeAssign ( functionExpression, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {     state.sideEffects = true;     state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ; }^197^^^^^189^207^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^state.sideEffects = false;^200^^^^^189^207^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^seenSideEffects = true;state.sideEffects = true;^200^^^^^189^207^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  subExpression;^205^^^^^189^207^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( injectionPointParent, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression (  state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( parent ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( state, parent ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacement = extractExpression ( parent, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( subExpression, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( injectionPointParent, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = injectionPoint;^205^^^^^189^207^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  injectionPointParent;^205^^^^^189^207^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = newExpressionRoot.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent.newString (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = injectionPointParent.newString (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( newExpressionRoot, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( left, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = left.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( replacement.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , left, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) ,  state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , child ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getNext (  ) , child, functionExpression ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( child.getNext (  ) , functionExpression, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , state, child ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression.newString (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression .getParent (  )  , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression.newString (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( injectionPointParent, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state.sideEffects, functionExpression )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state, functionExpression.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( functionExpression, needResult )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( injectionPoint, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( left, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "e" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "ls cxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( left, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, needResult )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe (  state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state.sideEffects, functionExpression )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state, functionExpression.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isSafeAssign ( functionExpression, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( nonconditionalExpr, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {     state.sideEffects = true;     state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ; }^197^^^^^185^211^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^state.sideEffects = false;^200^^^^^185^211^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^seenSideEffects = true;state.sideEffects = true;^200^^^^^185^211^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = injectionPointParent;^205^^^^^185^211^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  injectionPoint;^205^^^^^185^211^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( newExpressionRoot, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression (  state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( parent ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( state, parent ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacement = extractExpression ( parent, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( subExpression, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( injectionPointParent, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = newExpressionRoot;^205^^^^^185^211^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "hod cxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = injectionPointParent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent.newString (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = left.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( subExpression, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "ct method calls can noxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( injectionPoint.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( injectionPoint.newString (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( left.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = injectionPoint.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent .getLastChild (  )  ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , left, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) ,  state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , child ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( child.getNext (  ) , functionExpression, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , state, child ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression.newString (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( left.newString (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression.newString (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression .getParent (  )  , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^185^211^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( injectionPointParent, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( injectionPointParent, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( subExpression.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !moveExpression ( parent.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !maybeExternMethod ( parent.newString (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( !maybeExternMethod ( parent .getLastChild (  )   )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( injectionPointParent.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = left;^205^^^^^189^207^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = newExpressionRoot;^205^^^^^189^207^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = injectionPointParent.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent .getLastChild (  )  ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = nonconditionalExpr.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = injectionPoint.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = injectionPoint.newString (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( functionExpression.getNext (  ) , subExpression, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( newExpressionRoot, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.bject" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "bject m" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( injectionPointParent, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, needResult )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe (  state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isSafeAssign ( functionExpression, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( injectionPointParent, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {     state.sideEffects = true;     state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ; }^197^^^^^182^212^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^state.sideEffects = false;^200^^^^^185^215^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^seenSideEffects = true;state.sideEffects = true;^200^^^^^185^215^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = injectionPointParent;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  null;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( subExpression, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression (  state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( parent ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( state, parent ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacement = extractExpression ( parent, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( subExpression, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( injectionPointParent, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  left;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "llsxternal object method calls can not be decomposed." ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = newExpressionRoot.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent.newString (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionExpression = parent .getLastChild (  )  ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = subExpression.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node functionExpression = parent.getFirstChild (  ) ; }^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( newExpressionRoot, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( left, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "Exte" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil.isGet ( parent.newString (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil .isStatementBlock ( functionExpression )   )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( nonconditionalExpr.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil.isGet ( newExpressionRoot.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( nonconditionalExpr.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( injectionPoint.newString (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = injectionPoint.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;Node functionExpression = parent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( nonconditionalExpr.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , subExpression, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) ,  state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , child ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( child.getNext (  ) , functionExpression, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , state, child ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getNext (  ) , child, functionExpression ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression.newString (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression .getParent (  )  , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression.newString (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression .getParent (  )  , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;functionExpression.getNext (  ) , child, state ) ;^195^^^^^180^210^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state, functionExpression.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( injectionPoint, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getFirstChild (  ) , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , subExpression, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) ,  state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , child ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( child.getFirstChild (  ) , parent, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , state, child ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( parent.getFirstChild (  ) , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( parent.newString (  ) , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( parent.newString (  ) , newExpressionRoot, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent.newString (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;parent.getFirstChild (  ) , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( newExpressionRoot, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent, sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign (  state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( state.sideEffects, parent )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( type == GETELEM )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isExpressionTreeUnsafe ( parent, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( parent, sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( left != child )  {     checkState ( isGet ( left )  ) ;     if  ( type ==  ( GETELEM )  )  {         decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;     }     decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ; }^162^^^^^147^177^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( left >= child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( nonconditionalExpr != child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != newExpressionRoot )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != left )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( type == GETELEM )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( replacement != child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( n == child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isGet(left)); if (type == (com.google.javascript.rhino.Token.GETELEM)) {    decomposeSubExpressions(left.getLastChild(), null, state);}; decomposeSubExpressions(left.getFirstChild(), null, state);^177^178^179^180^181^162^184^if  ( left != child )  { Preconditions.checkState ( NodeUtil.isGet ( left )  ) ; if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^177^178^179^180^181^162^184^if  ( left != child )  { Preconditions.checkState ( NodeUtil.isGet ( left )  ) ; if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type < Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parentType == Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( type == Token.this )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^decomposeSubExpressions(left.getLastChild(), null, state);^179^180^181^^^162^184^if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^179^180^181^^^162^184^if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getLastChild (  ) , null ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getLastChild (  ) , null, left ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left.newString (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( newExpressionRoot.newString (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPoint.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( injectionPoint )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatementBlock ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( injectionPointParent )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPoint.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getFirstChild (  ) , null ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getFirstChild (  ) , null, left ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left.newString (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint .getLastChild (  )  , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPointParent.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left .getLastChild (  )  , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.newString (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type > Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left .getFirstChild (  )  , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( replacement.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = nonconditionalExpr.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node left = parent.newString (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = injectionPointParent.newString (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^long  type = left.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = newExpressionRoot.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int type = left.newString (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int type = left .getParent (  )  ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = injectionPointParent.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int type = left.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;int type = left.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = injectionPoint.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node left = parent.getFirstChild (  ) ; }^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node left = parent.getFirstChild (  ) ; }^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = injectionPoint.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = injectionPoint .getParent (  )  ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( subExpression )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( nonconditionalExpr )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( exprInjectionPoint )   ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( replacement.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( subExpression.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( left == child )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( subExpression != child )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != injectionPointParent )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != left )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( type == GETELEM )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( left != subExpression )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( n == child )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isGet(left)); if (type == (com.google.javascript.rhino.Token.GETELEM)) {    decomposeSubExpressions(left.getLastChild(), null, state);}; decomposeSubExpressions(left.getFirstChild(), null, state);^177^178^179^180^181^162^192^if  ( left != child )  { Preconditions.checkState ( NodeUtil.isGet ( left )  ) ; if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^177^178^179^180^181^162^192^if  ( left != child )  { Preconditions.checkState ( NodeUtil.isGet ( left )  ) ; if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type >= Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parentType == Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^decomposeSubExpressions(left.getLastChild(), null, state);^179^180^181^^^164^194^if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^179^180^181^^^164^194^if  ( type == Token.GETELEM )  { decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( subExpression.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getLastChild (  ) , null ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getLastChild (  ) , null, left ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left.newString (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left .getFirstChild (  )  , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( injectionPoint )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatementBlock ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( replacement )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( injectionPointParent )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( expressionRoot ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil .isStatementBlock ( newExpressionRoot )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( replacement.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.newString (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPoint.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getFirstChild (  ) , null ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getFirstChild (  ) , null, left ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left.newString (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( left .getLastChild (  )  , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type != Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( nonconditionalExpr.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPointParent.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = injectionPoint.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node left = parent.newString (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = replacement.newString (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node left = parent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^short  type = left.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = newExpressionRoot.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int type = left.newString (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int type = left .getParent (  )  ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = injectionPoint.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int type = left.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;int type = left.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( injectionPoint, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent, state.sideEffects.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent, state )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = left.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = replacement.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( injectionPointParent )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( subExpression )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( subExpression )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( injectionPoint.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint.newString (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPointParent.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr .getLastChild (  )  , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( newExpressionRoot.newString (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( replacement, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( left == child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != subExpression )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( injectionPointParent != child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type <= Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( newExpressionRoot )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( expression )   ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.newString (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent .getFirstChild (  )  , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node left = parent .getLastChild (  )  ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = injectionPoint .getLastChild (  )  ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = parent.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = newExpressionRoot.newString (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = newExpressionRoot.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = replacement.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^175^176^^^^162^184^Node left = parent.getFirstChild (  ) ; int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( injectionPoint.getLastChild (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( newExpressionRoot != child )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( replacement )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent .getFirstChild (  )  , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( replacement.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( nonconditionalExpr.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type < Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( type == Token.null )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^} else if  ( parentType != Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( injectionPointParentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^} else if  ( parentType == Token.CALL && NodeUtil .isStatementBlock ( nonconditionalExpr )   )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( nonconditionalExpr.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , injectionPointParent, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( parent .getLastChild (  )  , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent .getLastChild (  )  , child, state ) ;^210^^^^^185^211^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, needResult )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( nonconditionalExpr, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = subExpression.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = replacement.getFirstChild (  ) ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , parent, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionExpression .getParent (  )  , child, state ) ;^195^^^^^189^207^functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( left, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "jectxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "al object methodxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( nonconditionalExpr, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = rewriteCallExpression ( left, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( injectionPoint, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = subExpression;^205^^^^^185^211^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External o" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = newExpressionRoot.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = nonconditionalExpr.getFirstChild (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( injectionPointParent, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "ernal object method calls" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( left.newString (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( replacement.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , injectionPointParent, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( functionExpression .getParent (  )  , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( functionExpression, sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( replacement.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( subExpression, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( functionExpression, sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( left.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.xternal object" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.rnal object m" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return 0;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( subExpression, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( functionExpression, needResult )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = injectionPoint;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^for  ( Node child =  parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^for  ( Node child = nonconditionalExpr = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = parent, parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = nonconditionalExpr, replacement = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node parent = nonconditionalExpr, child = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = parent, nonconditionalExpr = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node child = nonconditionalExpr, parent = child.newString (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node child = nonconditionalExpr, parent = child .getNext (  )  ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node injectionPointParent = nonconditionalExpr, parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( parentType > Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( parentType >= Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( injectionPointParentType == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( subExpressionType == Token.ASSIGN )  {^161^^^^^146^176^if  ( parentType == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^} else if  ( parentType > Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( subExpressionType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^}  if  (  NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , state, child ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.getFirstChild (  ) , child, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( newExpressionRoot.getFirstChild (  )  )  )  {^189^^^^^185^211^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = left .getLastChild (  )  ;^193^^^^^189^207^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getNext (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , newExpressionRoot, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( subExpression, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( " object method ca" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "ethod calls can xternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( newExpressionRoot, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( parent, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed. object method cal" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = newExpressionRoot.newString (  ) ;^193^^^^^185^211^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "xt" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getNext (  ) , child, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , nonconditionalExpr, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getNext (  ) , child, functionExpression ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( nonconditionalExpr, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( injectionPoint, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , nonconditionalExpr, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression.newString (  ) , child, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( parent, state.sideEffects )  )  {^197^^^^^189^207^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object " ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.calls can not " ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( newExpressionRoot, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state.sideEffects, functionExpression )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  subExpression;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( injectionPointParent, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "thod calls can n" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionExpression = left.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = injectionPointParent.getFirstChild (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "object methodxternal object method calls can not be decomposed." ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^throw new IllegalStateException  (" ")  ; ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( injectionPointParent.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil.isGet ( injectionPoint.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( replacement.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = left.newString (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , injectionPointParent, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( functionExpression.getNext (  ) , replacement, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( replacement, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( replacement, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( injectionPointParent.getFirstChild (  ) , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , newExpressionRoot, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( parent .getLastChild (  )  , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent .getLastChild (  )  , child, state ) ;^210^^^^^195^225^parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( injectionPointParent, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( left <= child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( newExpressionRoot != child )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != injectionPointParent )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type != Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint .getFirstChild (  )  , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( newExpressionRoot.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent.newString (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = subExpression.getFirstChild (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = subExpression.newString (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = left.newString (  ) ;^175^^^^^162^184^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( extractBeforeStatement )   ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( subExpression .getLastChild (  )  , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type <= Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( parent.getLastChild (  ) , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( expressionParent )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( nonconditionalExpr )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPointParent.newString (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = subExpression.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = parent.newString (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( state, parent.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( parent, needResult )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = newExpressionRoot.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node left = parent .getLastChild (  )  ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node left = nonconditionalExpr.newString (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = injectionPointParent.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = subExpression.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( exprInjectionPoint )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( child )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( subExpression.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( parent, needResult )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != nonconditionalExpr )  {^177^^^^^162^184^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type >= Token.GETELEM )  {^179^^^^^162^184^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( nonconditionalExpr )   ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr .getLastChild (  )  , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint.newString (  ) , null, state ) ;^180^^^^^162^184^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^short  type = left.getType (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = nonconditionalExpr.newString (  ) ;^176^^^^^162^184^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkNotNull ( NodeUtil.isGet ( nonconditionalExpr )  ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatementBlock ( extractedConditional )   ) ;^178^^^^^162^184^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( nonconditionalExpr.newString (  ) , null, state ) ;^182^^^^^162^184^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( left > child )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( left != newExpressionRoot )  {^177^^^^^162^192^if  ( left != child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( injectionPoint .getFirstChild (  )  , null, state ) ;^180^^^^^165^195^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkNotNull ( NodeUtil.isGet ( injectionPoint )  ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( type > Token.GETELEM )  {^179^^^^^164^194^if  ( type == Token.GETELEM )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( newExpressionRootType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^} else if  ( parentType == Token.null && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^} else if  ( type == Token.CALL ) {^185^186^^^^170^200^} else if  ( parentType == Token.CALL && NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , parent, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( parent.getFirstChild (  ) , subExpression, state ) ;^209^210^^^^185^211^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( newExpressionRoot, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , injectionPointParent, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "xternal object method c" ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( " object xternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^throw new IllegalStateException  (" ")  ; ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( functionExpression, needResult )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( newExpressionRoot, state ) ;^203^^^^^185^211^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  left;^205^^^^^185^211^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "bject method calxternal object method calls can not be decomposed." ) ;^190^191^^^^185^211^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , subExpression, state ) ;^194^195^^^^185^211^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( left, state.sideEffects )  )  {^197^^^^^185^211^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacement = rewriteCallExpression ( replacement, state ) ;^203^^^^^189^207^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , replacement, state ) ;^194^195^^^^189^207^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "ernal object method calls can not be deco" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed. object method calls can not " ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = newExpressionRoot;^205^^^^^190^220^parent = replacement;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.alls can no" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^long  parentType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int injectionPointType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int parentType = parent.newString (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int nonconditionalExprType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int parentType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int type = left.getType (  ) ;int parentType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int type = injectionPoint.newString (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.d calls can not be" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int subExpressionType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int subExpressionType = parent .getParent (  )  ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkState ( !isConditionalOp ( parent )  && child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkState ( !isConditionalOp ( parent )  || child != parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( !isConditionalOp ( subExpression )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( !isConditionalOp ( parent )  || injectionPointParent == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( !isConditionalOp ( child )  || parent == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( !findInjectionPoint ( parent )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.newString (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent .getLastChild (  )   ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( !isConditionalOp ( left )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^!isConditionalOp ( newExpressionRoot )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^!findInjectionPoint ( parent )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^!isConditionalOp ( injectionPoint )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ; }^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^!isConditionalOp ( parent )  || child == parent.newString (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^!isConditionalOp ( subExpression )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( subExpression, state.sideEffects )  )  {^162^^^^^147^177^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node left = parent.getFirstChild (  ) ; }^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node left = parent.getFirstChild (  ) ; }^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int type = nonconditionalExpr.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( replacement.newString (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil.isGet ( parent .getLastChild (  )   )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil.isGet ( injectionPoint.newString (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( injectionPoint.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !moveExpression ( nonconditionalExpr.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( !maybeExternMethod ( newExpressionRoot.getFirstChild (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = newExpressionRoot.newString (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( functionExpression.getNext (  ) , parent, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacement = extractExpression ( left, state ) ;^203^^^^^188^218^Node replacement = rewriteCallExpression ( parent, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getFirstChild (  ) , child, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , left, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  left, left^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^child = parent, parent = child.newString (  )  )  {^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^child = parent, parent = child .getNext (  )   )  {^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  parent, parent^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( " method cal" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = subExpression, parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node newExpressionRoot = nonconditionalExpr, parent = child.newString (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int newExpressionRootType = parent.getType (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^long  type = left.getType (  ) ;^176^^^^^161^191^int type = left.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = replacement .getLastChild (  )  ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^throw new IllegalStateException ( "External object method calls can not be decomposed.ompo" ) ;^190^191^^^^175^205^throw new IllegalStateException ( "External object method calls can not be decomposed." ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node left = nonconditionalExpr, parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node nonconditionalExpr = nonconditionalExpr, parent = child.getParent (  ) ;^155^^^^^140^170^for  ( Node child = nonconditionalExpr, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = parent, parent = nonconditionalExpr.getParent (  )  )  {^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child = parent, parent = replacement.getParent (  )  )  {^157^^^^^142^172^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^157^158^^^^142^172^child = parent, parent = child.getParent (  )  )  { int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int parentType = parent .getParent (  )  ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int subExpressionType = parent.newString (  ) ;^158^^^^^143^173^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( !isConditionalOp ( replacement )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( !isConditionalOp ( parent )  || left == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( !findInjectionPoint ( left )  || child == parent.getFirstChild (  )  ) ;^159^160^^^^144^174^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^!isConditionalOp ( injectionPointParent )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^!isConditionalOp ( replacement )  || child == parent.getFirstChild (  )  ) ;^160^^^^^145^175^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node left = injectionPointParent.getFirstChild (  ) ;^175^^^^^160^190^Node left = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil .isStatementBlock ( expression )   ) ;^178^^^^^163^193^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( injectionPointParent.getFirstChild (  ) , null, state ) ;^182^^^^^167^197^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil .isStatementBlock ( exprInjectionPoint )   )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( left.getFirstChild (  )  )  )  {^186^^^^^171^201^&& NodeUtil.isGet ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( injectionPoint .getLastChild (  )   )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( !maybeExternMethod ( injectionPointParent.newString (  )  )  )  {^189^^^^^174^204^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionExpression = injectionPoint.newString (  ) ;^193^^^^^178^208^Node functionExpression = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( subExpression.getNext (  ) , child, state ) ;^194^195^^^^179^209^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( left, state.sideEffects )  )  {^197^^^^^182^212^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( parent.getFirstChild (  ) , nonconditionalExpr, state ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( state.getFirstChild (  ) , child, parent ) ;^209^210^^^^194^224^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( nonconditionalExpr > subExpression )  {^219^^^^^204^234^if  ( nonconditionalExpr == subExpression )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( injectionPoint == subExpression )  {^219^^^^^204^234^if  ( nonconditionalExpr == subExpression )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( nonconditionalExpr == nonconditionalExpr )  {^219^^^^^204^234^if  ( nonconditionalExpr == subExpression )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parent.getType() != EXPR_RESULT )  {^219^^^^^204^234^if  ( nonconditionalExpr == subExpression )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( nonconditionalExpr == injectionPoint )  {^219^^^^^204^234^if  ( nonconditionalExpr == subExpression )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = left.getParent (  ) ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = nonconditionalExpr.newString (  ) ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = nonconditionalExpr .getNext (  )  ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = left .getNext (  )  ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isConditionalOp ( parent )  )  { Node parent = nonconditionalExpr.getParent (  ) ; }^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^boolean needResult = parent.getType (  )  == Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean needResult = newExpressionRoot.getType (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^boolean needResult = parent.newString (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean needResult = injectionPointParent.getType (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( newExpressionRoot, exprInjectionPoint, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, subExpression, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, sideEffects ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional (  exprInjectionPoint, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr,  needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( needResult, exprInjectionPoint, nonconditionalExpr ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, needResult, exprInjectionPoint ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node extractedConditional = buildResultExpression ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node extractedConditional = extractConditional ( injectionPointParent, exprInjectionPoint, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = parent.getParent (  ) ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = injectionPointParent.getParent (  ) ;^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^225^^^^^219^229^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean needResult = injectionPoint.getType (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean needResult = newExpressionRoot.newString (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^226^^^^^219^229^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( left, exprInjectionPoint, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, injectionPointParent, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( exprInjectionPoint, nonconditionalExpr, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node extractedConditional = extractConditional ( nonconditionalExpr, left, needResult ) ;^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^227^228^^^^219^229^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = injectionPoint.getParent (  ) ;^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = nonconditionalExpr.newString (  ) ;^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = nonconditionalExpr .getNext (  )  ;^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = subExpression.getParent (  ) ;^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isConditionalOp ( parent )  )  { Node parent = nonconditionalExpr.getParent (  ) ; }^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^boolean needResult = parent.getType (  )  < Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean needResult = nonconditionalExpr.getType (  )  != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^boolean needResult = parent.newString (  )  != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean needResult = injectionPointParent.getType (  )  != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( newExpressionRoot, exprInjectionPoint, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, subExpression, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, sideEffects ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional (  exprInjectionPoint, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr,  needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( needResult, exprInjectionPoint, nonconditionalExpr ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( exprInjectionPoint, nonconditionalExpr, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node extractedConditional = buildResultExpression ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = injectionPointParent .getNext (  )  ;^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^225^^^^^210^240^Node parent = nonconditionalExpr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean needResult = left.getType (  )  != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^boolean needResult = parent .getParent (  )   != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^226^^^^^211^241^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( subExpression, exprInjectionPoint, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, injectionPointParent, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node extractedConditional = extractConditional ( nonconditionalExpr, needResult, exprInjectionPoint ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node extractedConditional = extractConditional ( injectionPointParent, exprInjectionPoint, needResult ) ;^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^227^228^^^^212^242^Node extractedConditional = extractConditional ( nonconditionalExpr, exprInjectionPoint, needResult ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] exposeExpression [RETURN_TYPE] void   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^return false;^237^^^^^235^238^return true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] maybeExternMethod [RETURN_TYPE] boolean   Node node [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node result = parent;^246^^^^^244^261^Node result = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node result = replacement;^246^^^^^244^261^Node result = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node child = subExpression;Node result = subExpression;^246^^^^^244^261^Node result = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( node )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( findInjectionPoint ( parent )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^if (child != (parent.getFirstChild())) {    result = parent;};^251^252^^254^255^244^261^if  ( isConditionalOp ( parent )  )  {  if  ( child != parent.getFirstChild (  )  )  { result = parent; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^251^252^^254^255^244^261^if  ( isConditionalOp ( parent )  )  {  if  ( child != parent.getFirstChild (  )  )  { result = parent; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( child <= parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left != parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != subExpression.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parent != child.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( child != parent.newString (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != newExpressionRoot.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^result = parent;^254^255^256^^^244^261^if  ( child != parent.getFirstChild (  )  )  { result = parent; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^254^255^256^^^244^261^if  ( child != parent.getFirstChild (  )  )  { result = parent; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( child !=  ( parent.getFirstChild (  )  )  )  {     requiresDecomposition = true; }^254^^^^^244^261^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^result = node;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^result =  replacement;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^child = parent;result = parent;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^result =  left;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != nonconditionalExpr.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != injectionPointParent .getLastChild (  )   )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( newExpressionRoot != parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != left.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( child != parent .getLastChild (  )   )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( subExpression != parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^result = newExpressionRoot;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^result =  null;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = replacement, parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node newExpressionRoot = subExpression, parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child =  parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = subExpression = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = parent, subExpression = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node subExpression = child, parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node parent = subExpression, child = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node child = subExpression, parent = child.newString (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node child = subExpression, parent = child .getNext (  )  ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node left = subExpression, parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( newExpressionRoot )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( child == parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != node.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^result = injectionPointParent;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != injectionPointParent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( nonconditionalExpr != parent.getFirstChild (  )  )  {^254^^^^^244^261^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( replacement )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = nonconditionalExpr, parent = child.getParent (  )  )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  replacement, replacement^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = parent, parent = newExpressionRoot.getParent (  )  )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^child = parent, parent = child.newString (  )  )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  parent, parent^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^result =  nonconditionalExpr;^255^^^^^244^261^result = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node child = left, parent = child.getParent (  ) ;^248^^^^^244^261^for  ( Node child = subExpression, parent = child.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = parent, parent = left.getParent (  )  )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^child = parent, parent = child .getNext (  )   )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child = parent, parent = node.getParent (  )  )  {^250^^^^^244^261^child = parent, parent = child.getParent (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( injectionPointParent )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( findInjectionPoint ( newExpressionRoot )  )  {^251^^^^^244^261^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return newExpressionRoot;^260^^^^^244^261^return result;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findNonconditionalParent [RETURN_TYPE] Node   Node subExpression Node expressionRoot [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  subExpression  Supplier  safeNameIdSupplier  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( n == null && n == stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( n != null || n == stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( n == null || n != stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( subExpression == null || n == stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( n == null || n == subExpression )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( stopNode == null || n == n )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( n == null ) {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  (  n == stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( n == false || n == stopNode )  {^280^^^^^277^300^if  ( n == null || n == stopNode )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^return ;^280^281^282^^^277^300^if  ( n == null || n == stopNode )  { return; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^280^281^282^^^277^300^if  ( n == null || n == stopNode )  { return; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( left.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( n.getNext (  ) , parent, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( n.getNext (  ) ,  state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( n.getNext (  ) , stopNode ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( stopNode.getNext (  ) , n, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^decomposeSubExpressions ( n.getNext (  ) , state, stopNode ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^decomposeSubExpressions ( n.newString (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^decomposeSubExpressions ( n.getNext (  ) , newExpressionRoot, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getLastChild (  ) , null, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^n.getNext (  ) , stopNode, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( left.getFirstChild (  ) , null, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( functionExpression.getNext (  ) , child, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( parent.getFirstChild (  ) , child, state ) ;decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^288^289^^^^277^300^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^n.newString (  ) , stopNode, state ) ;^289^^^^^277^300^n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^289^^^^^277^300^n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;n.getNext (  ) , stopNode, state ) ;^289^^^^^277^300^n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^functionExpression.getNext (  ) , child, state ) ;n.getNext (  ) , stopNode, state ) ;^289^^^^^277^300^n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^decomposeSubExpressions ( n.getNext (  ) , stopNode, state ) ;n.getNext (  ) , stopNode, state ) ;^289^^^^^277^300^n.getNext (  ) , stopNode, state ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( replacement, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n, sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe (  state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state, n.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n, state )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isSafeAssign ( n, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {     seenSideEffects = true;     requiresDecomposition = true; }^293^^^^^277^300^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {     state.sideEffects = true;     Node replacement = rewriteCallExpression ( parent, state ) ;     parent = replacement; }^293^^^^^277^300^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^state.sideEffects = false;^296^^^^^277^300^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^seenSideEffects = true;state.sideEffects = true;^296^^^^^277^300^state.sideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( left, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n, result ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression (  state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( state.extractBeforeStatement, n ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^state.extractBeforeStatement = exposeExpression ( n, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement =  extractExpression ( n, null.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = exprInjectionPoint;state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( nonconditionalExpr, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement = extractExpression ( node, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^297^298^299^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n, newExpressionRoot ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n, state ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( nonconditionalExpr, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n, needResult )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( state.sideEffects, n )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( newExpressionRoot, state.sideEffects )  )  {^293^^^^^277^300^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( subExpression, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( n, n ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = extractExpression ( state, n.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement = extractExpression ( newExpressionRoot, state.extractBeforeStatement ) ;^297^298^^^^277^300^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] decomposeSubExpressions [RETURN_TYPE] void   Node n Node stopNode DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  functionExpression  injectionPoint  injectionPointParent  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  result  stopNode  subExpression  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = last.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = expr.newString (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = node.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = left.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = n.newString (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^313^^^^^298^328^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^char tempName = getTempValueName (  ) ;^314^^^^^299^329^String tempName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^String tempName = getTempConstantValueName (  ) ;^314^^^^^299^329^String tempName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^String tempName = getTempConstantValueName (  ) ;String tempName = getTempValueName (  ) ;^314^^^^^299^329^String tempName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^String resultName = getTempValueName (  ) ;String tempName = getTempValueName (  ) ;^314^^^^^299^329^String tempName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^314^^^^^299^329^String tempName = getTempValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = expr.newString (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = nonconditionalExpr .getLastChild (  )  ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node first = expr.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node first = left.getFirstChild (  ) ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = expr .getLastChild (  )  ;^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^317^^^^^302^332^Node first = expr.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node second = n.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node second = first.newString (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node second = first .getParent (  )  ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node second = left.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node second = first.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node second = last.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node second = newExpressionRoot.getNext (  ) ;^318^^^^^303^333^Node second = first.getNext (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^318^319^^^^303^333^Node second = first.getNext (  ) ; Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node last = nonconditionalExpr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node last = expr.newString (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node last = expr .getFirstChild (  )  ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node last = expr.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node last = last.getLastChild (  ) ;^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^319^^^^^304^334^Node last = expr.getLastChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^expr.newString (  ) ;^322^^^^^307^337^expr.detachChildren (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^322^^^^^307^337^expr.detachChildren (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node falseExpr = new Node ( Token.BLOCK ) ;Node trueExpr = new Node ( Token.BLOCK ) ;^326^^^^^311^341^Node trueExpr = new Node ( Token.BLOCK ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;Node trueExpr = new Node ( Token.BLOCK ) ;^326^^^^^311^341^Node trueExpr = new Node ( Token.BLOCK ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;Node falseExpr = new Node ( Token.BLOCK ) ;^327^^^^^312^342^Node falseExpr = new Node ( Token.BLOCK ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node trueExpr = new Node ( Token.BLOCK ) ;Node falseExpr = new Node ( Token.BLOCK ) ;^327^^^^^312^342^Node falseExpr = new Node ( Token.BLOCK ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = newExpressionRoot;^331^^^^^316^346^cond = first;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^cond =  nonconditionalExpr;^331^^^^^316^346^cond = first;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^child = parent;cond = first;^331^^^^^316^346^cond = first;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( newExpressionRoot, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, sideEffects, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, needResult, tempNamePrefix ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression (  needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first,  tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, needResult ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( tempName, needResult, first ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( needResult, first, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^cond = extractConditional ( first, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^cond =  buildResultExpression ( null, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( trueExpr, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, sideEffects, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, needResult, tempNamePrefix ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression (  needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first,  tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, needResult ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( tempName, needResult, first ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, tempName, needResult ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^cond = extractConditional ( first, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^cond =  buildResultExpression ( newExpressionRoot, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression (  needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second,  tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( injectionPointParent, needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, sideEffects, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempNamePrefix )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token. buildResultExpression ( second, needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( needResult, second, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, tempName, needResult )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( second, needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( second, sideEffects, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression (  needResult, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last,  tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( left, needResult, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, sideEffects, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token. buildResultExpression ( last, needResult, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, tempName, needResult )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, needResult, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, sideEffects, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression (  needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last,  tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( injectionPointParent, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, sideEffects, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token. buildResultExpression ( last, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( tempName, needResult, last )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, sideEffects, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression (  needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last,  tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( left, needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, sideEffects, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token. buildResultExpression ( last, needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( tempName, needResult, last )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, extractConditional ( last, sideEffects, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Unexpected AST structure." )   ;^351^^^^^336^366^throw new IllegalStateException  (" ")  ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return ;^351^^^^^336^366^throw new IllegalStateException  (" ")  ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^switch  ( n.getType (  )  )  {^328^^^^^313^343^switch  ( expr.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^switch  ( expr.newString (  )  )  {^328^^^^^313^343^switch  ( expr.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^switch  ( last.getType (  )  )  {^328^^^^^313^343^switch  ( expr.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( tempName, needResult, second )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^332^333^^^^317^347^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( second, sideEffects, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( second, needResult, tempNamePrefix )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression (  needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( second,  tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( second, needResult )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( needResult, second, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( second, tempName, needResult )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( second, needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^buildResultExpression ( newExpressionRoot, needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = buildResultExpression ( first, needResult, tempName ) ;buildResultExpression ( second, needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;buildResultExpression ( second, needResult, tempName )  )  ) ;^333^^^^^318^348^buildResultExpression ( second, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^334^335^^^^319^349^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, sideEffects, tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression (  needResult, tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last,  tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( tempName, needResult, last )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, tempName, needResult )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( last, needResult, tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = buildResultExpression ( first, needResult, tempName ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^335^^^^^320^350^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( left, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( first, tempName, needResult ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;cond = buildResultExpression ( first, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;cond = buildResultExpression ( first, needResult, tempName ) ;^339^^^^^324^354^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( parent, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( needResult, last, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^trueExpr .addChildBefore ( falseExpr , n )   ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( n, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^340^341^^^^325^355^trueExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( n, needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, sideEffects, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression (  needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last,  tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( needResult, last, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, tempName, needResult )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( last, needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^extractConditional ( nonconditionalExpr, needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = buildResultExpression ( first, needResult, tempName ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^341^^^^^326^356^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( last, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^cond = buildResultExpression ( needResult, first, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^cond = extractConditional ( last, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;cond = buildResultExpression ( first, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;cond = buildResultExpression ( first, needResult, tempName ) ;^345^^^^^330^360^cond = buildResultExpression ( first, needResult, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( n, needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( needResult, last, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( last, needResult, tempName )  )  ) ;falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^346^347^^^^331^361^falseExpr.addChildToFront ( new Node ( Token.EXPR_RESULT, buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( injectionPointParent, needResult, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, sideEffects, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult, tempNamePrefix )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression (  needResult, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last,  tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, needResult )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( needResult, last, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( last, tempName, needResult )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^buildResultExpression ( tempName, needResult, last )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^extractConditional ( last, needResult, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = buildResultExpression ( first, needResult, tempName ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^buildResultExpression ( second, needResult, tempName )  )  ) ;buildResultExpression ( last, needResult, tempName )  )  ) ;^347^^^^^332^362^buildResultExpression ( last, needResult, tempName )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( node.hasChildren (  )  )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( falseExpr.newString (  )  )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( falseExpr .children (  )   )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( left.hasChildren (  )  )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( call.hasChildren (  )  )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^ifNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.IF, cond, trueExpr, falseExpr);^355^356^357^358^359^340^370^if  ( falseExpr.hasChildren (  )  )  { ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ; } else { ifNode = new Node ( Token.IF, cond, trueExpr ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^355^356^357^358^359^340^370^if  ( falseExpr.hasChildren (  )  )  { ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ; } else { ifNode = new Node ( Token.IF, cond, trueExpr ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( needResult )  {     return new Node ( ASSIGN, newString ( Token.NAME, tempName ) , expr ) ; }else {     return expr; }^355^^^^^340^370^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF,  trueExpr ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF, cond ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, subExpression, trueExpr ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token. cond, trueExpr ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^ifNode =  new Node ( Token.IF, left, trueExpr ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, replacement, trueExpr ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, left ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, trueExpr, cond ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^ifNode = new Node ( Token.IF, cond, replacement ) ;^358^^^^^355^359^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF,  trueExpr, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF, cond,  falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, newExpressionRoot, trueExpr, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, injectionPointParent, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, trueExpr, left ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token. cond, trueExpr, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, falseExpr, trueExpr, cond ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, falseExpr, trueExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, tempVarNode, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, trueExpr, newExpressionRoot ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^ifNode = new Node ( Token.IF, last, trueExpr, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, n, trueExpr, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, last, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, trueExpr, cond, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF,  trueExpr ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^ifNode = new Node ( Token.IF, cond ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, last, trueExpr ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, last ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token. cond, trueExpr ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, trueExpr, cond ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^ifNode =  new Node ( Token.IF, n, trueExpr ) ;^358^^^^^343^373^ifNode = new Node ( Token.IF, cond, trueExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^ifNode = new Node ( Token.IF, cond, node, falseExpr ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^ifNode = new Node ( Token.IF, cond, trueExpr, node ) ;^356^^^^^341^371^ifNode = new Node ( Token.IF, cond, trueExpr, falseExpr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( last.newString (  )  )  {^355^^^^^340^370^if  ( falseExpr.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( sideEffects )  {^361^^^^^346^376^if  ( needResult )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node gramps = newExpressionRoot.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node gramps = parent.newString (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node gramps = parent .getNext (  )  ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node gramps = node.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int type = left.getType (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkArgument ( parent.getType (  )  != Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( last.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( parent.newString (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( injectionPointParent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( parent .getParent (  )   == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( left.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^361^377^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node gramps = injectionPointParent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^361^377^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( last, ifNode ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, second ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild (  ifNode ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( ifNode, parent ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^gramps .replaceChild ( child )  ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^gramps.replaceChild ( parent, last ) ;^376^^^^^361^377^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^376^377^^^^361^377^gramps.replaceChild ( parent, ifNode ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempNamePrefix )  ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME )  ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token. Node.newString ( Token.NAME, tempName )  ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node tempVarNode = new Node ( Token.VAR, Node.replaceChild ( Token.NAME, tempName )  ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node tempVarNode = new Node ( Token.VAR, Node.replaceChild ( Token.NAME, tempNamePrefix )  ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( needResult )  {     return new Node ( ASSIGN, newString ( Token.NAME, tempName ) , expr ) ; }else {     return expr; }^362^^^^^347^377^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( falseExpr.hasChildren (  )  )  {     ifNode = new Node ( IF, cond, trueExpr, falseExpr ) ; }else {     ifNode = new Node ( IF, cond, trueExpr ) ; }^362^^^^^347^377^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint.newString (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint .getNext (  )  ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacementParent = injectionPoint .getNext (  )  ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacementValueNode = Node.replaceChild ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacementValueNode = Node .toStringTree (  )  ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacementValueNode = Node.newString ( Token.NAME, tempNamePrefix ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node.newString ( Token.NAME, tempNamePrefix )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node.replaceChild ( Token.NAME, tempName )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;Node.newString ( Token.NAME, tempName )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName ) , expr ) ;Node.newString ( Token.NAME, tempName )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;Node.newString ( Token.NAME, tempName )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;Node.newString ( Token.NAME, tempName )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node leftParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node lastParent = injectionPoint.newString (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^364^365^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ; injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( last, injectionPoint ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( tempVarNode, newExpressionRoot ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore (  injectionPoint ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( tempVarNode ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( injectionPoint, tempVarNode ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPointParent .addChildToFront ( gramps )  ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter ( newExpressionRoot, tempVarNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter (  tempVarNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter ( ifNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter ( tempVarNode, ifNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^injectionPointParent .addChildBefore ( second , injectionPoint )  ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPointParent.addChildAfter ( left, tempVarNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^369^^^^^354^384^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( last, replacementValueNode ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( expr, second ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild (  replacementValueNode ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( expr ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( replacementValueNode, expr ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent.replaceChild ( expr, nonconditionalExpr ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^callParent.replaceChild ( call, newCall ) ;parent.replaceChild ( expr, replacementValueNode ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, ifNode ) ;parent.replaceChild ( expr, replacementValueNode ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node tempVarNode = new Node ( Token.VAR, Node .toStringTree (  )   ) ;^362^363^^^^347^377^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node gramps = nonconditionalExpr.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node gramps = parent.newString (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node gramps = n.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int type = left.getType (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int parentType = parent.getType (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node.replaceChild ( Token.NAME, tempNamePrefix )  ) ;^363^^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^363^364^^^^348^378^Node.newString ( Token.NAME, tempName )  ) ; Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node newExpressionRootParent = injectionPoint.getParent (  ) ;^364^^^^^349^379^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( replacement, injectionPoint ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( tempVarNode, left ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^injectionPointParent .addChildToFront ( last )  ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPointParent.addChildBefore ( tempVarNode, last ) ;^365^^^^^350^380^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter ( last, tempVarNode ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildAfter ( ifNode, newExpressionRoot ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPointParent.addChildAfter ( ifNode, last ) ;^366^^^^^351^381^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( newExpressionRoot, replacementValueNode ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( expr, newExpressionRoot ) ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent .replaceChild ( functionExpression )  ;^370^^^^^355^385^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkArgument ( parent.getType (  )  != Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( injectionPointParent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( parent.newString (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^374^375^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ; Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^boolean needResult = parent.getType (  )  != Token.EXPR_RESULT;Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( n.getType (  )  == Token.EXPR_RESULT ) ;^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^374^^^^^359^389^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node gramps = last.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node gramps = left.newString (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node gramps = parent.getParent (  ) ;^375^^^^^360^390^Node gramps = parent.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( nonconditionalExpr, ifNode ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent, replacement ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild (  ifNode ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( parent ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^gramps.replaceChild ( ifNode, parent ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^gramps .replaceChild ( gramps )  ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^gramps.replaceChild ( parent, stopNode ) ;^376^^^^^361^391^gramps.replaceChild ( parent, ifNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^376^377^^^^361^391^gramps.replaceChild ( parent, ifNode ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return newExpressionRoot;^379^^^^^364^394^return ifNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractConditional [RETURN_TYPE] Node   Node expr Node injectionPoint boolean needResult [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( sideEffects )  {^393^^^^^391^400^if  ( needResult )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( falseExpr.hasChildren (  )  )  {     ifNode = new Node ( IF, cond, trueExpr, falseExpr ) ; }else {     ifNode = new Node ( IF, cond, trueExpr ) ; }^393^^^^^391^400^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return last;^398^^^^^391^400^return expr;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME ) , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName )  ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempNamePrefix ) , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , last ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return new Node ( Token. Node.newString ( Token.NAME, tempName ) , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, expr ) , tempName ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return new Node ( Token.ASSIGN, Node.replaceChild ( Token.NAME, tempName ) , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return new Node ( Token.ASSIGN, Node .toStringTree (  )  , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( needResult )  {     return new Node ( ASSIGN, newString ( Token.NAME, tempName ) , expr ) ; }else {     return expr; }^394^^^^^391^400^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node.replaceChild ( Token.NAME, tempName ) , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node .toStringTree (  )  , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node.newString ( Token.NAME, tempNamePrefix ) , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;Node.newString ( Token.NAME, tempName ) , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName )  ) ;Node.newString ( Token.NAME, tempName ) , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;Node.newString ( Token.NAME, tempName ) , expr ) ;^395^396^^^^391^400^Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , left ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return new Node ( Token.ASSIGN, Node.replaceChild ( Token.NAME, tempNamePrefix ) , expr ) ;^394^395^396^^^391^400^return new Node ( Token.ASSIGN, Node.newString ( Token.NAME, tempName ) , expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return newExpressionRoot;^398^^^^^391^400^return expr;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] buildResultExpression [RETURN_TYPE] Node   Node expr boolean needResult String tempName [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = n.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = expr.newString (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = newExpressionRoot.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node parent = expr.getParent (  ) ;^409^^^^^408^426^Node parent = expr.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^char tempName = getTempConstantValueName (  ) ;^411^^^^^408^426^String tempName = getTempConstantValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^String tempName = getTempValueName (  ) ;^411^^^^^408^426^String tempName = getTempConstantValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^String tempName = getTempValueName (  ) ;String tempName = getTempConstantValueName (  ) ;^411^^^^^408^426^String tempName = getTempConstantValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^String resultName = getTempValueName (  ) ;String tempName = getTempConstantValueName (  ) ;^411^^^^^408^426^String tempName = getTempConstantValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^411^^^^^408^426^String tempName = getTempConstantValueName (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node replacementValueNode = Node.newString ( Token.NAME, tempNamePrefix ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node replacementValueNode = Node.replaceChild ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node replacementValueNode = Node.replaceChild ( Token.NAME, tempNamePrefix ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^414^^^^^408^426^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( expr, replacement ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild (  replacementValueNode ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( expr ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent.replaceChild ( replacementValueNode, expr ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent .replaceChild ( nonconditionalExpr )  ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^callParent.replaceChild ( call, newCall ) ;parent.replaceChild ( expr, replacementValueNode ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, ifNode ) ;parent.replaceChild ( expr, replacementValueNode ) ;^415^^^^^408^426^parent.replaceChild ( expr, replacementValueNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempNamePrefixNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node tempNameNode = Node.replaceChild ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node tempNameNode = Node .toStringTree (  )  ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node tempNamePrefixNode = Node.replaceChild ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expressionParent.replaceChild ( expression, Node.newString ( Token.NAME, resultName )  ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName ) , expr ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, tempName )  ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^expression, Node.newString ( Token.NAME, resultName )  ) ;Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^418^^^^^408^426^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^tempNameNode.addChildrenToBack ( left ) ;^419^^^^^408^426^tempNameNode.addChildrenToBack ( expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^tempNameNode.addChildBefore ( expr ) ;^419^^^^^408^426^tempNameNode.addChildrenToBack ( expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^tempNameNode .addChildrenToBack ( tempNameNode )  ;^419^^^^^408^426^tempNameNode.addChildrenToBack ( expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^419^^^^^408^426^tempNameNode.addChildrenToBack ( expr ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token.VAR, left ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token.VAR ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node tempVarNode = new Node ( Token. tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node tempVarNode = new Node ( Token.VAR, last ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node tempVarNode = new Node ( Token.VAR, n ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempNameNode = Node.newString ( Token.NAME, tempName ) ;Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node falseExpr = new Node ( Token.BLOCK ) ;Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node tempVarNode = new Node ( Token.VAR, Node.newString ( Token.NAME, tempName )  ) ;Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node trueExpr = new Node ( Token.BLOCK ) ;Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node replacementValueNode = Node.newString ( Token.NAME, tempName ) ;Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^420^^^^^408^426^Node tempVarNode = new Node ( Token.VAR, tempNameNode ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node newExpressionRootParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint.newString (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node nParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node leftParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node injectionPointParent = injectionPoint .getNext (  )  ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parentParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node injectionPointParent = injectionPoint.getParent (  ) ;^422^^^^^408^426^Node injectionPointParent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( n, injectionPoint ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore (  injectionPoint ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( tempVarNode ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPointParent.addChildBefore ( injectionPoint, tempVarNode ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^injectionPointParent .addChildToFront ( injectionPoint )  ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPointParent.addChildBefore ( tempVarNode, n ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^423^424^425^426^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;  return tempVarNode; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildAfter ( ifNode, tempVarNode ) ;injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^injectionPointParent.addChildBefore ( newExpressionRoot, injectionPoint ) ;injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^423^^^^^408^426^injectionPointParent.addChildBefore ( tempVarNode, injectionPoint ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return trueExpr;^425^^^^^408^426^return tempVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return replacementValueNode;^425^^^^^408^426^return tempVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] extractExpression [RETURN_TYPE] Node   Node expr Node injectionPoint [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkArgument ( call.getType (  )  != Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( last.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( call.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( call.newString (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( call .getParent (  )   == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( left.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^439^440^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ; Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( n.getType (  )  == Token.CALL ) ;^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^439^^^^^424^454^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node first = n.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = call.newString (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = call .getLastChild (  )  ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = newExpressionRoot.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node first = call.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node first = newCall.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = left.getFirstChild (  ) ;^440^^^^^425^455^Node first = call.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^440^441^^^^425^455^Node first = call.getFirstChild (  ) ; Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGet ( left )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGet ( first )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isStatementBlock ( first )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isGet ( n )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGet ( newCall )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isGet ( nonconditionalExpr )  ) ;^441^^^^^426^456^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( newCall, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( first, newExpressionRoot ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression (  state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( first.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( first ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( state.extractBeforeStatement, first ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( state, first.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node getVarNode = exposeExpression ( first, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node getVarNode = exposeExpression ( left, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( last, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( first, state.extractBeforeStatement.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getVarNode = extractExpression ( first, state ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^445^446^^^^430^460^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = second;^447^^^^^432^462^state.extractBeforeStatement = getVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement =  getVarNode;^447^^^^^432^462^state.extractBeforeStatement = getVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = thisVarNode;state.extractBeforeStatement = getVarNode;^447^^^^^432^462^state.extractBeforeStatement = getVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = exprInjectionPoint;state.extractBeforeStatement = getVarNode;^447^^^^^432^462^state.extractBeforeStatement = getVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getExprNode = node.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node getExprNode = getVarNode.newString (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node getExprNode = getVarNode .getLastChild (  )^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node getExprNode = n.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getExprNode = newExpressionRoot.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node getExprNode = left.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^451^452^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ; Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node getExprNode = newCall.getFirstChild (  ) .getFirstChild (  ) ;^451^^^^^436^466^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGet ( last )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil.isStatementBlock ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( call.getType (  )  == Token.CALL ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( parent.getType (  )  == Token.EXPR_RESULT ) ;Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( NodeUtil.isGet ( n )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( NodeUtil .isStatementBlock ( newCall )   ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( NodeUtil.isGet ( left )  ) ;^452^^^^^437^467^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( n.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) .extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  )  ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( state.getFirstChild (  ) , getExprNode.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node thisVarNode = exposeExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node thisVarNode = extractExpression ( getExprNode.newString (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node thisVarNode = extractExpression ( newCall.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( newExpressionRoot.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , left ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisVarNode = extractExpression ( state.extractBeforeStatement.getFirstChild (  ) , getExprNode ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node thisVarNode = extractExpression ( getExprNode .getLastChild (  )  , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^453^454^^^^438^468^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^getExprNode.newString (  ) , state.extractBeforeStatement ) ;^454^^^^^439^469^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node getVarNode = extractExpression ( first, state.extractBeforeStatement ) ;getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^454^^^^^439^469^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.getFirstChild (  ) , child, state ) ;getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^454^^^^^439^469^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = extractExpression ( n, state.extractBeforeStatement ) ;getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^454^^^^^439^469^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisVarNode = extractExpression ( getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^454^^^^^439^469^getExprNode.getFirstChild (  ) , state.extractBeforeStatement ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^state.extractBeforeStatement = newCall;^455^^^^^440^470^state.extractBeforeStatement = thisVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^state.extractBeforeStatement =  thisVarNode;^455^^^^^440^470^state.extractBeforeStatement = thisVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = getVarNode;state.extractBeforeStatement = thisVarNode;^455^^^^^440^470^state.extractBeforeStatement = thisVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.extractBeforeStatement = exprInjectionPoint;state.extractBeforeStatement = thisVarNode;^455^^^^^440^470^state.extractBeforeStatement = thisVarNode;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisNameNode = injectionPointParent.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node thisNameNode = thisVarNode.newString (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node thisNameNode = last .getLastChild (  )  ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node thisNameNode = thisVarNode.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node thisNameNode = n.getFirstChild (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node thisNameNode = replacement.newString (  ) ;^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^458^^^^^443^473^Node thisNameNode = thisVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionNameNode = newCall.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionNameNode = getVarNode.newString (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node functionNameNode = getVarNode .getLastChild (  )  ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionNameNode = node.newString (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node getExprNode = getVarNode.getFirstChild (  ) .getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node functionNameNode = getVarNode.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node functionNameNode = left.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node functionNameNode = last.getFirstChild (  ) ;^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^459^^^^^444^474^Node functionNameNode = getVarNode.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP.cloneNode (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, nonconditionalExpr.cloneNode (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node newCall = new Node ( Token. new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node newCall = new Node ( Token.CALL, new Node ( Token. functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.newString (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.replaceChild ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, last.cloneNode (  ) , Node.newString ( "call" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "callc" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^new Node ( Token.GETPROP, newExpressionRoot.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^new Node ( Token.GETPROP.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^new Node ( Token. functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, functionNameNode.newString (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.replaceChild ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node .toStringTree (  )   ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^new Node ( Token.GETPROP, newCall.newString (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^470^471^472^473^^455^485^new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "caall" )  ) ,^469^470^471^472^^454^484^Node newCall = new Node ( Token.CALL, new Node ( Token.GETPROP, functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) ,^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^functionNameNode.newString (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^471^472^473^^^456^486^functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^471^472^473^^^456^486^functionNameNode.cloneNode (  ) , Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node.replaceChild ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^472^473^^^^457^487^Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^472^473^^^^457^487^Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^472^473^^^^457^487^Node.newString ( "call" )  ) , thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^thisNameNode.newString (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^thisNameNode .addChildBefore ( replacement , injectionPoint )  , call.getLineno (  ) , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^thisNameNode.cloneNode (  ) , node.getLineno (  ) , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^thisNameNode.cloneNode (  ) , call.newString (  ) , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^thisNameNode.cloneNode (  ) , newCall .getParent (  )  , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^thisNameNode.cloneNode (  ) , last.getLineno (  ) , call.getCharno (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.newString (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call .getParent (  )   ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^thisNameNode.cloneNode (  ) , result.getLineno (  ) , call.newString (  )  ) ;^473^^^^^458^488^thisNameNode.cloneNode (  ) , call.getLineno (  ) , call.getCharno (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^call.newString (  ) ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^call .getFirstChild (  )  ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;call.removeFirstChild (  ) ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;call.removeFirstChild (  ) ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;call.removeFirstChild (  ) ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;call.removeFirstChild (  ) ;^476^^^^^461^491^call.removeFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left.hasChildren (  )  )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( call.newString (  )  )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( call .children (  )   )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( nonconditionalExpr.hasChildren (  )  )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( falseExpr.hasChildren (  )  )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^newCall.addChildrenToBack(call.removeChildren());^477^478^479^480^^462^492^if  ( call.hasChildren (  )  )  {  newCall.addChildrenToBack ( call.removeChildren (  )  ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^477^478^479^480^^462^492^if  ( call.hasChildren (  )  )  {  newCall.addChildrenToBack ( call.removeChildren (  )  ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^newCall.addChildrenToBack ( parent.removeChildren (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^newCall.addChildAfter ( call.removeChildren (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^newCall.addChildrenToBack ( call.newString (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^newCall.addChildrenToBack ( n.removeChildren (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^newCall.addChildrenToBack ( call .detachChildren (  )   ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^newCall.addChildrenToBack ( left.removeChildren (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( last.hasChildren (  )  )  {^477^^^^^462^492^if  ( call.hasChildren (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^newCall.addChildrenToBack ( last.newString (  )  ) ;^479^^^^^464^494^newCall.addChildrenToBack ( call.removeChildren (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nonconditionalExprParent = call.getParent (  ) ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node callParent = call.newString (  ) ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node callParent = call .getNext (  )  ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node newCallParent = call.newString (  ) ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node nParent = call.getParent (  ) ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node nodeParent = call.getParent (  ) ;^483^^^^^468^498^Node callParent = call.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^483^484^^^^468^498^Node callParent = call.getParent (  ) ; callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^callParent.replaceChild ( nonconditionalExpr, newCall ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^callParent.replaceChild ( call, newExpressionRoot ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^callParent.replaceChild (  newCall ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^callParent.replaceChild ( call ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^callParent.replaceChild ( newCall, call ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^callParent.replaceChild ( call, last ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent.replaceChild ( expr, replacementValueNode ) ;callParent.replaceChild ( call, newCall ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^gramps.replaceChild ( parent, ifNode ) ;callParent.replaceChild ( call, newCall ) ;^484^^^^^469^499^callParent.replaceChild ( call, newCall ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return injectionPointParent;^486^^^^^471^501^return newCall;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return left;^486^^^^^471^501^return newCall;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] rewriteCallExpression [RETURN_TYPE] Node   Node call DecompositionState state [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  DecompositionState  state  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^this.tempNamePrefix = tempName;^496^^^^^495^497^this.tempNamePrefix = tempNamePrefix;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] setTempNamePrefix [RETURN_TYPE] void   String tempNamePrefix [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^return tempNamePrefix + safeNameIdSupplier.get (  <<  ) ;^503^^^^^502^504^return tempNamePrefix + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return tempName + safeNameIdSupplier.get (  ) ;^503^^^^^502^504^return tempNamePrefix + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return safeNameIdSupplier + tempNamePrefix.get (  ) ;^503^^^^^502^504^return tempNamePrefix + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return false ;^503^^^^^502^504^return tempNamePrefix + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^503^^^^^502^504^return tempNamePrefix + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^char sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  >=  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^String sName = tempNamePrefix  &  "const_" + safeNameIdSupplier.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^String sName = tempNamePrefix + "const_o" + safeNameIdSupplier.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^String sName = tempName + "const_" + safeNameIdSupplier.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^String sName = tempNamePrefix + "const_" + 3.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^String sName = safeNameIdSupplier + "const_" + tempNamePrefix.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^String sName = tempNamePrefix + "const_" + 2.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return tempNamePrefix + safeNameIdSupplier.get (  ) ;String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^510^^^^^509^513^String sName = tempNamePrefix + "const_" + safeNameIdSupplier.get (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^this.knownConstants.add ( tempNamePrefix ) ;^511^^^^^509^513^this.knownConstants.add ( sName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^511^^^^^509^513^this.knownConstants.add ( sName ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return tempNamePrefix;^512^^^^^509^513^return sName;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] getTempConstantValueName [RETURN_TYPE] String   [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node expressionRoot = findExpressionRoot ( last ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node expressionRoot = moveExpression ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node expressionRoot = moveExpression ( left ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^520^521^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ; Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return isSubexpressionMovable ( expressionRoot, subExpression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^exposeExpression ( expressionRoot, expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^exposeExpression ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^520^^^^^519^534^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkNotNull ( nonconditionalExpr ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkNotNull ( last ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( constNames ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( compiler ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPoint ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkNotNull ( expressionRoot ) ;^521^^^^^519^534^Preconditions.checkNotNull ( expressionRoot ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node injectionPoint = second;^523^^^^^519^534^Node injectionPoint = expressionRoot;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node injectionPoint = n;^523^^^^^519^534^Node injectionPoint = expressionRoot;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node injectionPoint = expressionRoot;^523^^^^^519^534^Node injectionPoint = expressionRoot;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node injectionPoint = expressionRoot;^523^^^^^519^534^Node injectionPoint = expressionRoot;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = n.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node parent = injectionPoint.newString (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = node .getNext (  )  ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node callParent = call.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node parent = last.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node parent = last.newString (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;Node parent = injectionPoint.getParent (  ) ;^525^^^^^519^534^Node parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^while  ( parent.getType (  )  >= Token.LABEL )  {^526^^^^^519^534^while  ( parent.getType (  )  == Token.LABEL )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^while  ( injectionPointParent.getType (  )  == Token.LABEL )  {^526^^^^^519^534^while  ( parent.getType (  )  == Token.LABEL )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^while  ( parent.newString (  )  == Token.LABEL )  {^526^^^^^519^534^while  ( parent.getType (  )  == Token.LABEL )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^while  ( last.newString (  )  == Token.LABEL )  {^526^^^^^519^534^while  ( parent.getType (  )  == Token.LABEL )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPoint = last;^527^^^^^519^534^injectionPoint = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^injectionPoint =  left;^527^^^^^519^534^injectionPoint = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;injectionPoint = parent;^527^^^^^519^534^injectionPoint = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = last.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent = injectionPoint.newString (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent =  null.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^injectionPoint = parent;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = newExpressionRoot.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^parent = injectionPoint .getNext (  )  ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^parent = last.newString (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = nonconditionalExpr.getParent (  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;parent = injectionPoint.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^injectionPoint = injectionPointParent;^527^^^^^519^534^injectionPoint = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^526^527^^^^519^534^while  ( parent.getType (  )  == Token.LABEL )  { injectionPoint = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^parent = newCall.getParent (  ) ;^528^^^^^519^534^parent = injectionPoint.getParent (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( left.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )   ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.newString (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint .getNext (  )   )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkNotNull ( NodeUtil.isStatementBlock ( left.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( injectionPointParent ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( getExprNode )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^531^532^^^^519^534^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^NodeUtil.isStatementBlock ( last.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^NodeUtil .isGet ( ifNode )   ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^NodeUtil.isStatementBlock ( injectionPoint.newString (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^parent = injectionPoint.getParent (  ) ;NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPointParent = injectionPoint.getParent (  ) ;NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = injectionPoint.getParent (  ) ;NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^NodeUtil.isStatementBlock ( left.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^NodeUtil.isStatementBlock ( injectionPoint .getNext (  )   )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^NodeUtil.isStatementBlock ( newExpressionRoot.getParent (  )  )  ) ;^532^^^^^519^534^NodeUtil.isStatementBlock ( injectionPoint.getParent (  )  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return last;^533^^^^^519^534^return injectionPoint;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findInjectionPoint [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^return false;^544^^^^^539^548^return true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^return true;^546^^^^^539^548^return false;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^switch ( nonconditionalExpr.getType (  )  )  {^540^^^^^539^548^switch ( n.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^switch ( n.newString (  )  )  {^540^^^^^539^548^switch ( n.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^switch ( n .getParent (  )   )  {^540^^^^^539^548^switch ( n.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^switch ( newCall.getType (  )  )  {^540^^^^^539^548^switch ( n.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isConditionalOp [RETURN_TYPE] boolean   Node n [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node child = newExpressionRoot;^556^^^^^555^583^Node child = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node result = subExpression;Node child = subExpression;^556^^^^^555^583^Node child = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = node;^579^^^^^555^583^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  last;^579^^^^^555^583^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = first;child = parent;^579^^^^^555^583^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^result = parent;child = parent;^579^^^^^555^583^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return left;^570^^^^^555^583^return parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return this;^577^^^^^555^583^return null;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int nType = parent.getType (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int parentType = parent.newString (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int parentType = parent .getParent (  )  ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int nonconditionalExprType = parent .getParent (  )  ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int parentType = parent.getType (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int type = left.getType (  ) ;int parentType = parent.getType (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node parent : left.getAncestors (  )  )  {^557^^^^^555^583^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node parent : child.newString (  )  )  {^557^^^^^555^583^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int lastType = parent.getType (  ) ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int lastType = parent .getParent (  )  ;^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^558^^^^^555^583^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^Preconditions.checkState ( child <= parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( n == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( child == newExpressionRoot.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( parent == child.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( compiler )  ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( child == parent.newString (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Preconditions.checkState ( child == parent .getLastChild (  )   ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Preconditions.checkState ( last == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( injectionPointParent )  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( left )  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( safeNameIdSupplier ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^!isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( NodeUtil.isGet ( first )  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !isConditionalOp ( parent )  || child == parent.getFirstChild (  )  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( expressionRoot != null ) ;Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Preconditions.checkState ( child == parent.getFirstChild (  )  ) ; return parent; }^569^570^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ; return parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Preconditions.checkState ( child == newCall.getFirstChild (  )  ) ;^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^569^570^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ; return parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Preconditions.checkState ( child == parent.getFirstChild (  )  ) ; }^569^^^^^555^583^Preconditions.checkState ( child == parent.getFirstChild (  )  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Unexpected." )   ;^582^^^^^555^583^throw new IllegalStateException  (" ")  ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] findExpressionRoot [RETURN_TYPE] Node   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node expressionRoot = findExpressionRoot ( newExpressionRoot ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node expressionRoot = moveExpression ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node expressionRoot = findExpressionRoot ( result ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node injectionPoint = findInjectionPoint ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node newExpressionRoot = NodeUtil.newVarNode ( resultName, expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionRoot = findExpressionRoot ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node exprInjectionPoint = findInjectionPoint ( nonconditionalExpr ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node expressionParent = expression.getParent (  ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node expressionRoot = findExpressionRoot ( newCall ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node expressionRoot = moveExpression ( injectionPointParent ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return isSubexpressionMovable ( expressionRoot, subExpression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^exposeExpression ( expressionRoot, expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^exposeExpression ( expression ) ;Node expressionRoot = findExpressionRoot ( subExpression ) ;^611^^^^^610^616^Node expressionRoot = findExpressionRoot ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( expressionRoot == null )  {^612^^^^^610^616^if  ( expressionRoot != null )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( newExpressionRoot != null )  {^612^^^^^610^616^if  ( expressionRoot != null )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( expressionRoot != false )  {^612^^^^^610^616^if  ( expressionRoot != null )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^return isSubexpressionMovable(expressionRoot, subExpression);^612^613^614^^^610^616^if  ( expressionRoot != null )  { return isSubexpressionMovable ( expressionRoot, subExpression ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^612^613^614^^^610^616^if  ( expressionRoot != null )  { return isSubexpressionMovable ( expressionRoot, subExpression ) ; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( left, subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( expressionRoot, n ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable (  subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( expressionRoot ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( subExpression, expressionRoot ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return exposeExpression ( expressionRoot, subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( expressionRoot != null )  {     return isSubexpressionMovable ( expressionRoot, subExpression ) ; }^613^^^^^610^616^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( n, subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( expressionRoot, node ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return exposeExpression ( left, subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( last, subExpression ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( expressionRoot, last ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return exposeExpression ( expressionRoot, last ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return isSubexpressionMovable ( expressionRoot, tempVarNode ) ;^613^^^^^610^616^return isSubexpressionMovable ( expressionRoot, subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] canExposeExpression [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^boolean requiresDecomposition = true;^646^^^^^631^661^boolean requiresDecomposition = false;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^boolean seenSideEffects = NodeUtil.isStatementBlock ( subExpression ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( injectionPointParent ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects ( nonconditionalExpr ) ;boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( n ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( last ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^return NodeUtil.mayHaveSideEffects ( n ) ;boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^647^^^^^632^662^boolean seenSideEffects = NodeUtil.mayHaveSideEffects ( subExpression ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node child = left;^649^^^^^634^664^Node child = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node result = subExpression;Node child = subExpression;^649^^^^^634^664^Node child = subExpression;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( parent >= expressionRoot )  {^651^^^^^636^666^if  ( parent == expressionRoot )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( last == expressionRoot )  {^651^^^^^636^666^if  ( parent == expressionRoot )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parent == newExpressionRoot )  {^651^^^^^636^666^if  ( parent == expressionRoot )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( expressionRoot == parent )  {^651^^^^^636^666^if  ( parent == expressionRoot )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( maybeExternMethod ( first )  )  {     return UNDECOMPOSABLE; }else {     return DECOMPOSABLE; }^651^^^^^636^666^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return sideEffects ? DecompositionType.DECOMPOSABLE : DecompositionType.MOVABLE;^654^655^656^^^639^669^return requiresDecomposition ? DecompositionType.DECOMPOSABLE : DecompositionType.MOVABLE;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return requiresDecomposition ? DecompositionType.UNDECOMPOSABLE : DecompositionType.MOVABLE;^654^655^656^^^639^669^return requiresDecomposition ? DecompositionType.DECOMPOSABLE : DecompositionType.MOVABLE;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( injectionPointParent )  )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( n == child )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( requiresDecomposition && (parent.getType() == CALL) && isGet(first) )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( (requiresDecomposition && parent.getType() == CALL) )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CALL )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( findInjectionPoint ( parent )  )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isConditionalOp ( left )  )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^if (child != (parent.getFirstChild())) {    requiresDecomposition = true;};^661^662^^664^665^646^676^if  ( isConditionalOp ( parent )  )  {  if  ( child != parent.getFirstChild (  )  )  { requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^661^662^^664^665^646^676^if  ( isConditionalOp ( parent )  )  {  if  ( child != parent.getFirstChild (  )  )  { requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( left, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent, requiresDecomposition )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssignode ( parent, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign (  seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( parent )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( requiresDecomposition && (parent.getType() == CALL) && isGet(first) )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( (requiresDecomposition && parent.getType() == CALL) )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CALL )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isExpressionTreeUnsafe ( parent, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( parent, sideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isSafeAssign ( parent, state.sideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( n >= child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( left == child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( n == left )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child == n )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( n == newExpressionRoot )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( left != child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^break;^689^690^^692^693^674^704^if  ( n == child )  {  break; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^689^690^^692^693^674^704^if  ( n == child )  {  break; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( newCall, seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n, requiresDecomposition )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe (  seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( n )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( seenSideEffects, n )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( isSafeAssign ( n, seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isExpressionTreeUnsafe ( n, sideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^seenSideEffects = true; requiresDecomposition = true;^695^696^697^698^699^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  { seenSideEffects = true; requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^695^696^697^698^699^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  { seenSideEffects = true; requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^seenSideEffects = false;^697^^^^^695^699^seenSideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.sideEffects = true;seenSideEffects = true;^697^^^^^695^699^seenSideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^requiresDecomposition = false;^698^^^^^695^699^requiresDecomposition = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( requiresDecomposition || parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( requiresDecomposition && parent.getType (  )  != Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( seenSideEffects && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && last.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( last )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && first.getType (  )  == Token.CALL && NodeUtil.isGet ( parent )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( requiresDecomposition ) {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( (requiresDecomposition && parent.getType() == CALL) )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CALL )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( requiresDecomposition && parent.newString (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isStatementBlock ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( sideEffects ) {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( maybeExternMethod ( first )  )  {     return UNDECOMPOSABLE; }else {     return DECOMPOSABLE; }^718^^^^^703^733^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( maybeExternMethod ( last )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( moveExpression ( first )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( maybeExternMethod ( newExpressionRoot )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE;^721^722^723^724^725^718^726^if  ( maybeExternMethod ( first )  )  { return DecompositionType.UNDECOMPOSABLE; } else { return DecompositionType.DECOMPOSABLE; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^721^722^723^724^725^718^726^if  ( maybeExternMethod ( first )  )  { return DecompositionType.UNDECOMPOSABLE; } else { return DecompositionType.DECOMPOSABLE; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( parent == expressionRoot )  {     return requiresDecomposition ? DECOMPOSABLE : MOVABLE; }^721^^^^^718^726^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  (  ( requiresDecomposition &&  (  ( parent.getType (  )  )  ==  ( CALL )  )  )  &&  ( isGet ( first )  )  )  {     if  ( maybeExternMethod ( first )  )  {         return UNDECOMPOSABLE;     }else {         return DECOMPOSABLE;     } }^721^^^^^718^726^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( followingSideEffectsExist )  {     return canBeSideEffected ( n, this.knownConstants ) ; }else {     return mayHaveSideEffects ( n ) ; }^721^^^^^718^726^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( maybeExternMethod ( left )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( maybeExternMethod ( n )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( moveExpression ( first )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( maybeExternMethod ( left )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^return com.google.javascript.jscomp.ExpressionDecomposer.DecompositionType.UNDECOMPOSABLE;^721^722^723^724^725^706^736^if  ( maybeExternMethod ( first )  )  { return DecompositionType.UNDECOMPOSABLE; } else { return DecompositionType.DECOMPOSABLE; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^721^722^723^724^725^706^736^if  ( maybeExternMethod ( first )  )  { return DecompositionType.UNDECOMPOSABLE; } else { return DecompositionType.DECOMPOSABLE; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( parent == expressionRoot )  {     return requiresDecomposition ? DECOMPOSABLE : MOVABLE; }^721^^^^^706^736^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  (  ( requiresDecomposition &&  (  ( parent.getType (  )  )  ==  ( CALL )  )  )  &&  ( isGet ( first )  )  )  {     if  ( maybeExternMethod ( first )  )  {         return UNDECOMPOSABLE;     }else {         return DECOMPOSABLE;     } }^721^^^^^706^736^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( followingSideEffectsExist )  {     return canBeSideEffected ( n, this.knownConstants ) ; }else {     return mayHaveSideEffects ( n ) ; }^721^^^^^706^736^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^seenSideEffects = false;^697^^^^^682^712^seenSideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^state.sideEffects = true;seenSideEffects = true;^697^^^^^682^712^seenSideEffects = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^requiresDecomposition = false;^698^^^^^683^713^requiresDecomposition = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node first = last.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = parent.newString (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = n.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node second = first.getNext (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node parent = expr.getParent (  ) ;Node first = parent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( !maybeExternMethod ( parent.getFirstChild (  )  )  )  { Node first = parent.getFirstChild (  ) ; }^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node first = parent.getFirstChild (  ) ; }^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node n : last.children (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node n : parent.newString (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node n : tempNameNode.children (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^688^689^^^692^673^703^for  ( Node n : parent.children (  )  )  { if  ( n == child )  { break; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( injectionPointParent, seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( n, requiresDecomposition )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node first = left.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node first = parent .getLastChild (  )  ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = newCall .getLastChild (  )  ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& newCall.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& parent.newString (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& parent .getParent (  )   == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& injectionPointParent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( newCall )  )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil.isStatementBlock ( first )  )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil .isStatementBlock ( result )   )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil.isGet ( n )  )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^720^721^722^^^705^735^&& NodeUtil.isGet ( first )  )  { if  ( maybeExternMethod ( first )  )  { return DecompositionType.UNDECOMPOSABLE;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( maybeExternMethod ( last )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parent == child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( n == last )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( requiresDecomposition && parent.getType (  )  >= Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( sideEffects && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && newCall.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( requiresDecomposition && parent .getParent (  )   == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  (  parent.getType (  )  == Token.CALL && NodeUtil.isGet ( last )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( maybeExternMethod ( newCall )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( moveExpression ( n )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = newCall.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( seenSideEffects, parent )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isSafeAssign ( injectionPointParent, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node n : injectionPointParent.children (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isExpressionTreeUnsafe ( result, seenSideEffects )  )  {^695^696^^^^680^710^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = injectionPointParent.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& left.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& n.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& NodeUtil .isStatementBlock ( functionExpression )   )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& NodeUtil.isGet ( nonconditionalExpr )  )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( child == parent.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( n != parent.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != nonconditionalExpr.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( parent != child.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( child != parent.newString (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( child != parent .getLastChild (  )   )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != newExpressionRoot.newString (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P15_Unwrap_Block]^requiresDecomposition = true;^664^665^666^^^649^679^if  ( child != parent.getFirstChild (  )  )  { requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P16_Remove_Block]^^664^665^666^^^649^679^if  ( child != parent.getFirstChild (  )  )  { requiresDecomposition = true; }^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( child !=  ( parent.getFirstChild (  )  )  )  {     result = parent; }^664^^^^^649^679^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^requiresDecomposition = false;^665^^^^^650^680^requiresDecomposition = true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != n.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != injectionPointParent.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( child <= parent.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( last != parent.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( child != second.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != node.getFirstChild (  )  )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssigleft ( parent, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( newCall == child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( n == newCall )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && left.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( parent )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( maybeExternMethod ( n )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( maybeExternMethod ( replacementValueNode )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = newCall.newString (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node n : nonconditionalExpr.children (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node n : newCall.children (  )  )  {^688^^^^^673^703^for  ( Node n : parent.children (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& injectionPointParent.newString (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^719^720^^^^704^734^&& parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& NodeUtil.isGet ( left )  )  {^720^^^^^705^735^&& NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( moveExpression ( last )  )  {^721^^^^^706^736^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( last == child )  {^689^^^^^674^704^if  ( n == child )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && n.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( left )  )  {^718^719^720^^^703^733^if  ( requiresDecomposition && parent.getType (  )  == Token.CALL && NodeUtil.isGet ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( moveExpression ( newCall )  )  {^721^^^^^718^726^if  ( maybeExternMethod ( first )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^child = injectionPointParent;^730^^^^^715^745^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^child =  n;^730^^^^^715^745^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^cond = first;child = parent;^730^^^^^715^745^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^result = parent;child = parent;^730^^^^^715^745^child = parent;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P1_Replace_Type]^short  parentType = parent.getType (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int lastType = parent.getType (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^int parentType = parent.newString (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int injectionPointParentType = parent.newString (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;int parentType = parent.getType (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^int type = left.getType (  ) ;int parentType = parent.getType (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = replacement.getFirstChild (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^for  ( Node parent : last.getAncestors (  )  )  {^650^^^^^635^665^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node parent : child.newString (  )  )  {^650^^^^^635^665^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^for  ( Node parent : child .getNext (  )   )  {^650^^^^^635^665^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^for  ( Node parent : n.getAncestors (  )  )  {^650^^^^^635^665^for  ( Node parent : child.getAncestors (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^int injectionPointParentType = parent.getType (  ) ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^int injectionPointParentType = parent .getParent (  )  ;^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^659^^^^^644^674^int parentType = parent.getType (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isConditionalOp ( newExpressionRoot )  )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( isConditionalOp ( last )  )  {^661^^^^^646^676^if  ( isConditionalOp ( parent )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( child != last .getLastChild (  )   )  {^664^^^^^649^679^if  ( child != parent.getFirstChild (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( isSafeAssign ( newCall, seenSideEffects )  )  {^675^^^^^660^690^if  ( isSafeAssign ( parent, seenSideEffects )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node first = left.newString (  ) ;^717^^^^^702^732^Node first = parent.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Unexpected AST structure." )   ;^734^^^^^719^749^throw new IllegalStateException  (" ")  ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSubexpressionMovable [RETURN_TYPE] ExpressionDecomposer$DecompositionType   Node expressionRoot Node subExpression [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( last.getType (  )  == Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P6_Replace_Expression]^if  ( !(isExpressionTreeUnsafe(lhs.getFirstChild(), seenSideEffects)) && !(isExpressionTreeUnsafe(lhs.getLastChild(), seenSideEffects)) )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^if  ( n.newString (  )  == Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( injectionPointParent.newString (  )  == Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P9_Replace_Statement]^if  ( parentType == Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^return false;^763^^^^^758^772^return true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( last.getFirstChild (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , sideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  )  ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( seenSideEffects.getFirstChild (  ) , lhs ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isSafeAssign ( lhs.getFirstChild (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs.newString (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs .getLastChild (  )  , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  { return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ; }^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  { return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ; }^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  { return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ; }^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P2_Replace_Operator]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) || !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( left.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , sideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  )  ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( seenSideEffects.getFirstChild (  ) , lhs ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isSafeAssign ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs.newString (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.newString (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return !isSafeAssign ( n.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node lhs = injectionPointParent.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node lhs = n.newString (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node lhs = node.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = expr.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionNameNode = getVarNode.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node functionExpression = parent.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node left = parent.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = call.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node last = expr.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node thisNameNode = thisVarNode.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P11_Insert_Donor_Statement]^Node first = parent.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( child != parent.getFirstChild (  )  )  { Node lhs = n.getFirstChild (  ) ; }^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^Node lhs = newCall.newString (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^switch  ( lhs.newString (  )  )  {^761^^^^^758^772^switch  ( lhs.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^switch  ( newExpressionRoot.getType (  )  )  {^761^^^^^758^772^switch  ( lhs.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^761^762^763^^^758^772^switch  ( lhs.getType (  )  )  { case Token.NAME: return true;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( injectionPointParent.getFirstChild (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return !isExpressionTreeUnsafe ( node .getLastChild (  )  , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( last.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( injectionPointParent.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs .getLastChild (  )  , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( injectionPointParent.getLastChild (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , sideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  )  ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( seenSideEffects.getLastChild (  ) , lhs ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& !isSafeAssign ( lhs.getLastChild (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& !isExpressionTreeUnsafe ( lhs.newString (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& !isExpressionTreeUnsafe ( last.newString (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( n, seenSideEffects )  )  { && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ; }^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( n, state.sideEffects )  )  { && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ; }^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P12_Insert_Condition]^if  ( isExpressionTreeUnsafe ( functionExpression, state.sideEffects )  )  { && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ; }^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( left.getLastChild (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^&& !isExpressionTreeUnsafe ( lhs .getFirstChild (  )  , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& !isExpressionTreeUnsafe ( replacement.getLastChild (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , requiresDecomposition ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs .getFirstChild (  )  , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) || !isExpressionTreeUnsafe ( lhs.newString (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node lhs = last.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^if  ( stopNode.getType (  )  == Token.ASSIGN )  {^759^^^^^758^772^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^Node lhs = lhs.getFirstChild (  ) ;^760^^^^^758^772^Node lhs = n.getFirstChild (  ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^switch  ( last.getType (  )  )  {^761^^^^^758^772^switch  ( lhs.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^switch  ( newExpressionRoot.newString (  )  )  {^761^^^^^758^772^switch  ( lhs.getType (  )  )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( left.getFirstChild (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return !isExpressionTreeUnsafe ( left.newString (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return !isExpressionTreeUnsafe ( n.getFirstChild (  ) , seenSideEffects ) ;^765^^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return !isSafeAssign ( last.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^767^768^^^^758^772^return !isExpressionTreeUnsafe ( lhs.getFirstChild (  ) , seenSideEffects ) && !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( newExpressionRoot.getLastChild (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , requiresDecomposition ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^&& !isExpressionTreeUnsafe ( newExpressionRoot.newString (  ) , seenSideEffects ) ;^768^^^^^758^772^&& !isExpressionTreeUnsafe ( lhs.getLastChild (  ) , seenSideEffects ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P3_Replace_Literal]^return true;^771^^^^^758^772^return false;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isSafeAssign [RETURN_TYPE] boolean   Node n boolean seenSideEffects [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^if  ( sideEffects )  {^780^^^^^778^791^if  ( followingSideEffectsExist )  {^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P13_Insert_Block]^if  ( maybeExternMethod ( first )  )  {     return UNDECOMPOSABLE; }else {     return DECOMPOSABLE; }^780^^^^^778^791^[Delete]^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.mayHaveSideEffects ( injectionPointParent ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return NodeUtil.isStatementBlock ( n ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.mayHaveSideEffects ( last ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return NodeUtil.isStatementBlock ( lhs ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected (  this.knownConstants ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected ( n ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected ( this.knownConstants, n ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P7_Replace_Invocation]^return NodeUtil.mayHaveSideEffects ( n, this.knownConstants ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return NodeUtil.mayHaveSideEffects ( injectionPointParent, this.knownConstants ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected ( last, this.knownConstants ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P14_Delete_Statement]^^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected ( left, this.knownConstants ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.mayHaveSideEffects ( newCall ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P5_Replace_Variable]^return NodeUtil.canBeSideEffected ( n, 0 ) ;^785^^^^^778^791^return NodeUtil.canBeSideEffected ( n, this.knownConstants ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
[P8_Replace_Mix]^return NodeUtil.isStatementBlock ( subExpression ) ;^789^^^^^778^791^return NodeUtil.mayHaveSideEffects ( n ) ;^[CLASS] ExpressionDecomposer DecompositionType DecompositionState  [METHOD] isExpressionTreeUnsafe [RETURN_TYPE] boolean   Node n boolean followingSideEffectsExist [VARIABLES] DecompositionType  DECOMPOSABLE  MOVABLE  UNDECOMPOSABLE  AbstractCompiler  compiler  Set  constNames  knownConstants  boolean  followingSideEffectsExist  hasFollowingSideEffects  needResult  requiresDecomposition  seenSideEffects  sideEffects  Node  call  callParent  child  cond  expr  exprInjectionPoint  expression  expressionParent  expressionRoot  extractBeforeStatement  extractedConditional  falseExpr  first  functionExpression  functionNameNode  getExprNode  getVarNode  gramps  ifNode  injectionPoint  injectionPointParent  last  left  lhs  n  newCall  newExpressionRoot  node  nonconditionalExpr  parent  replacement  replacementValueNode  result  second  stopNode  subExpression  tempNameNode  tempVarNode  thisNameNode  thisVarNode  trueExpr  Supplier  safeNameIdSupplier  String  resultName  sName  tempName  tempNamePrefix  int  MAX_INTERATIONS  i  parentType  type  
