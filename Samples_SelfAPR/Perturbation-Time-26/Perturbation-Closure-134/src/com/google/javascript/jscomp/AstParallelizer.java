[P1_Replace_Type]^public static final char TEMP_NAME = "JSC_TMP_PLACE_HOLDER";^39^^^^^34^44^public static final String TEMP_NAME = "JSC_TMP_PLACE_HOLDER";^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P3_Replace_Literal]^public static final String TEMP_NAME = "JSC_TMP_PLACE_SC_TMP_PLACE_HOLDER";^39^^^^^34^44^public static final String TEMP_NAME = "JSC_TMP_PLACE_HOLDER";^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P8_Replace_Mix]^private  Predicate<Node> shouldSplit;^41^^^^^36^46^private final Predicate<Node> shouldSplit;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P8_Replace_Mix]^private  Supplier<Node> placeHolderProvider;^43^^^^^38^48^private final Supplier<Node> placeHolderProvider;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P8_Replace_Mix]^private  Node root;^47^^^^^42^52^private final Node root;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P8_Replace_Mix]^private  boolean includeRoot;^49^^^^^44^54^private final boolean includeRoot;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint   [VARIABLES] 
[P8_Replace_Mix]^this.shouldSplit =  null;^73^^^^^67^79^this.shouldSplit = shouldSplit;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.placeHolderProvider =  null;^74^^^^^67^79^this.placeHolderProvider = placeHolderProvider;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.placeHolder = placeHolder;this.placeHolderProvider = placeHolderProvider;^74^^^^^67^79^this.placeHolderProvider = placeHolderProvider;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^this.root = placeHolder;^75^^^^^67^79^this.root = root;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.includeRoot = includeRoot;this.root = root;^75^^^^^67^79^this.root = root;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.before = before;this.root = root;^75^^^^^67^79^this.root = root;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.includeRoot =  null;^76^^^^^67^79^this.includeRoot = includeRoot;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.root = root;this.includeRoot = includeRoot;^76^^^^^67^79^this.includeRoot = includeRoot;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.forest ;^77^^^^^67^79^this.forest = Lists.newLinkedList (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.detachPointList = Lists.newLinkedList (  ) ;this.forest = Lists.newLinkedList (  ) ;^77^^^^^67^79^this.forest = Lists.newLinkedList (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^77^78^79^^^67^79^this.forest = Lists.newLinkedList (  ) ; this.detachPointList = Lists.newLinkedList (  ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.detachPointList  =  this.detachPointList ;^78^^^^^67^79^this.detachPointList = Lists.newLinkedList (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.forest = Lists.newLinkedList (  ) ;this.detachPointList = Lists.newLinkedList (  ) ;^78^^^^^67^79^this.detachPointList = Lists.newLinkedList (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^78^^^^^67^79^this.detachPointList = Lists.newLinkedList (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node,boolean)   Node> shouldSplit Node> shouldTraverse Node> placeHolderProvider Node root boolean includeRoot [VARIABLES] boolean  includeRoot  Node  before  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^this.placeHolder = root;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.placeHolder =  original;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^before = placeHolder;this.placeHolder = placeHolder;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.placeHolderProvider = placeHolderProvider;this.placeHolder = placeHolder;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^this.before = root;^220^^^^^218^222^this.before = before;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.root = root;this.before = before;^220^^^^^218^222^this.before = before;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^this.original = placeHolder;^221^^^^^218^222^this.original = orginal;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^this.original =  root;^221^^^^^218^222^this.original = orginal;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] boolean  includeRoot  Node  before  orginal  original  placeHolder  root  Supplier  placeHolderProvider  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return NodeUtil.isFunction ( original ) ;^88^^^^^82^111^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return NodeUtil.isFunction ( root ) ;^88^^^^^82^111^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^Predicate<Node> shouldSplit = new Node> (  )  {     Override     public boolean apply ( Node ignored )  {         return true;     } }   {^85^^^^^82^111^Predicate<Node> shouldSplit = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^88^^^^^82^111^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^return false;^96^^^^^82^111^return true;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^Predicate<Node> shouldTraverse = new Node> (  )  {     Override     public boolean apply ( Node input )  {         return isFunction ( input ) ;     } }   {^93^^^^^82^111^Predicate<Node> shouldTraverse = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.null )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return new Node ( Token.FUNCTION, Node.getParent ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return new Node ( Token.FUNCTION, Node .getParent (  )  , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^82^111^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node.getParent ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^105^106^^^^82^111^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^Node .getParent (  )  , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^105^106^^^^82^111^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^105^106^^^^82^111^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return return  new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false )  ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer (  shouldTraverse, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit,  placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit, shouldTraverse,  root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders,  globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, 0, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, placeHolder, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, includeRoot ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, root, placeHolders, shouldTraverse, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( globalPass, shouldTraverse, placeHolders, root, shouldSplit ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return  new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false )  ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, null, placeHolders, root, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, orginal, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, root, placeHolders, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, globalPass, placeHolders, root, shouldTraverse ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, original, globalPass ) ;^109^110^^^^82^111^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFunctionLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root boolean globalPass [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return NodeUtil.isFunction ( root ) ;^88^^^^^87^89^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return NodeUtil.isFunction ( placeHolder ) ;^88^^^^^87^89^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^88^^^^^87^89^return NodeUtil.isFunction ( input ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^return false;^96^^^^^95^97^return true;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node ignored [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return new Node ( Token.FUNCTION, Node.getParent ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return new Node ( Token.FUNCTION, Node .getParent (  )  , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.this ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.null )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node.getParent ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^105^106^^^^103^107^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^105^106^^^^103^107^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^return sourceName == null;^120^^^^^113^141^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return TEMP_NAME != null;^120^^^^^113^141^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^returnTEMP_NAME ;^120^^^^^113^141^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P1_Replace_Type]^char sourceName =  ( char )  input.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^String sourceName =  ( String )  root.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^String sourceName =  ( String )  input.newString ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^String sourceName =  ( String )  input .getParent (  )  ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^String sourceName =  ( String )  original.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^119^^^^^113^141^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return NodeUtil.newExpr ( Node.newString ( sourceName )  ) ;^128^^^^^113^141^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return NodeUtil.newExpr ( Node.getParent ( TEMP_NAME )  ) ;^128^^^^^113^141^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return NodeUtil.newExpr ( Node .getParent (  )   ) ;^128^^^^^113^141^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^128^^^^^113^141^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^return n.getType (  )  != Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return root.getType (  )  == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return n.newString (  )  == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return n .getParent (  )   == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return placeHolder.newString (  )  == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^Predicate<Node> shouldTraverse = new Node> (  )  {     Override     public boolean apply ( Node ignored )  {         return true;     } }   {^133^^^^^113^141^Predicate<Node> shouldTraverse = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^Predicate<Node> shouldTraverse = rootew Predicate<Node> (  )  {^133^^^^^113^141^Predicate<Node> shouldTraverse = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^Predicate<Node> shouldTraverse = placeHolderew Predicate<Node> (  )  {^133^^^^^113^141^Predicate<Node> shouldTraverse = new Predicate<Node> (  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return original.getType (  )  == Token.BLOCK;^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^136^^^^^113^141^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, true ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return return  new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, globalPass )  ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer (  shouldTraverse, placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit,  placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit, shouldTraverse,  root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders,  false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, orginal, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldTraverse, shouldSplit, placeHolders, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, placeHolders, shouldTraverse, root, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, root, placeHolders, shouldTraverse, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return new AstParallelizer ( shouldSplit, shouldTraverse, root, placeHolders, false ) ;^139^140^^^^113^141^return new AstParallelizer ( shouldSplit, shouldTraverse, placeHolders, root, false ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] createNewFileLevelAstParallelizer [RETURN_TYPE] AstParallelizer   Node root [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P1_Replace_Type]^char sourceName =  ( char )  input.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^String sourceName =  ( String )  input.newString ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^String sourceName =  ( String )  original.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^String sourceName =  ( String )  root.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^String sourceName =  ( String )  input .getParent (  )  ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^String sourceName =  ( String )  placeHolder.newString ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^return sourceName == null;^120^^^^^118^121^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return false ;^120^^^^^118^121^return sourceName != null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return NodeUtil.newExpr ( Node.newString ( sourceName )  ) ;^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return NodeUtil.newExpr ( Node.getParent ( TEMP_NAME )  ) ;^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return NodeUtil.newExpr ( Node .getParent (  )   ) ;^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return NodeUtil.newExpr ( Node.getParent ( sourceName )  ) ;^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^return n.getType (  )  >= Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return root.getType (  )  == Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^return n.newString (  )  == Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^return original.getType (  )  == Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^return placeHolder.getType (  )  == Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^detachPointList.add ( new DettachPoint (  before, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^detachPointList.add ( new DettachPoint ( placeHolder,  orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P4_Replace_Constructor]^detachPointList.add ( new DettachPoint ( placeHolder, before )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( root, before, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( placeHolder, original, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( orginal, before, placeHolder )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( before, placeHolder, orginal )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^detachPointList.add ( new DettachPoint ( placeHolder, before, placeHolder )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( placeHolder, before, root )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^detachPointList.add ( new DettachPoint ( placeHolder, orginal, before )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^detachPointList.add ( new DettachPoint ( placeHolder, before, original )  ) ;^147^^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^147^148^^^^146^148^detachPointList.add ( new DettachPoint ( placeHolder, before, orginal )  ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] recordSplitPoint [RETURN_TYPE] void   Node placeHolder Node before Node orginal [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( globalPass )  {^156^^^^^155^161^if  ( includeRoot )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P15_Unwrap_Block]^forest.add(root);^156^157^158^^^155^161^if  ( includeRoot )  { forest.add ( root ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P16_Remove_Block]^^156^157^158^^^155^161^if  ( includeRoot )  { forest.add ( root ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( orginal ) ;^157^^^^^155^161^forest.add ( root ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^157^158^^^^155^161^forest.add ( root ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( original ) ;^157^^^^^155^161^forest.add ( root ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^split ( placeHolder ) ;^159^^^^^155^161^split ( root ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^159^160^^^^155^161^split ( root ) ; return forest;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] List   [VARIABLES] boolean  globalPass  includeRoot  Node  before  ignored  input  n  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node c = n.newString (  ) ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^Node next = c.getNext (  ) ;Node c = n.getFirstChild (  ) ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node c = n .removeFirstChild (  )  ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^Node c = placeHolder.getFirstChild (  ) ;^164^^^^^163^186^Node c = n.getFirstChild (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^164^165^^^^163^186^Node c = n.getFirstChild (  ) ; Node before = null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P12_Insert_Condition]^if  ( before == null )  { Node before = null; }^165^^^^^163^186^Node before = null;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^while  ( c == null )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^while  ( root != null )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^while  ( c != originalull )  {^166^^^^^163^186^while  ( c != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( shouldSplit.apply ( orginal )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^if  ( shouldSplit .apply ( next )   )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( shouldSplit.apply ( root )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = root;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^before = placeHolder;before = c;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^split ( root ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^createNewFileLevelAstParallelizer ( c ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^split ( original ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^split ( root ) ;split ( c ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^if  ( before != null )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( root == null )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( before == placeHolderull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( n == beforeull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( before == this )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( root, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( placeHolder, root ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter (  c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( c, placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .removeChildAfter ( c )  ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^n.removeChildAfter ( before ) ;n.addChildAfter ( placeHolder, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^n.addChildToFront ( placeHolder ) ;n.addChildAfter ( placeHolder, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.removeChildAfter ( placeHolder ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n.addChildAfter ( before ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildAfter ( placeHolder ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^175^176^177^^^163^186^n.removeChildAfter ( before ) ; forest.add ( c ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^n.addChildAfter ( placeHolder, c ) ;n.removeChildAfter ( before ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( placeHolder ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^176^177^^^^163^186^forest.add ( c ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( root.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^forest.add ( n.newString (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^Node c = n.getFirstChild (  ) ;forest.add ( n.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( root.newString (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildToFront ( root ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n.addChildAfter ( placeHolder ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( placeHolder , placeHolder )  ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildAfter ( root ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^n.addChildAfter ( placeHolder, c ) ;n.addChildToFront ( placeHolder ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = original;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^this.placeHolder = placeHolder;before = placeHolder;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^before = c;before = placeHolder;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node placeHolder = placeHolderProvider .get (  )  ;^169^^^^^163^186^Node placeHolder = placeHolderProvider.get (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^169^^^^^163^186^Node placeHolder = placeHolderProvider.get (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^forest.add ( n .getFirstChild (  )   ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( orginal .getFirstChild (  )   ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildToFront ( original ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( placeHolder, orginal ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .removeChildAfter ( original )  ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildAfter ( orginal, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^174^175^^^^163^186^n.addChildAfter ( placeHolder, c ) ; n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.removeChildAfter ( original ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.removeChildAfter ( root ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( orginal ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( root ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( root, before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, root, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, before, root ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint (  before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder,  c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, before ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( c, before, placeHolder ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( before, placeHolder, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, c, before ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^recordSplitPoint ( placeHolder, original, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^178^179^180^181^182^163^186^recordSplitPoint ( placeHolder, before, c ) ; before = placeHolder; } else { split ( c ) ; before = c; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( before == orginalull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildAfter ( root ) ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( placeHolder.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildToFront ( orginal ) ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = next;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^before =  null;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^before =  null;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^c = original;^184^^^^^163^186^c = next;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^c =  root;^184^^^^^163^186^c = next;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^Node next = original.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node next = c.newString (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^Node c = n.getFirstChild (  ) ;Node next = c.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^Node next = orginal.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^Node next = placeHolder.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( c.apply ( shouldSplit )  )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^if  ( shouldSplit .apply ( original )   )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( orginal.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( original.newString (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( original.removeFirstChild (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n.addChildAfter ( original, c ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( original, before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, before, placeHolder ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^split ( placeHolder ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^createNewFileLevelAstParallelizer ( placeHolder ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = placeHolder;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^before =  original;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^split ( orginal ) ;^181^^^^^163^186^split ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( before == originalull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( before == true )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^forest.add ( original ) ;^176^^^^^163^186^forest.add ( c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^forest.add ( placeHolder.newString (  )  ) ;^171^^^^^163^186^forest.add ( n.removeFirstChild (  )  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( ignored , before )  ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = root;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^before =  orginal;^179^^^^^163^186^before = placeHolder;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( original , next )  ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( placeHolder, original ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( orginal, before, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( original == null )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( before == rootull )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( orginal == false )  {^170^^^^^163^186^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^n.addChildAfter ( placeHolder, placeHolder ) ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .removeChildAfter ( n )  ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n .removeChildAfter ( input )  ;^174^^^^^163^186^n.addChildAfter ( placeHolder, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( input , ignored )  ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n .addChildAfter ( root , root )  ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( original , orginal )  ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^before = orginal;^182^^^^^163^186^before = c;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^c = placeHolder;^184^^^^^163^186^c = next;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^Node next = root.getNext (  ) ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^Node next = c .getParent (  )  ;^167^^^^^163^186^Node next = c.getNext (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^Node placeHolder = 2.get (  ) ;^169^^^^^163^186^Node placeHolder = placeHolderProvider.get (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^if  ( shouldSplit .apply ( placeHolder )   )  {^168^^^^^163^186^if  ( shouldSplit.apply ( c )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^n .addChildAfter ( orginal , input )  ;^172^^^^^163^186^n.addChildToFront ( placeHolder ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^n .addChildAfter ( placeHolder , before )  ;^175^^^^^163^186^n.removeChildAfter ( before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, placeHolder, c ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^recordSplitPoint ( placeHolder, before, original ) ;^178^^^^^163^186^recordSplitPoint ( placeHolder, before, c ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] split [RETURN_TYPE] void   Node n [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^while  ( !detachPointList.size (  )  )  {^193^^^^^191^197^while  ( !detachPointList.isEmpty (  )  )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )    instanceof   1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() - 3  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^DettachPoint entry = this.remove ( detachPointList.size (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^DettachPoint entry = detachPointList.add ( detachPointList.size (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^DettachPoint entry = detachPointList.remove ( detachPointList.add (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^DettachPoint entry = 1.remove ( detachPointList.add (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   <=  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() - 2  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^DettachPoint entry = detachPointList .isEmpty (  )  ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^194^195^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ; entry.reattach (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^while  ( !detachPointList.isEmpty (  )  )  { DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() + 4  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^DettachPoint entry = null.remove ( detachPointList.size (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^entry .DettachPoint ( before , root , input )  ;^195^^^^^191^197^entry.reattach (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^195^^^^^191^197^entry.reattach (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   &&  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() - 7  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^193^194^^^^191^197^while  ( !detachPointList.isEmpty (  )  )  { DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )   >  1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() - 6  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P3_Replace_Literal]^DettachPoint entry = detachPointList.remove ( detachPointList.size() - 1  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^DettachPoint entry = this.remove ( detachPointList.add (  )  - 1 ) ;^194^^^^^191^197^DettachPoint entry = detachPointList.remove ( detachPointList.size (  )  - 1 ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^entry .DettachPoint ( root , placeHolder , input )  ;^195^^^^^191^197^entry.reattach (  ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] join [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  DettachPoint  entry  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^if  ( placeHolder.getParent (  )  == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( root.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P6_Replace_Expression]^if  ( before == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^if  ( placeHolder.getProp (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( placeHolder.getParent (  )  != this )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P2_Replace_Operator]^if  ( before != null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( root == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( before == false )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( root, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( original, orginal ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter (  before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .removeChildAfter ( root )  ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getProp (  ) .addChildAfter ( original, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getParent (  ) .addChildAfter ( original, placeHolder ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^232^233^234^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ; placeHolder.getParent (  ) .removeChildAfter ( original ) ; }^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .removeChildAfter ( original ) ;placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( next , next )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getProp (  ) .removeChildAfter ( original ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getParent (  ) .removeChildAfter ( root ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildrenToFront ( orginal ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( ignored , orginal )  ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getProp (  ) .addChildrenToFront ( original ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .addChildrenToFront ( root ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^229^230^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ; placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .removeChildAfter ( original ) ;placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getProp (  ) .removeChildAfter ( original ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildrenToFront ( next ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( before , next )  ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .addChildAfter ( root, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( input , placeHolder )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .removeChildAfter ( root ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( before == this )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( original, root ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .removeChildAfter ( placeHolder )  ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getParent (  ) .addChildAfter ( placeHolder, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .removeChildAfter ( next ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .removeChildAfter ( next ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^placeHolder.getParent (  ) .removeChildAfter ( root ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P5_Replace_Variable]^if  ( next.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^if  ( next .getProp (  )   != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder .getProp (  )  .addChildrenToFront ( next ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .removeChildAfter ( root ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P8_Replace_Mix]^placeHolder.getProp (  ) .addChildAfter ( original, orginal ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( placeHolder , n )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] AstParallelizer 1 2 3 4 5 6 DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] boolean  globalPass  includeRoot  Node  before  c  ignored  input  n  next  orginal  original  placeHolder  root  Supplier  placeHolderProvider  placeHolders  List  detachPointList  forest  String  TEMP_NAME  sourceName  Predicate  shouldSplit  shouldTraverse  
[P14_Delete_Statement]^^88^^^^^87^89^return NodeUtil.isFunction ( input ) ;^[CLASS] 1  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  
[P3_Replace_Literal]^return false;^96^^^^^95^97^return true;^[CLASS] 2  [METHOD] apply [RETURN_TYPE] boolean   Node ignored [VARIABLES] boolean  Node  ignored  
[P5_Replace_Variable]^return new Node ( Token. Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[P5_Replace_Variable]^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^104^105^106^^^103^107^return new Node ( Token.FUNCTION, Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[P14_Delete_Statement]^^105^106^^^^103^107^Node.newString ( Token.NAME, TEMP_NAME ) , new Node ( Token.LP ) , new Node ( Token.BLOCK )  ) ;^[CLASS] 3  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[P1_Replace_Type]^char sourceName =  ( char )  input.getProp ( Node.SOURCENAME_PROP ) ;^119^^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  String  sourceName  
[P14_Delete_Statement]^^119^120^^^^118^121^String sourceName =  ( String )  input.getProp ( Node.SOURCENAME_PROP ) ; return sourceName != null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  String  sourceName  
[P2_Replace_Operator]^return sourceName == null;^120^^^^^118^121^return sourceName != null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  String  sourceName  
[P8_Replace_Mix]^return sourceName ;^120^^^^^118^121^return sourceName != null;^[CLASS] 4  [METHOD] apply [RETURN_TYPE] boolean   Node input [VARIABLES] boolean  Node  input  String  sourceName  
[P14_Delete_Statement]^^128^^^^^127^129^return NodeUtil.newExpr ( Node.newString ( TEMP_NAME )  ) ;^[CLASS] 5  [METHOD] get [RETURN_TYPE] Node   [VARIABLES] boolean  
[P2_Replace_Operator]^return n.getType (  )  > Token.BLOCK;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P8_Replace_Mix]^return true ;^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P14_Delete_Statement]^^136^^^^^135^137^return n.getType (  )  == Token.BLOCK;^[CLASS] 6  [METHOD] apply [RETURN_TYPE] boolean   Node n [VARIABLES] boolean  Node  n  
[P5_Replace_Variable]^this.placeHolder = original;^219^^^^^218^222^this.placeHolder = placeHolder;^[CLASS] DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^this.before = placeHolder;^220^^^^^218^222^this.before = before;^[CLASS] DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^this.original = placeHolder;^221^^^^^218^222^this.original = orginal;^[CLASS] DettachPoint  [METHOD] <init> [RETURN_TYPE] Node)   Node placeHolder Node before Node orginal [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P2_Replace_Operator]^if  ( placeHolder.getParent (  )  == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^if  ( orginal.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P6_Replace_Expression]^if  ( before == null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^if  ( placeHolder.getParent (  )  != false )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P2_Replace_Operator]^if  ( before != null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^if  ( placeHolder == null )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^if  ( before == true )  {^228^^^^^224^236^if  ( before == null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( orginal, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( original, placeHolder ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter (  before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildAfter ( before, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^placeHolder.getParent (  ) .addChildAfter ( original, original ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P14_Delete_Statement]^^232^233^234^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ; placeHolder.getParent (  ) .removeChildAfter ( original ) ; }^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .removeChildAfter ( original ) ;placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( orginal , placeHolder )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P14_Delete_Statement]^^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .addChildrenToFront ( orginal ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( before , orginal )  ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^placeHolder.getParent (  )  .addChildAfter ( orginal , orginal )  ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P14_Delete_Statement]^^229^230^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ; placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P11_Insert_Donor_Statement]^placeHolder.getParent (  ) .removeChildAfter ( original ) ;placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P14_Delete_Statement]^^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^placeHolder.getParent (  ) .removeChildAfter ( orginal ) ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P14_Delete_Statement]^^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( placeHolder , orginal )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^placeHolder.getParent (  )  .addChildAfter ( before , before )  ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P5_Replace_Variable]^if  ( original.getParent (  )  != null )  {^227^^^^^224^236^if  ( placeHolder.getParent (  )  != null )  {^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( placeHolder , orginal )  ;^229^^^^^224^236^placeHolder.getParent (  ) .addChildrenToFront ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P7_Replace_Invocation]^placeHolder.getParent (  )  .addChildAfter ( orginal , placeHolder )  ;^230^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^placeHolder.getParent (  ) .addChildAfter ( placeHolder, before ) ;^232^^^^^224^236^placeHolder.getParent (  ) .addChildAfter ( original, before ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
[P8_Replace_Mix]^placeHolder.getParent (  )  .addChildAfter ( before , before )  ;^233^^^^^224^236^placeHolder.getParent (  ) .removeChildAfter ( original ) ;^[CLASS] DettachPoint  [METHOD] reattach [RETURN_TYPE] void   [VARIABLES] Node  before  orginal  original  placeHolder  boolean  
