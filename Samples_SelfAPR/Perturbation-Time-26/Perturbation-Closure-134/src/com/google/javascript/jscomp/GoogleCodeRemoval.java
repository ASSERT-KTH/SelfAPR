[P1_Replace_Type]^static final char ABSTRACT_METHOD_NAME = "goog.abstractMethod";^45^^^^^40^50^static final String ABSTRACT_METHOD_NAME = "goog.abstractMethod";^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P3_Replace_Literal]^static final String ABSTRACT_METHOD_NAME = "goog.abstractMethod.abs";^45^^^^^40^50^static final String ABSTRACT_METHOD_NAME = "goog.abstractMethod";^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P8_Replace_Mix]^private final List<RemovableAssignment> abstractMethodAssignmentNodes ;^51^52^^^^51^52^private final List<RemovableAssignment> abstractMethodAssignmentNodes = Lists.newArrayList (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P8_Replace_Mix]^Node parent;^67^^^^^62^72^final Node parent;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P8_Replace_Mix]^List<Node> assignAncestors = Lists.newArrayList (  ) ;^72^^^^^67^77^final List<Node> assignAncestors = Lists.newArrayList (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P8_Replace_Mix]^Node lastAncestor;^77^^^^^72^82^final Node lastAncestor;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods   [VARIABLES] 
[P5_Replace_Variable]^this.node = parent;^88^^^^^86^98^this.node = nameNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^this.parent = assignNode;this.node = nameNode;^88^^^^^86^98^this.node = nameNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^this.parent =  parent;^89^^^^^86^98^this.parent = assignNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^this.node = nameNode;this.parent = assignNode;^89^^^^^86^98^this.parent = assignNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^Node ancestor = parent;^91^^^^^86^98^Node ancestor = assignNode;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^ancestor = parent.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^lastAncestor = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^} while  ( parent.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^} while  ( ancestor.removeChild (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^} while  ( ancestor .getParent (  )   == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^} while  ( parent.removeChild (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor.removeChild (  ) .isQualifiedName (  )  ) ;^96^^^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^96^97^98^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ; lastAncestor = ancestor.getParent (  ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^ancestor = parent.removeChild (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^93^94^^^^86^98^ancestor = ancestor.getParent (  ) ; assignAncestors.add ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^assignAncestors.add ( node ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^lastAncestor.removeChild ( ancestor ) ;assignAncestors.add ( ancestor ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^lastAncestor = parent.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^lastAncestor = ancestor.removeChild (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;lastAncestor = ancestor.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^lastAncestor = node.removeChild (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^this.compiler =  null;^149^^^^^148^150^this.compiler = compiler;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^Node rhs = node.getParent (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P8_Replace_Mix]^Node rhs = parent.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P11_Insert_Donor_Statement]^Node valueNode = n.getLastChild (  ) ;Node rhs = node.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^Node rhs = rhs.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P14_Delete_Statement]^^104^105^^^^103^116^Node rhs = node.getNext (  ) ; Node last = parent;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^Node last = node;^105^^^^^103^116^Node last = parent;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P8_Replace_Mix]^Node last = rhs;^105^^^^^103^116^Node last = parent;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P8_Replace_Mix]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P15_Unwrap_Block]^lastAncestor.removeChild(ancestor);^107^108^109^110^111^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  { lastAncestor.removeChild ( ancestor ) ; } else { rhs.detachFromParent (  ) ; ancestor.replaceChild ( last, rhs ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P16_Remove_Block]^^107^108^109^110^111^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  { lastAncestor.removeChild ( ancestor ) ; } else { rhs.detachFromParent (  ) ; ancestor.replaceChild ( last, rhs ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P7_Replace_Invocation]^rhs.removeChild (  ) ;^110^^^^^103^116^rhs.detachFromParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P14_Delete_Statement]^^110^^^^^103^116^rhs.detachFromParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild ( rhs, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild ( last, parent ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild (  rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild ( last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P8_Replace_Mix]^ancestor.replaceChild ( last, node ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P14_Delete_Statement]^^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P11_Insert_Donor_Statement]^lastAncestor.removeChild ( ancestor ) ;ancestor.replaceChild ( last, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^lastAncestor.removeChild ( rhs ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P14_Delete_Statement]^^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P11_Insert_Donor_Statement]^ancestor.replaceChild ( last, rhs ) ;lastAncestor.removeChild ( ancestor ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P11_Insert_Donor_Statement]^assignAncestors.add ( ancestor ) ;lastAncestor.removeChild ( ancestor ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^last = rhs;^113^^^^^103^116^last = ancestor;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( node )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P7_Replace_Invocation]^lastAncestor .replaceChild ( rhs , nameNode )  ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P7_Replace_Invocation]^rhs .getParent (  )  ;^110^^^^^103^116^rhs.detachFromParent (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P5_Replace_Variable]^ancestor.replaceChild ( node, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P14_Delete_Statement]^^115^^^^^103^116^compiler.reportCodeChange (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName() && valueNode.isQualifiedName() && getQualifiedName()) )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName( && valueNode.isQualifiedName()) )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P13_Insert_Block]^if  (  (  ( nameNode.isQualifiedName (  )  )  &&  ( valueNode.isQualifiedName (  )  )  )  &&  ( equals ( valueNode.getQualifiedName (  )  )  )  )  {     abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^127^^^^^126^138^[Delete]^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P2_Replace_Operator]^if  ( nameNode.isQualifiedName (  )  || valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( nameNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( valueNodeameNode.isQualifiedName (  )  && n.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && nameNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName (  )  ) {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P6_Replace_Expression]^if  (  valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName( && valueNode.isQualifiedName()) )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^if  ( nameNode.removeChild (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.removeChild (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P15_Unwrap_Block]^abstractMethodAssignmentNodes.add(new com.google.javascript.jscomp.GoogleCodeRemoval.RemovableAssignment(n.getFirstChild(), n, t));^131^132^133^134^135^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P16_Remove_Block]^^131^132^133^134^135^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P4_Replace_Constructor]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) ,  t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P4_Replace_Constructor]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( parentew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.removeChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( rhsew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^abstractMethodAssignmentNodes .add ( last )   ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n .getLastChild (  )  , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^n.getFirstChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^n.removeChild (  ) , n, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^n .getLastChild (  )  , n, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^n.getFirstChild (  ) , rhs, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P11_Insert_Donor_Statement]^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;n.getFirstChild (  ) , n, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n .getLastChild (  )  , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^Node rhsameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^Node nameNode = n.removeChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^Node parentameNode = n.removeChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P11_Insert_Donor_Statement]^Node valueNode = n.getLastChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^Node valueNode = rhs.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^Node valueNode = n.removeChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^Node valueNode = node.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node valueNode = n.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P11_Insert_Donor_Statement]^Node rhs = node.getNext (  ) ;Node valueNode = n.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^Node nodeameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^Node nameNode = n .getLastChild (  )  ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^Node nodeameNode = n .getLastChild (  )  ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^128^129^^^^126^138^Node nameNode = n.getFirstChild (  ) ; Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^Node valueNode = n .getFirstChild (  )  ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^if  ( valueNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( nameNode.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^valueNode.removeChild (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( node.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^132^133^134^135^136^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^ABSTRACT_METHOD_NAME.equals ( valueNode.removeChild (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P7_Replace_Invocation]^ABSTRACT_METHOD_NAME.equals ( valueNode .isQualifiedName (  )   )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^ABSTRACT_METHOD_NAME.equals ( parent.removeChild (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P14_Delete_Statement]^^133^134^135^136^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^ABSTRACT_METHOD_NAME.equals ( nameNode.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^ABSTRACT_METHOD_NAME.equals ( rhs.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^abstractMethodAssignmentNodes.add ( rhsew RemovableAssignment ( n.removeChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^n.getFirstChild (  ) , node, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^n.removeChild (  ) , node, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( node.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( rhsameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^if  ( nameNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^if  ( nameNode.isQualifiedName (  )  && node.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^n.getFirstChild (  ) , parent, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^n.removeChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( nodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^Node valueNode = parent.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^ABSTRACT_METHOD_NAME.equals ( node.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^ABSTRACT_METHOD_NAME.equals ( rhs .isQualifiedName (  )   )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P8_Replace_Mix]^n.removeChild (  ) , rhs, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  String  ABSTRACT_METHOD_NAME  boolean  NodeTraversal  t  Node  ancestor  assignNode  last  lastAncestor  n  nameNode  node  parent  rhs  valueNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, node, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new FindAbstractMethods (  )  ) ;^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P14_Delete_Statement]^^156^^^^^155^161^NodeTraversal.traverse ( compiler, root, new FindAbstractMethods (  )  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P14_Delete_Statement]^^159^^^^^155^161^assignment.remove (  ) ;^[CLASS] GoogleCodeRemoval RemovableAssignment FindAbstractMethods  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P8_Replace_Mix]^Node parent;^67^^^^^62^72^final Node parent;^[CLASS] RemovableAssignment  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P8_Replace_Mix]^final List<Node> assignAncestors ;^72^^^^^67^77^final List<Node> assignAncestors = Lists.newArrayList (  ) ;^[CLASS] RemovableAssignment  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  abstractMethodAssignmentNodes  assignAncestors  RemovableAssignment  assignment  String  ABSTRACT_METHOD_NAME  boolean  Node  ancestor  assignNode  externs  last  lastAncestor  n  nameNode  node  parent  rhs  root  valueNode  
[P5_Replace_Variable]^this.node = node;^88^^^^^86^98^this.node = nameNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^this.node =  parent;^88^^^^^86^98^this.node = nameNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^this.parent = assignNode;this.node = nameNode;^88^^^^^86^98^this.node = nameNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^this.parent = parent;^89^^^^^86^98^this.parent = assignNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^this.node = nameNode;this.parent = assignNode;^89^^^^^86^98^this.parent = assignNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^Node ancestor = parent;^91^^^^^86^98^Node ancestor = assignNode;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^ancestor = parent.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor = ancestor.removeChild (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor = ancestor .getNext (  )  ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^ancestor =  node.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^lastAncestor = ancestor.getParent (  ) ;ancestor = ancestor.getParent (  ) ;^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^} while  ( parent.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^} while  ( ancestor.removeChild (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^} while  ( ancestor .getParent (  )   == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^} while  ( node.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^95^96^^^^86^98^} while  ( ancestor.getType (  )  == Token.ASSIGN && ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor.removeChild (  ) .isQualifiedName (  )  ) ;^96^^^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor .removeChild ( lastAncestor )  .isQualifiedName (  )  ) ;^96^^^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^96^97^98^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ; lastAncestor = ancestor.getParent (  ) ; }^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^ancestor .removeChild ( nameNode )  .isQualifiedName (  )  ) ;^96^^^^^86^98^ancestor.getFirstChild (  ) .isQualifiedName (  )  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^93^^^^^86^98^ancestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^assignAncestors.add ( node ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P8_Replace_Mix]^assignAncestors.add ( parent ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^lastAncestor.removeChild ( ancestor ) ;assignAncestors.add ( ancestor ) ;^94^^^^^86^98^assignAncestors.add ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^lastAncestor = parent.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^lastAncestor = ancestor.removeChild (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P11_Insert_Donor_Statement]^ancestor = ancestor.getParent (  ) ;lastAncestor = ancestor.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^lastAncestor = node.getParent (  ) ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P7_Replace_Invocation]^lastAncestor = ancestor .getNext (  )  ;^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P14_Delete_Statement]^^97^^^^^86^98^lastAncestor = ancestor.getParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] <init> [RETURN_TYPE] NodeTraversal)   Node nameNode Node assignNode NodeTraversal traversal [VARIABLES] List  assignAncestors  boolean  NodeTraversal  traversal  Node  ancestor  assignNode  lastAncestor  nameNode  node  parent  
[P5_Replace_Variable]^Node rhs = parent.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P7_Replace_Invocation]^Node rhs = node.getParent (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P8_Replace_Mix]^Node rhs = parent.getParent (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P8_Replace_Mix]^Node rhs = nameNode.getNext (  ) ;^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P14_Delete_Statement]^^104^^^^^103^116^Node rhs = node.getNext (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^Node last = rhs;^105^^^^^103^116^Node last = parent;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P15_Unwrap_Block]^lastAncestor.removeChild(ancestor);^107^108^109^110^111^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  { lastAncestor.removeChild ( ancestor ) ; } else { rhs.detachFromParent (  ) ; ancestor.replaceChild ( last, rhs ) ; }^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P16_Remove_Block]^^107^108^109^110^111^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  { lastAncestor.removeChild ( ancestor ) ; } else { rhs.detachFromParent (  ) ; ancestor.replaceChild ( last, rhs ) ; }^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P7_Replace_Invocation]^rhs.removeChild (  ) ;^110^^^^^103^116^rhs.detachFromParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P7_Replace_Invocation]^rhs .getParent (  )  ;^110^^^^^103^116^rhs.detachFromParent (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P14_Delete_Statement]^^110^111^^^^103^116^rhs.detachFromParent (  ) ; ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild ( node, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild ( last, parent ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild (  rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild ( last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild ( rhs, last ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P7_Replace_Invocation]^ancestor .removeChild ( lastAncestor )  ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P8_Replace_Mix]^ancestor .removeChild ( ancestor )  ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P14_Delete_Statement]^^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P11_Insert_Donor_Statement]^lastAncestor.removeChild ( ancestor ) ;ancestor.replaceChild ( last, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^lastAncestor.removeChild ( rhs ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P14_Delete_Statement]^^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P11_Insert_Donor_Statement]^ancestor.replaceChild ( last, rhs ) ;lastAncestor.removeChild ( ancestor ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P11_Insert_Donor_Statement]^assignAncestors.add ( ancestor ) ;lastAncestor.removeChild ( ancestor ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P8_Replace_Mix]^last =  parent;^113^^^^^103^116^last = ancestor;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^if  ( NodeUtil.isExpressionNode ( rhs )  )  {^107^^^^^103^116^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P7_Replace_Invocation]^lastAncestor .replaceChild ( parent , assignNode )  ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P8_Replace_Mix]^lastAncestor.removeChild ( parent ) ;^108^^^^^103^116^lastAncestor.removeChild ( ancestor ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P5_Replace_Variable]^ancestor.replaceChild ( parent, rhs ) ;^111^^^^^103^116^ancestor.replaceChild ( last, rhs ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P14_Delete_Statement]^^115^^^^^103^116^compiler.reportCodeChange (  ) ;^[CLASS] RemovableAssignment  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] List  assignAncestors  Node  ancestor  assignNode  last  lastAncestor  nameNode  node  parent  rhs  boolean  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( valueNode.getType (  )  == Token.ASSIGN )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName() && valueNode.isQualifiedName() && getQualifiedName()) )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName( && valueNode.isQualifiedName()) )  {^127^^^^^126^138^if  ( n.getType (  )  == Token.ASSIGN )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P13_Insert_Block]^if  (  (  ( nameNode.isQualifiedName (  )  )  &&  ( valueNode.isQualifiedName (  )  )  )  &&  ( equals ( valueNode.getQualifiedName (  )  )  )  )  {     abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^127^^^^^126^138^[Delete]^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P2_Replace_Operator]^if  ( nameNode.isQualifiedName (  )  || valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( valueNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( nameNode.isQualifiedName (  )  && parent.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( valueNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( valueNode.isQualifiedName (  )  && nameNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( valueNodeameNode.isQualifiedName (  )  && n.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( nameNodeameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName (  )  ) {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P6_Replace_Expression]^if  (  valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P6_Replace_Expression]^if  ( nameNode.isQualifiedName( && valueNode.isQualifiedName()) )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^if  ( valueNodeameNode.isQualifiedName (  )  ) {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P15_Unwrap_Block]^abstractMethodAssignmentNodes.add(new com.google.javascript.jscomp.GoogleCodeRemoval.RemovableAssignment(n.getFirstChild(), n, t));^131^132^133^134^135^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P16_Remove_Block]^^131^132^133^134^135^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P4_Replace_Constructor]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) ,  t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P4_Replace_Constructor]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^abstractMethodAssignmentNodes.add ( tew RemovableAssignment ( n.getFirstChild (  ) , n, n )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n .getLastChild (  )  , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^n .getLastChild (  )  , n, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^n .getLastChild (  )  , valueNode, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^Node nameNode = n .getLastChild (  )  ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^Node valueNodeameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P11_Insert_Donor_Statement]^Node valueNode = n.getLastChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^Node valueNode = parent.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node valueNode = n.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^128^^^^^126^138^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^Node valueNode = valueNode.getLastChild (  ) ;^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^129^^^^^126^138^Node valueNode = n.getLastChild (  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^if  ( nameNode .getQualifiedName (  )   && valueNode^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^132^133^134^135^136^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^ABSTRACT_METHOD_NAME.equals ( parent.getQualifiedName (  )  )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^ABSTRACT_METHOD_NAME.equals ( valueNode .isQualifiedName (  )   )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P14_Delete_Statement]^^133^134^135^136^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  { abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ; }^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^ABSTRACT_METHOD_NAME.equals ( parent .isQualifiedName (  )   )  )  {^133^^^^^126^138^ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^n.getFirstChild (  ) , valueNode, t )  ) ;^135^^^^^126^138^n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( parentameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( n.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P5_Replace_Variable]^if  ( ABSTRACT_METHOD_NAME.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && nameNode.equals ( valueNode.getQualifiedName (  )  )  )  {^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^if  ( nameNode .getQualifiedName (  )   && parent^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^abstractMethodAssignmentNodes.add ( valueNodeew RemovableAssignment ( n .getLastChild (  )  , n, t )  ) ;^134^135^^^^126^138^abstractMethodAssignmentNodes.add ( new RemovableAssignment ( n.getFirstChild (  ) , n, t )  ) ;^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P8_Replace_Mix]^if  ( valueNode .getQualifiedName (  )   && valueNode^131^132^133^^^126^138^if  ( nameNode.isQualifiedName (  )  && valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
[P7_Replace_Invocation]^valueNode .getQualifiedName (  )   && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^132^133^^^^126^138^valueNode.isQualifiedName (  )  && ABSTRACT_METHOD_NAME.equals ( valueNode.getQualifiedName (  )  )  )  {^[CLASS] FindAbstractMethods  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  nameNode  parent  valueNode  
