[P8_Replace_Mix]^private static  Logger logger = Logger.getLogger ( RemoveUnusedNames.class.getName (  )  ) ;^34^35^^^^34^35^private static final Logger logger = Logger.getLogger ( RemoveUnusedNames.class.getName (  )  ) ;^[CLASS] RemoveUnusedNames   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^46^^^^^44^47^this.compiler = compiler;^[CLASS] RemoveUnusedNames  [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)   AbstractCompiler compiler boolean canModifyExterns [VARIABLES] Logger  logger  AbstractCompiler  compiler  boolean  canModifyExterns  
[P5_Replace_Variable]^analyzer.process (  root ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P5_Replace_Variable]^analyzer.process ( externRoot ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P5_Replace_Variable]^analyzer.process ( root, externRoot ) ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P8_Replace_Mix]^analyzer .process ( root , root )  ;^52^^^^^49^54^analyzer.process ( externRoot, root ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P14_Delete_Statement]^^52^53^^^^49^54^analyzer.process ( externRoot, root ) ; removeUnusedProperties ( analyzer.getGraph (  )  ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P14_Delete_Statement]^^53^^^^^49^54^removeUnusedProperties ( analyzer.getGraph (  )  ) ;^[CLASS] RemoveUnusedNames  [METHOD] process [RETURN_TYPE] void   Node externRoot Node root [VARIABLES] AnalyzeNameReferences  analyzer  AbstractCompiler  compiler  boolean  Logger  logger  Node  externRoot  root  
[P2_Replace_Operator]^if  ( nameInfo == null && !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^if  ( nameInfo != null || !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( name == null || !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P5_Replace_Variable]^if  ( nameInfoInfo == null || !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( nameInfo == null ) {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  (  !nameInfo.isReferenced (  )  )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P6_Replace_Expression]^if  ( "Removed unused name" + name )  {^64^^^^^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  {^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P15_Unwrap_Block]^name.remove(); compiler.reportCodeChange(); com.google.javascript.jscomp.RemoveUnusedNames.logger.fine(("Removed unused name" + name));^64^65^66^67^68^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  { name.remove (  ) ; compiler.reportCodeChange (  ) ; logger.fine ( "Removed unused name" + name ) ; }^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P16_Remove_Block]^^64^65^66^67^68^60^70^if  ( nameInfo == null || !nameInfo.isReferenced (  )  )  { name.remove (  ) ; compiler.reportCodeChange (  ) ; logger.fine ( "Removed unused name" + name ) ; }^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^65^^^^^60^70^name.remove (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^66^^^^^60^70^compiler.reportCodeChange (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^logger.fine ( "Removed unused name"   instanceof   name ) ;^67^^^^^60^70^logger.fine ( "Removed unused name" + name ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P3_Replace_Literal]^logger.fine ( "Removed unused nameoved unused na" + name ) ;^67^^^^^60^70^logger.fine ( "Removed unused name" + name ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^67^^^^^60^70^logger.fine ( "Removed unused name" + name ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^Name name = node .getAnnotation (  )  ;^62^^^^^60^70^Name name = node.getValue (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^NameInfo nameInfo = node.getAnnotation (  ) ;Name name = node.getValue (  ) ;^62^^^^^60^70^Name name = node.getValue (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P7_Replace_Invocation]^NameInfo nameInfo = node .getValue (  )  ;^63^^^^^60^70^NameInfo nameInfo = node.getAnnotation (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P11_Insert_Donor_Statement]^Name name = node.getValue (  ) ;NameInfo nameInfo = node.getAnnotation (  ) ;^63^^^^^60^70^NameInfo nameInfo = node.getAnnotation (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^62^^^^^60^70^Name name = node.getValue (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P14_Delete_Statement]^^63^^^^^60^70^NameInfo nameInfo = node.getAnnotation (  ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P2_Replace_Operator]^logger.fine ( "Removed unused name"  <=  name ) ;^67^^^^^60^70^logger.fine ( "Removed unused name" + name ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
[P3_Replace_Literal]^logger.fine ( "Removed unused nameR" + name ) ;^67^^^^^60^70^logger.fine ( "Removed unused name" + name ) ;^[CLASS] RemoveUnusedNames  [METHOD] removeUnusedProperties [RETURN_TYPE] void   NameReferenceGraph graph [VARIABLES] AbstractCompiler  compiler  NameInfo  nameInfo  boolean  GraphNode  node  Logger  logger  NameReferenceGraph  graph  Name  name  
