[P1_Replace_Type]^static final char OBJECT_PROPERTY_STRING = "goog.testing.ObjectPropertyString";^41^42^^^^41^42^static final String OBJECT_PROPERTY_STRING = "goog.testing.ObjectPropertyString";^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final String OBJECT_PROPERTY_STRING = "esting.Objecoog.testing.ObjectPropertyString";^41^42^^^^41^42^static final String OBJECT_PROPERTY_STRING = "goog.testing.ObjectPropertyString";^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P1_Replace_Type]^public static final char EXTERN_OBJECT_PROPERTY_STRING = "JSCompiler_ObjectPropertyString";^44^45^^^^44^45^public static final String EXTERN_OBJECT_PROPERTY_STRING = "JSCompiler_ObjectPropertyString";^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^public static final String EXTERN_OBJECT_PROPERTY_STRING = "JSCompiler_ObjectPropertyStringropert";^44^45^^^^44^45^public static final String EXTERN_OBJECT_PROPERTY_STRING = "JSCompiler_ObjectPropertyString";^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" "  !=  "arguments, expected 2." ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" testing.ObjectPr" + "arguments, expected 2." ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2., expecte" ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P8_Replace_Mix]^final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^47^48^49^50^^47^50^static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_NUM_ARGS", "goog.testing.ObjectPropertyString instantiated with \"{0}\" " + "arguments, expected 2." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid "  >>  "argument, qualified name expected. Was \"{0}\"." ) ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "g.testing.Ooog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "nt, qualifie" ) ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR  = null ;^52^53^54^55^^52^55^static final DiagnosticType QUALIFIED_NAME_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, qualified name expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P2_Replace_Operator]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid "  <=  "argument, string literal expected. Was \"{0}\"." ) ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "BJECT_PROPERTY_STRSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid s" + "argument, string literal expected. Was \"{0}\"." ) ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "rgument, string lite" ) ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR  = null ;^57^58^59^60^^57^60^static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR = DiagnosticType.error ( "JSC_OBJECT_PROPERTY_STRING_STRING_LITERAL_EXPECTED", "goog.testing.ObjectPropertyString instantiated with invalid " + "argument, string literal expected. Was \"{0}\"." ) ;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^62^^^^^57^67^private final AbstractCompiler compiler;^[CLASS] ObjectPropertyStringPreprocess Callback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^65^^^^^64^66^this.compiler = compiler;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  
[P5_Replace_Variable]^new Node ( Token.VAR, Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^new Node ( Token. Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^new Node ( Token.VAR, Node.newString ( Token.NAME )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^new Node ( Token.VAR, Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^new Node ( Token.VAR, Node .getFirstChild (  )   )  ) ;^70^71^^^^68^73^new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^externs.addChildToBack ( new Node ( Token. Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^externs.copyInformationFrom ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^externs.addChildToBack ( new Node ( Token.VAR, Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P14_Delete_Statement]^^69^70^71^^^68^73^externs.addChildToBack ( new Node ( Token.VAR, Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P7_Replace_Invocation]^Node .getFirstChild (  )   )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P8_Replace_Mix]^Node.getLineno ( Token.NAME, OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P14_Delete_Statement]^^71^72^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ; NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^71^^^^^68^73^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new Callback (  )  ) ;^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P14_Delete_Statement]^^72^^^^^68^73^NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  externs  root  
[P5_Replace_Variable]^if  ( OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( EXTERN_OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( OBJECT_PROPERTY_STRING.equals ( n.newString (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newName = Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING ) ;^78^79^^^^63^93^Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newName = Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^78^79^^^^63^93^Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node.newString ( Token.NAME, OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^79^80^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ; newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING )  )  ) ;Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^newName.copyInformationFrom ( parent ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^newName.replaceChild ( n ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^newName .getLineno (  )  ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^80^81^82^83^84^65^95^newName.copyInformationFrom ( n ) ; parent.replaceChild ( n, newName ) ; compiler.reportCodeChange (  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( objectName, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( n, secondArgument ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild (  newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report (  ) ;^82^^^^^67^97^compiler.reportCodeChange (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^82^83^^^^67^97^compiler.reportCodeChange (  ) ; return;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newName = Node .getFirstChild (  )  ;^78^79^^^^63^93^Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( OBJECT_PROPERTY_STRING.equals ( n .isQualifiedName (  )   )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( EXTERN_OBJECT_PROPERTY_STRING.equals ( n.newString (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^77^^^^^62^92^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node.getLineno ( Token.NAME, OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^newName.copyInformationFrom ( secondArgument ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( secondArgument, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^82^^^^66^96^parent.replaceChild ( n, newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgument.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n.newString (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n .getLineno (  )   != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( parent.newString (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( secondArgument.getType (  )  != Token.STRING )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^89^90^91^^^74^104^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^89^90^91^^^74^104^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( parent.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node objectName = secondArgument.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node objectName = n.newString (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node objectName = parent.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node objectName = n .replaceChild ( objectName , n )  ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node objectName = objectName.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.newString (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^95^96^97^98^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^95^96^97^98^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^95^^^^^80^110^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^objectName.newString (  )  )  )  {^96^^^^^81^111^objectName.getQualifiedName (  )  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^96^97^98^^^81^111^objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( n.getChildCount (  )  > 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P3_Replace_Literal]^if  ( n.getChildCount (  )  != 2 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( objectName.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P6_Replace_Expression]^if  ( "" + n.getChildCount (  ) )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n.newString (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n .getCharno (  )   != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( n.getChildCount (  )  != 3L )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.INVALID_NUM_ARGUMENTS_ERROR, ("" + (n.getChildCount())))); return ;^100^101^102^103^104^85^115^if  ( n.getChildCount (  )  != 3 )  { compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^100^101^102^103^104^85^115^if  ( n.getChildCount (  )  != 3 )  { compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ==  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, STRING_LITERAL_EXPECTED_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.newString (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, secondArgument, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^101^^^^^86^116^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^101^^^^^86^116^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  <=  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, objectName, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n .getCharno (  )   )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^"" + secondArgument.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^"" + n.newString (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^"" + parent.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( n.getChildCount (  )  != 3 )  { "" + n.getChildCount (  )  )  ) ; return; }^102^103^^^^87^117^"" + n.getChildCount (  )  )  ) ; return;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( secondArgument.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ^  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ||  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, objectName, INVALID_NUM_ARGUMENTS_ERROR, "" + n .getCharno (  )   )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^"" + n .getCharno (  )   )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( n.getChildCount (  )  != 3 )  { "" + n.getChildCount (  )  )  ) ; }^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node firstArgument = secondArgument.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName.newString (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName .getLineno (  )  ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node firstArgument = parent.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node firstArgument = objectName.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !firstArgument.newString (  )  )  {^107^^^^^92^122^if  ( !firstArgument.isQualifiedName (  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( !firstArgument .getQualifiedName (  )   )  {^107^^^^^92^122^if  ( !firstArgument.isQualifiedName (  )  )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, firstArgument, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.QUALIFIED_NAME_EXPECTED_ERROR, com.google.javascript.rhino.Token.name(firstArgument.getType()))); return ;^107^108^109^110^111^92^122^if  ( !firstArgument.isQualifiedName (  )  )  { compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^107^108^109^110^111^92^122^if  ( !firstArgument.isQualifiedName (  )  )  { compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^107^^^^^92^122^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^107^^^^^92^122^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, firstArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, firstArgument,  Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.newString (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler .reportCodeChange (  )   )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^108^^^^^93^123^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^108^^^^^93^123^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( secondArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( firstArgument.newString (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( firstArgument .getLineno (  )   )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( secondArgument.newString (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^110^111^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ; return;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Token.name ( secondArgument.getType (  )  )  )  ) ;Token.name ( firstArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, objectName, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.newString (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument .getLineno (  )   )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( objectName.newString (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node secondArgument = parent.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node secondArgument = firstArgument.newString (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node secondArgument = objectName.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node secondArgument = secondArgument.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( secondArgument.getType (  )  < Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( objectName.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( secondArgument.newString (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( n.getType (  )  != Token.NEW )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, secondArgument, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR, com.google.javascript.rhino.Token.name(secondArgument.getType()))); return ;^115^116^117^118^119^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  { compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^115^116^117^118^119^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  { compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^115^^^^^100^130^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^115^^^^^100^130^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument,  Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.newString (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^116^^^^^101^131^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^116^^^^^101^131^[Delete]^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, STRING_LITERAL_EXPECTED_ERROR, secondArgument, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, objectName, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.newString (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( secondArgument.newString (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( secondArgument .getLineno (  )   )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^118^119^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ; return;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Token.name ( firstArgument.getType (  )  )  )  ) ;Token.name ( secondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( secondArgument.getType (  )  != Token.STRING )  { Token.name ( secondArgument.getType (  )  )  )  ) ; }^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( objectName .getLineno (  )   )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( secondArgument.getType (  )  != Token.STRING )  { Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^118^119^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ; return;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( secondArgument .getLineno (  )   != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( objectName.newString (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, objectName, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( objectName.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( newSecondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) .getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getString (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.reportCodeChange (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.newString (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument .getNext (  )  , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.newString (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument .getLineno (  )   ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , parent.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , objectName.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.newString (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) .getString (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.reportCodeChange (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^firstArgument.getLineno (  ) , objectName.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  ) , firstArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^firstArgument.newString (  ) , secondArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.getLineno (  ) , firstArgument.newString (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  |  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   ||  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) .getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.newString (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  )  .getGlobalObject (  )  , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.newString (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument .getLineno (  )  .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.newString (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument .getNext (  )  , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.newString (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  >>  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   <  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( parent.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.newString (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^firstArgument.newString (  )  + "." + secondArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument .getLineno (  )  .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.getLineno (  ) , parent.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.newString (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^secondArgument.newString (  ) , objectName.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^128^129^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ; n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.getLineno (  ) , secondArgument.newString (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^secondArgument.getLineno (  ) , newSecondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, newFirstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newFirstArgument, firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .getFirstChild (  )  ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^129^130^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ; n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, newSecondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newSecondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .getFirstChild (  )  ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( secondArgument, parentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report (  ) ;^132^^^^^117^147^compiler.reportCodeChange (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^132^^^^^117^147^compiler.reportCodeChange (  ) ;^[CLASS] ObjectPropertyStringPreprocess Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  String  EXTERN_OBJECT_PROPERTY_STRING  OBJECT_PROPERTY_STRING  boolean  NodeTraversal  t  DiagnosticType  INVALID_NUM_ARGUMENTS_ERROR  QUALIFIED_NAME_EXPECTED_ERROR  STRING_LITERAL_EXPECTED_ERROR  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( OBJECT_PROPERTY_STRING.equals ( parent.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( OBJECT_PROPERTY_STRING.equals ( n.newString (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( OBJECT_PROPERTY_STRING.equals ( parent.newString (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newName = Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^78^79^^^^63^93^Node newName = Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node.getLineno ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^79^80^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ; newName.copyInformationFrom ( n ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^newName.copyInformationFrom ( secondArgument ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^newName.replaceChild ( n ) ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^newName .getLineno (  )  ;^80^^^^^65^95^newName.copyInformationFrom ( n ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^80^81^82^83^84^65^95^newName.copyInformationFrom ( n ) ; parent.replaceChild ( n, newName ) ; compiler.reportCodeChange (  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( secondArgument, newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( n, objectName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild (  newName ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( newName, n ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report (  ) ;^82^^^^^67^97^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^82^83^^^^67^97^compiler.reportCodeChange (  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( n.equals ( OBJECT_PROPERTY_STRING.getQualifiedName (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^77^^^^^62^92^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( OBJECT_PROPERTY_STRING.equals ( secondArgument.newString (  )  )  )  {^77^^^^^62^92^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node .getFirstChild (  )  ;^79^^^^^64^94^Node.newString ( Token.NAME, EXTERN_OBJECT_PROPERTY_STRING ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^parent.replaceChild ( n, secondArgument ) ;^81^^^^^66^96^parent.replaceChild ( n, newName ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^81^82^^^^66^96^parent.replaceChild ( n, newName ) ; compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n.newString (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( parent.newString (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( secondArgument.getType (  )  != Token.STRING )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^89^90^91^^^74^104^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^89^90^91^^^74^104^if  ( n.getType (  )  != Token.NEW )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgument.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( objectName.getType (  )  != Token.NEW )  {^89^^^^^74^104^if  ( n.getType (  )  != Token.NEW )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node objectName = secondArgument.getFirstChild (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node objectName = n.newString (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node objectName = n .replaceChild ( firstArgument , n )  ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node objectName = secondArgument.newString (  ) ;^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^93^^^^^78^108^Node objectName = n.getFirstChild (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( secondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.newString (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( OBJECT_PROPERTY_STRING.equals ( n.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^return ;^95^96^97^98^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^95^96^97^98^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName .isQualifiedName (  )   )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( newSecondArgument.getQualifiedName (  )  )  )  {^95^96^^^^80^110^if  ( !EXTERN_OBJECT_PROPERTY_STRING.equals ( objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( equals ( objectName.getQualifiedName (  )  )  )  )  {     return ; }^95^^^^^80^110^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^objectName.newString (  )  )  )  {^96^^^^^81^111^objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^objectName .isQualifiedName (  )   )  )  {^96^^^^^81^111^objectName.getQualifiedName (  )  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^96^97^98^^^81^111^objectName.getQualifiedName (  )  )  )  { return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( n.getChildCount (  )  == 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P3_Replace_Literal]^if  ( n.getChildCount (  )  != -1 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( parent.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P6_Replace_Expression]^if  ( "" + n.getChildCount (  ) )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n.newString (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( n .getCharno (  )   != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( n.getChildCount (  )  != 3 / 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, n, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.INVALID_NUM_ARGUMENTS_ERROR, ("" + (n.getChildCount())))); return ;^100^101^102^103^104^85^115^if  ( n.getChildCount (  )  != 3 )  { compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^100^101^102^103^104^85^115^if  ( n.getChildCount (  )  != 3 )  { compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  &&  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, INVALID_NUM_ARGUMENTS_ERROR, n, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.newString (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, secondArgument, INVALID_NUM_ARGUMENTS_ERROR, "" + n.newString (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^101^^^^^86^116^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^101^^^^^86^116^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  >>  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^"" + n.newString (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^"" + n .getCharno (  )   )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^"" + secondArgument.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^102^103^^^^87^117^"" + n.getChildCount (  )  )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( n.getChildCount (  )  != 3 )  { "" + n.getChildCount (  )  )  ) ; }^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( secondArgument.getChildCount (  )  != 3 )  {^100^^^^^85^115^if  ( n.getChildCount (  )  != 3 )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  <<  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( INVALID_NUM_ARGUMENTS_ERROR, n, t, "" + n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, ""  ==  n.getChildCount (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n .getCharno (  )   )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, parent, INVALID_NUM_ARGUMENTS_ERROR, "" + n.newString (  )  )  ) ;^101^102^^^^86^116^compiler.report ( JSError.make ( t, n, INVALID_NUM_ARGUMENTS_ERROR, "" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^"" + parent.getChildCount (  )  )  ) ;^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^102^^^^^87^117^"" + n.getChildCount (  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node firstArgument = secondArgument.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName.newString (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node secondArgument = firstArgument.getNext (  ) ;Node firstArgument = objectName.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node firstArgument = newSecondArgument.getNext (  ) ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node firstArgument = objectName .getLineno (  )  ;^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^106^^^^^91^121^Node firstArgument = objectName.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( !firstArgument.newString (  )  )  {^107^^^^^92^122^if  ( !firstArgument.isQualifiedName (  )  )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, firstArgument, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.QUALIFIED_NAME_EXPECTED_ERROR, com.google.javascript.rhino.Token.name(firstArgument.getType()))); return ;^107^108^109^110^111^92^122^if  ( !firstArgument.isQualifiedName (  )  )  { compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^107^108^109^110^111^92^122^if  ( !firstArgument.isQualifiedName (  )  )  { compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^107^^^^^92^122^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^107^^^^^92^122^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, firstArgument,  Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( firstArgument, t, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( QUALIFIED_NAME_EXPECTED_ERROR, firstArgument, t, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler .reportCodeChange (  )   )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.newString (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^108^^^^^93^123^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^108^^^^^93^123^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, firstArgument, 2, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument .getLineno (  )   )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, secondArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.newString (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( objectName.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( firstArgument.newString (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( secondArgument.newString (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Token.name ( secondArgument.getType (  )  )  )  ) ;Token.name ( firstArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( firstArgument .getLineno (  )   )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, objectName, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^108^109^110^^^93^123^compiler.report ( JSError.make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^110^111^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( secondArgument.getType (  )  )  )  ) ;^110^^^^^95^125^Token.name ( firstArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node secondArgument = firstArgument.newString (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node secondArgument = objectName.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Node firstArgument = objectName.getNext (  ) ;Node secondArgument = firstArgument.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node secondArgument = secondArgument.getNext (  ) ;^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^114^^^^^99^129^Node secondArgument = firstArgument.getNext (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^if  ( secondArgument.getType (  )  >= Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( secondArgument.newString (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^if  ( secondArgument .getLineno (  )   != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( objectName.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P9_Replace_Statement]^if  ( n.getType (  )  != Token.NEW )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, secondArgument, com.google.javascript.jscomp.ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR, com.google.javascript.rhino.Token.name(secondArgument.getType()))); return ;^115^116^117^118^119^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  { compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P16_Remove_Block]^^115^116^117^118^119^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  { compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^115^^^^^100^130^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( n.getChildCount (  )  )  != 3 )  {     compiler.report ( make ( t, n, INVALID_NUM_ARGUMENTS_ERROR,  ( "" +  ( n.getChildCount (  )  )  )  )  ) ;     return ; }^115^^^^^100^130^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, newSecondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make (  secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, secondArgument,  Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( secondArgument, t, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.newString (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument .getLineno (  )   )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler .reportCodeChange (  )   )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  ( ! ( firstArgument.isQualifiedName (  )  )  )  {     compiler.report ( make ( t, firstArgument, QUALIFIED_NAME_EXPECTED_ERROR, name ( firstArgument.getType (  )  )  )  ) ;     return ; }^116^^^^^101^131^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P13_Insert_Block]^if  (  ( secondArgument.getType (  )  )  !=  ( STRING )  )  {     compiler.report ( make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, name ( secondArgument.getType (  )  )  )  ) ;     return ; }^116^^^^^101^131^[Delete]^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^compiler.report ( JSError.make ( STRING_LITERAL_EXPECTED_ERROR, secondArgument, t, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, objectName, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.newString (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Token.name ( parent.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( secondArgument.newString (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^118^119^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^Token.name ( firstArgument.getType (  )  )  )  ) ;Token.name ( secondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( secondArgument.getType (  )  != Token.STRING )  { Token.name ( secondArgument.getType (  )  )  )  ) ; }^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Token.name ( secondArgument .getLineno (  )   )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( newSecondArgument.getType (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^if  ( parent.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^if  ( newSecondArgument.getType (  )  != Token.STRING )  {^115^^^^^100^130^if  ( secondArgument.getType (  )  != Token.STRING )  {^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, secondArgument, 0, Token.name ( secondArgument.getType (  )  )  )  ) ;^116^117^118^^^101^131^compiler.report ( JSError.make ( t, secondArgument, STRING_LITERAL_EXPECTED_ERROR, Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Token.name ( newSecondArgument.newString (  )  )  )  ) ;^118^^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P12_Insert_Condition]^if  ( secondArgument.getType (  )  != Token.STRING )  { Token.name ( secondArgument.getType (  )  )  )  ) ; return; }^118^119^^^^103^133^Token.name ( secondArgument.getType (  )  )  )  ) ; return;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , parent.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) .getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getCodingConvention (  ) .getGlobalObject (  ) , compiler.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getString (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.reportCodeChange (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.newString (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument .getNext (  )  , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.newString (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , secondArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument .getLineno (  )   ) ;^122^123^124^^^107^137^Node newFirstArgument = NodeUtil.newQualifiedNameNode ( compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) .getString (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.reportCodeChange (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^123^124^^^^108^138^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  ) , firstArgument.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^firstArgument.getLineno (  ) , objectName.getCharno (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.getLineno (  ) , firstArgument.newString (  )  ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.getLineno (  ) , firstArgument .getLineno (  )   ) ;^124^^^^^109^139^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  ||  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   ||  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P3_Replace_Literal]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "" + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( parent.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , objectName.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) .getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( secondArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , firstArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.newString (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.newString (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.newString (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument .getNext (  )  , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.newString (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument .getLineno (  )   ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.newString (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  !=  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P2_Replace_Operator]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )   <=  "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( objectName.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , parent.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument .isQualifiedName (  )   + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  )  .getGlobalObject (  )  , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument .getLineno (  )  .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^125^126^127^128^^110^140^Node newSecondArgument = NodeUtil.newQualifiedNameNode ( firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^firstArgument.getQualifiedName (  )  + "." + secondArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^firstArgument.newString (  )  + "." + objectName.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^126^127^128^^^111^141^firstArgument.getQualifiedName (  )  + "." + firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument.newString (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^firstArgument.getNext (  )  .getGlobalObject (  )  , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^compiler.getCodingConvention (  ) .getGlobalObject (  ) , firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^firstArgument .getLineno (  )  .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^127^128^^^^112^142^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^secondArgument.getLineno (  ) , parent.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.newString (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^128^129^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ; n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getLineno (  ) , firstArgument.getCharno (  )  ) ;secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^firstArgument.getNext (  ) .getString (  ) , secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^secondArgument.getLineno (  ) , secondArgument.newString (  )  ) ;^128^^^^^113^143^secondArgument.getLineno (  ) , secondArgument.getCharno (  )  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, secondArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( parent, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument, parent ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, firstArgumentewFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newFirstArgument, firstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^n .getFirstChild (  )  ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^129^130^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ; n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( secondArgument, newSecondArgument ) ;n.replaceChild ( firstArgument, newFirstArgument ) ;^129^^^^^114^144^n.replaceChild ( firstArgument, newFirstArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument, parent ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild (  newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( n, secondArgumentewSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P5_Replace_Variable]^n.replaceChild ( newSecondArgument, secondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P8_Replace_Mix]^n.replaceChild ( objectName, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P11_Insert_Donor_Statement]^n.replaceChild ( firstArgument, newFirstArgument ) ;n.replaceChild ( secondArgument, newSecondArgument ) ;^130^^^^^115^145^n.replaceChild ( secondArgument, newSecondArgument ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P7_Replace_Invocation]^compiler.report (  ) ;^132^^^^^117^147^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
[P14_Delete_Statement]^^132^^^^^117^147^compiler.reportCodeChange (  ) ;^[CLASS] Callback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  firstArgument  n  newFirstArgument  newName  newSecondArgument  objectName  parent  secondArgument  
