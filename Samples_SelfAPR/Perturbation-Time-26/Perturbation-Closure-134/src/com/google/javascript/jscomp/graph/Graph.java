[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^66^^^^^61^71^private static final long serialVersionUID = 1L;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^66^^^^^61^71^private static final long serialVersionUID = 1L;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^78^^^^^73^83^private static final long serialVersionUID = 1L;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^78^^^^^73^83^private static final long serialVersionUID = 1L;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P7_Replace_Invocation]^private List<GraphNode<N, E>> nodes = Lists.newLinkedList (  ) ;^287^^^^^282^292^private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P8_Replace_Mix]^private List<GraphNode<N, E>> nodes  = null ;^287^^^^^282^292^private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [VARIABLES] 
[P5_Replace_Variable]^super (  annotation ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[P5_Replace_Variable]^super ( annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[P5_Replace_Variable]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[P14_Delete_Statement]^^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  Graph  graph  boolean  List  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  Annotation  annotation  
[P14_Delete_Statement]^^81^^^^^80^82^super ( size ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Graph$GraphAnnotationState(int)   int size [VARIABLES] List  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  int  size  
[P8_Replace_Mix]^this.graph =  null;^290^^^^^289^291^this.graph = graph;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Graph)   Graph<N, E> graph [VARIABLES] List  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P5_Replace_Variable]^GraphNode<N, E> node1 = getNode ( n2 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^GraphNode<N, E> node1 = hasNode ( n1 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = graph.getNode ( value ) ;GraphNode<N, E> node1 = getNode ( n1 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;GraphNode<N, E> node1 = getNode ( n1 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node2 = getNode ( n2 ) ;GraphNode<N, E> node1 = getNode ( n1 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P8_Replace_Mix]^GraphNode<N, E> node1 = hasNode ( n2 ) ;^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P14_Delete_Statement]^^122^^^^^121^138^GraphNode<N, E> node1 = getNode ( n1 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^GraphNode<N, E> node2 = getNode ( n1 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^GraphNode<N, E> node2 = hasNode ( n2 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = graph.getNode ( value ) ;GraphNode<N, E> node2 = getNode ( n2 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;GraphNode<N, E> node2 = getNode ( n2 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node1 = getNode ( n1 ) ;GraphNode<N, E> node2 = getNode ( n2 ) ;^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P14_Delete_Statement]^^123^^^^^121^138^GraphNode<N, E> node2 = getNode ( n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P2_Replace_Operator]^if  ( node1 != null )  {^124^^^^^121^138^if  ( node1 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P6_Replace_Expression]^if  ( n1 + " does not exist in graph" )  {^124^^^^^121^138^if  ( node1 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P8_Replace_Mix]^if  ( node1 == false )  {^124^^^^^121^138^if  ( node1 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P9_Replace_Statement]^if  ( node2 == null )  {^124^^^^^121^138^if  ( node1 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n1 + " does not exist in graph"));^124^125^126^^^121^138^if  ( node1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P16_Remove_Block]^^124^125^126^^^121^138^if  ( node1 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( node2 == null )  {     throw new IllegalArgumentException (  ( n2 + " does not exist in graph" )  ) ; }^124^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( ! ( graph.hasNode ( value )  )  )  {     throw new IllegalArgumentException (  ( value + " does not exist in graph" )  ) ; }^124^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( value + " does not exist in graph" )  )   ;^125^^^^^121^138^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( node2 == null )  {     throw new IllegalArgumentException (  ( n2 + " does not exist in graph" )  ) ; }^125^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( ! ( graph.hasNode ( value )  )  )  {     throw new IllegalArgumentException (  ( value + " does not exist in graph" )  ) ; }^125^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( node1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^125^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P8_Replace_Mix]^return ;^125^^^^^121^138^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P2_Replace_Operator]^if  ( node2 != null )  {^127^^^^^121^138^if  ( node2 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P6_Replace_Expression]^if  ( n2 + " does not exist in graph" )  {^127^^^^^121^138^if  ( node2 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P8_Replace_Mix]^if  ( node2 == this )  {^127^^^^^121^138^if  ( node2 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P9_Replace_Statement]^if  ( node1 == null )  {^127^^^^^121^138^if  ( node2 == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((n2 + " does not exist in graph"));^127^128^129^^^121^138^if  ( node2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P16_Remove_Block]^^127^128^129^^^121^138^if  ( node2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )   ;^128^^^^^121^138^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( node2 == null )  {     throw new IllegalArgumentException (  ( n2 + " does not exist in graph" )  ) ; }^128^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( ! ( graph.hasNode ( value )  )  )  {     throw new IllegalArgumentException (  ( value + " does not exist in graph" )  ) ; }^128^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P13_Insert_Block]^if  ( node1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^128^^^^^121^138^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P8_Replace_Mix]^return ;^128^^^^^121^138^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edgeList = getEdges ( n2, n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edgeList = getEdges (  n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edgeList = getEdges ( n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^List<GraphEdge<N, E>> edgeList = getEdges ( n2, n1 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^List<GraphEdge<N, E>> edgeList = pushAnnotations ( n1, n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node1 = getNode ( n1 ) ;List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node2 = getNode ( n2 ) ;List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P14_Delete_Statement]^^130^^^^^121^138^List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P2_Replace_Operator]^if  ( e.getValue (  )  == edge && e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P2_Replace_Operator]^if  ( e.getValue (  )  != edge || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^if  ( edge.getValue (  )  == e || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P6_Replace_Expression]^if  ( e.getValue (  )  == edge ) {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P6_Replace_Expression]^if  (  e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^if  ( e.setAnnotation (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P15_Unwrap_Block]^return ;^133^134^135^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  { return; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P16_Remove_Block]^^133^134^135^^^121^138^if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  { return; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^connect (  edge, n2 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^connect ( n1,  n2 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^connect ( n1, edge ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^connect ( n2, edge, n1 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P5_Replace_Variable]^connect ( n1, n2, edge ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^connectIfNotFound ( n1, edge, n2 ) ;^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P14_Delete_Statement]^^137^^^^^121^138^connect ( n1, edge, n2 ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] connectIfNotFound [RETURN_TYPE] void   N n1 E edge N n2 [VARIABLES] Graph  graph  boolean  E  edge  List  edgeList  nodes  GraphNode  node1  node2  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  N  n1  n2  
[P7_Replace_Invocation]^return getNode ( value ) ;^165^^^^^164^166^return getNodeDegree ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] getWeight [RETURN_TYPE] int   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P14_Delete_Statement]^^165^^^^^164^166^return getNodeDegree ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] getWeight [RETURN_TYPE] int   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P2_Replace_Operator]^return getNode ( n )  == null;^195^^^^^194^196^return getNode ( n )  != null;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] hasNode [RETURN_TYPE] boolean   N n [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  n  
[P7_Replace_Invocation]^return hasNode ( n )  != null;^195^^^^^194^196^return getNode ( n )  != null;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] hasNode [RETURN_TYPE] boolean   N n [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  n  
[P14_Delete_Statement]^^195^^^^^194^196^return getNode ( n )  != null;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] hasNode [RETURN_TYPE] boolean   N n [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  n  
[P7_Replace_Invocation]^for  ( GraphNode<N, E> n : getEdges (  )  )  {^208^^^^^207^211^for  ( GraphNode<N, E> n : getNodes (  )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^208^209^210^^^207^211^for  ( GraphNode<N, E> n : getNodes (  )  )  { n.setAnnotation ( null ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^e.setAnnotation ( null ) ;n.setAnnotation ( null ) ;^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^as.first.setAnnotation ( as.second ) ;n.setAnnotation ( null ) ;^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^h.setAnnotation ( null ) ;n.setAnnotation ( null ) ;^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P12_Insert_Condition]^if  ( nodeAnnotationStack == null )  { n.setAnnotation ( null ) ; }^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P12_Insert_Condition]^if  ( edgeAnnotationStack == null )  { n.setAnnotation ( null ) ; }^209^^^^^207^211^n.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  GraphNode  n  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^for  ( GraphEdge<N, E> e : getNodes (  )  )  {^215^^^^^214^218^for  ( GraphEdge<N, E> e : getEdges (  )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P14_Delete_Statement]^^215^216^217^^^214^218^for  ( GraphEdge<N, E> e : getEdges (  )  )  { e.setAnnotation ( null ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P14_Delete_Statement]^^216^^^^^214^218^e.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P11_Insert_Donor_Statement]^as.first.setAnnotation ( as.second ) ;e.setAnnotation ( null ) ;^216^^^^^214^218^e.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P11_Insert_Donor_Statement]^n.setAnnotation ( null ) ;e.setAnnotation ( null ) ;^216^^^^^214^218^e.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P11_Insert_Donor_Statement]^h.setAnnotation ( null ) ;e.setAnnotation ( null ) ;^216^^^^^214^218^e.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P12_Insert_Condition]^if  ( edgeAnnotationStack == null )  { e.setAnnotation ( null ) ; }^216^^^^^214^218^e.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] clearEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  GraphEdge  e  long  serialVersionUID  
[P2_Replace_Operator]^if  ( nodeAnnotationStack != null )  {^225^^^^^224^229^if  ( nodeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^if  ( nodeAnnotationStack == true )  {^225^^^^^224^229^if  ( nodeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P9_Replace_Statement]^if  ( edgeAnnotationStack == null )  {^225^^^^^224^229^if  ( nodeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P15_Unwrap_Block]^nodeAnnotationStack = com.google.common.collect.Lists.newLinkedList();^225^226^227^^^224^229^if  ( nodeAnnotationStack == null )  { nodeAnnotationStack = Lists.newLinkedList (  ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P16_Remove_Block]^^225^226^227^^^224^229^if  ( nodeAnnotationStack == null )  { nodeAnnotationStack = Lists.newLinkedList (  ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( edgeAnnotationStack )  == null )  {     edgeAnnotationStack = newLinkedList (  ) ; }^225^^^^^224^229^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^nodeAnnotationStack = Lists.newArrayList (  ) ;^226^^^^^224^229^nodeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^nodeAnnotationStack  = null ;^226^^^^^224^229^nodeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^edgeAnnotationStack = Lists.newLinkedList (  ) ;nodeAnnotationStack = Lists.newLinkedList (  ) ;^226^^^^^224^229^nodeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( edgeAnnotationStack )  == null )  {     edgeAnnotationStack = newLinkedList (  ) ; }^226^^^^^224^229^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( nodeAnnotationStack )  == null )  {     nodeAnnotationStack = newLinkedList (  ) ; }^226^^^^^224^229^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^226^^^^^224^229^nodeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^nodeAnnotationStack  =  nodeAnnotationStack ;^226^^^^^224^229^nodeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^getNodes ( nodeAnnotationStack, getNodes (  )  ) ;^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^pushAnnotations ( nodeAnnotationStack, getEdges (  )  ) ;^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( edgeAnnotationStack ) ;pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( nodeAnnotationStack ) ;pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P12_Insert_Condition]^if  ( nodeAnnotationStack == null )  { pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ; }^228^^^^^224^229^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P3_Replace_Literal]^Preconditions.checkNotNull ( nodeAnnotationStack, "p" ) ;^236^237^^^^235^239^Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^236^237^^^^235^239^Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( edgeAnnotationStack, "Popping edge annotations without pushing." ) ;Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;^236^237^^^^235^239^Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^getNodes ( nodeAnnotationStack ) ;^238^^^^^235^239^popAnnotations ( nodeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^238^^^^^235^239^popAnnotations ( nodeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( edgeAnnotationStack ) ;popAnnotations ( nodeAnnotationStack ) ;^238^^^^^235^239^popAnnotations ( nodeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;popAnnotations ( nodeAnnotationStack ) ;^238^^^^^235^239^popAnnotations ( nodeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;popAnnotations ( nodeAnnotationStack ) ;^238^^^^^235^239^popAnnotations ( nodeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popNodeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P2_Replace_Operator]^if  ( edgeAnnotationStack != null )  {^246^^^^^245^250^if  ( edgeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^if  ( edgeAnnotationStack == false )  {^246^^^^^245^250^if  ( edgeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P9_Replace_Statement]^if  ( nodeAnnotationStack == null )  {^246^^^^^245^250^if  ( edgeAnnotationStack == null )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P15_Unwrap_Block]^edgeAnnotationStack = com.google.common.collect.Lists.newLinkedList();^246^247^248^^^245^250^if  ( edgeAnnotationStack == null )  { edgeAnnotationStack = Lists.newLinkedList (  ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P16_Remove_Block]^^246^247^248^^^245^250^if  ( edgeAnnotationStack == null )  { edgeAnnotationStack = Lists.newLinkedList (  ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( nodeAnnotationStack )  == null )  {     nodeAnnotationStack = newLinkedList (  ) ; }^246^^^^^245^250^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^edgeAnnotationStack = Lists.newArrayList (  ) ;^247^^^^^245^250^edgeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^edgeAnnotationStack  =  edgeAnnotationStack ;^247^^^^^245^250^edgeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^nodeAnnotationStack = Lists.newLinkedList (  ) ;edgeAnnotationStack = Lists.newLinkedList (  ) ;^247^^^^^245^250^edgeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( edgeAnnotationStack )  == null )  {     edgeAnnotationStack = newLinkedList (  ) ; }^247^^^^^245^250^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( nodeAnnotationStack )  == null )  {     nodeAnnotationStack = newLinkedList (  ) ; }^247^^^^^245^250^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^247^^^^^245^250^edgeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P8_Replace_Mix]^edgeAnnotationStack ;^247^^^^^245^250^edgeAnnotationStack = Lists.newLinkedList (  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^getNodes ( edgeAnnotationStack, getEdges (  )  ) ;^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^pushAnnotations ( edgeAnnotationStack, getNodes (  )  ) ;^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( edgeAnnotationStack ) ;pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( nodeAnnotationStack ) ;pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^249^^^^^245^250^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P3_Replace_Literal]^Preconditions.checkNotNull ( edgeAnnotationStack, "without pushinopping edge annotations without pushing." ) ;^257^258^^^^256^260^Preconditions.checkNotNull ( edgeAnnotationStack, "Popping edge annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^257^258^^^^256^260^Preconditions.checkNotNull ( edgeAnnotationStack, "Popping edge annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;Preconditions.checkNotNull ( edgeAnnotationStack, "Popping edge annotations without pushing." ) ;^257^258^^^^256^260^Preconditions.checkNotNull ( edgeAnnotationStack, "Popping edge annotations without pushing." ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P5_Replace_Variable]^popAnnotations ( 4 ) ;^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P7_Replace_Invocation]^getNodes ( edgeAnnotationStack ) ;^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P14_Delete_Statement]^^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;popAnnotations ( edgeAnnotationStack ) ;^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;popAnnotations ( edgeAnnotationStack ) ;^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^popAnnotations ( nodeAnnotationStack ) ;popAnnotations ( edgeAnnotationStack ) ;^259^^^^^256^260^popAnnotations ( edgeAnnotationStack ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popEdgeAnnotations [RETURN_TYPE] void   [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  
[P5_Replace_Variable]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^GraphNode<N, E> node = graph.hasNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node1 = getNode ( n1 ) ;GraphNode<N, E> node = graph.getNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node2 = getNode ( n2 ) ;GraphNode<N, E> node = graph.getNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P14_Delete_Statement]^^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P11_Insert_Donor_Statement]^nodes.add ( graph.getNode ( value )  ) ;GraphNode<N, E> node = graph.getNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P5_Replace_Variable]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P5_Replace_Variable]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P5_Replace_Variable]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^if  ( graph.getNode ( n.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^if  ( graph.getNeighborNodes ( n.setAnnotation (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P8_Replace_Mix]^if  ( graph .getNodes (  )  .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P15_Unwrap_Block]^return false;^296^297^298^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  { return false; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P16_Remove_Block]^^296^297^298^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  { return false; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P3_Replace_Literal]^return true;^297^^^^^293^301^return false;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^if  ( graph.getNeighborNodes ( n .setAnnotation ( 3 )   ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {     return false; }^296^^^^^293^301^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P3_Replace_Literal]^return false;^300^^^^^293^301^return true;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] Graph  graph  boolean  List  edgeList  nodes  GraphNode  n  node  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^if  ( !graph.getNode ( value )  )  {^304^^^^^303^308^if  ( !graph.hasNode ( value )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((value + " does not exist in graph"));^304^305^306^^^303^308^if  ( !graph.hasNode ( value )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P16_Remove_Block]^^304^305^306^^^303^308^if  ( !graph.hasNode ( value )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( node2 == null )  {     throw new IllegalArgumentException (  ( n2 + " does not exist in graph" )  ) ; }^304^^^^^303^308^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( node1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^304^^^^^303^308^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( n1 + " does not exist in graph" )  )   ;^305^^^^^303^308^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( node2 == null )  {     throw new IllegalArgumentException (  ( n2 + " does not exist in graph" )  ) ; }^305^^^^^303^308^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( ! ( graph.hasNode ( value )  )  )  {     throw new IllegalArgumentException (  ( value + " does not exist in graph" )  ) ; }^305^^^^^303^308^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P13_Insert_Block]^if  ( node1 == null )  {     throw new IllegalArgumentException (  ( n1 + " does not exist in graph" )  ) ; }^305^^^^^303^308^[Delete]^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P8_Replace_Mix]^return true;^305^^^^^303^308^throw new IllegalArgumentException  (" ")  ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P5_Replace_Variable]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P7_Replace_Invocation]^nodes.add ( graph.hasNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P8_Replace_Mix]^nodes.add ( graph .getNodes (  )   ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P14_Delete_Statement]^^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = graph.getNode ( value ) ;nodes.add ( graph.getNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P12_Insert_Condition]^if  ( !graph.hasNode ( value )  )  { nodes.add ( graph.getNode ( value )  ) ; }^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P5_Replace_Variable]^nodes.add ( 2.getNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P8_Replace_Mix]^nodes.add ( null.getNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  edgeList  nodes  Graph  graph  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  long  serialVersionUID  N  value  
[P3_Replace_Literal]^stack.push ( new GraphAnnotationState ( haveAnnotations.size() - 5  )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P4_Replace_Constructor]^stack.push ( stack.push (  new AnnotationState ( h, h.getAnnotation (  )  )   )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P3_Replace_Literal]^stack.push ( new GraphAnnotationState ( haveAnnotations.size() + 9  )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P8_Replace_Mix]^stack.push ( new GraphAnnotationState ( 1.size (  )  )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P3_Replace_Literal]^stack.push ( new GraphAnnotationState ( haveAnnotations.size() - 1  )  ) ;^318^^^^^315^323^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P4_Replace_Constructor]^stack.peek (  ) .add ( stack.peek (  ) .add (  new GraphAnnotationState ( haveAnnotations.size (  )  )   )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P7_Replace_Invocation]^stack.peek (  ) .add ( new AnnotationState ( h, h.setAnnotation (  )  )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P4_Replace_Constructor]^stack.peek (  ) .add ( new AnnotationState (  h.getAnnotation (  )  )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P7_Replace_Invocation]^stack.push (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P8_Replace_Mix]^stack.peek (  )  .add (  )   ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^320^321^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ; h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^320^^^^^315^323^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^321^^^^^315^323^h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^e.setAnnotation ( null ) ;h.setAnnotation ( null ) ;^321^^^^^315^323^h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^as.first.setAnnotation ( as.second ) ;h.setAnnotation ( null ) ;^321^^^^^315^323^h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^n.setAnnotation ( null ) ;h.setAnnotation ( null ) ;^321^^^^^315^323^h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P12_Insert_Condition]^if  ( edgeAnnotationStack == null )  { h.setAnnotation ( null ) ; }^321^^^^^315^323^h.setAnnotation ( null ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] pushAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack Annotatable> haveAnnotations [VARIABLES] Annotatable  h  Graph  graph  boolean  Collection  haveAnnotations  List  edgeList  nodes  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P5_Replace_Variable]^for  ( AnnotationState as : this.pop (  )  )  {^329^^^^^328^332^for  ( AnnotationState as : stack.pop (  )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P7_Replace_Invocation]^for  ( AnnotationState as : stack.push (  )  )  {^329^^^^^328^332^for  ( AnnotationState as : stack.pop (  )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P8_Replace_Mix]^for  ( AnnotationState as : 0.pop (  )  )  {^329^^^^^328^332^for  ( AnnotationState as : stack.pop (  )  )  {^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^329^330^331^^^328^332^for  ( AnnotationState as : stack.pop (  )  )  { as.first.setAnnotation ( as.second ) ; }^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P14_Delete_Statement]^^330^^^^^328^332^as.first.setAnnotation ( as.second ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^e.setAnnotation ( null ) ;as.first.setAnnotation ( as.second ) ;^330^^^^^328^332^as.first.setAnnotation ( as.second ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^n.setAnnotation ( null ) ;as.first.setAnnotation ( as.second ) ;^330^^^^^328^332^as.first.setAnnotation ( as.second ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P11_Insert_Donor_Statement]^h.setAnnotation ( null ) ;as.first.setAnnotation ( as.second ) ;^330^^^^^328^332^as.first.setAnnotation ( as.second ) ;^[CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^66^^^^^61^71^private static final long serialVersionUID = 1L;^[CLASS] AnnotationState  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^66^^^^^61^71^private static final long serialVersionUID = 1L;^[CLASS] AnnotationState  [METHOD] popAnnotations [RETURN_TYPE] void   GraphAnnotationState> stack [VARIABLES] List  edgeList  nodes  Graph  graph  AnnotationState  as  boolean  Deque  edgeAnnotationStack  nodeAnnotationStack  stack  long  serialVersionUID  
[P5_Replace_Variable]^super (  annotation ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P5_Replace_Variable]^super ( annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P5_Replace_Variable]^super ( annotation, annotatable ) ;^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P14_Delete_Statement]^^69^^^^^68^70^super ( annotatable, annotation ) ;^[CLASS] AnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^78^^^^^73^83^private static final long serialVersionUID = 1L;^[CLASS] GraphAnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P8_Replace_Mix]^private static final long serialVersionUID  = null ;^78^^^^^73^83^private static final long serialVersionUID = 1L;^[CLASS] GraphAnnotationState  [METHOD] <init> [RETURN_TYPE] Annotation)   Annotatable annotatable Annotation annotation [VARIABLES] Annotatable  annotatable  boolean  long  serialVersionUID  Annotation  annotation  
[P14_Delete_Statement]^^81^^^^^80^82^super ( size ) ;^[CLASS] GraphAnnotationState  [METHOD] <init> [RETURN_TYPE] Graph$GraphAnnotationState(int)   int size [VARIABLES] long  serialVersionUID  int  size  boolean  
[P8_Replace_Mix]^private List<GraphNode<N, E>> nodes ;^287^^^^^282^292^private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^[CLASS] SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Graph$GraphAnnotationState(int)   int size [VARIABLES] long  serialVersionUID  int  size  boolean  
[P5_Replace_Variable]^this.graph = null;^290^^^^^289^291^this.graph = graph;^[CLASS] SimpleSubGraph  [METHOD] <init> [RETURN_TYPE] Graph)   Graph<N, E> graph [VARIABLES] List  nodes  Graph  graph  boolean  
[P5_Replace_Variable]^GraphNode<N, E> node = value.getNode ( graph ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P7_Replace_Invocation]^GraphNode<N, E> node = graph.hasNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P14_Delete_Statement]^^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P11_Insert_Donor_Statement]^nodes.add ( graph.getNode ( value )  ) ;GraphNode<N, E> node = graph.getNode ( value ) ;^294^^^^^293^301^GraphNode<N, E> node = graph.getNode ( value ) ;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P5_Replace_Variable]^if  ( n.getNeighborNodes ( graph.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P5_Replace_Variable]^if  ( graph.getNeighborNodes ( node.getValue (  )  ) .contains ( n )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P5_Replace_Variable]^if  ( node.getNeighborNodes ( n.getValue (  )  ) .contains ( graph )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P7_Replace_Invocation]^if  ( graph.getNode ( n.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P7_Replace_Invocation]^if  ( graph .getNode ( value )  .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P15_Unwrap_Block]^return false;^296^297^298^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  { return false; }^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P16_Remove_Block]^^296^297^298^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  { return false; }^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P3_Replace_Literal]^return true;^297^^^^^293^301^return false;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P13_Insert_Block]^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {     return false; }^296^^^^^293^301^[Delete]^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P5_Replace_Variable]^if  ( graph.getNeighborNodes ( 1.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P3_Replace_Literal]^return false;^300^^^^^293^301^return true;^[CLASS] SimpleSubGraph  [METHOD] isIndependentOf [RETURN_TYPE] boolean   N value [VARIABLES] List  nodes  GraphNode  n  node  Graph  graph  boolean  N  value  
[P7_Replace_Invocation]^if  ( !graph.getNode ( value )  )  {^304^^^^^303^308^if  ( !graph.hasNode ( value )  )  {^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((value + " does not exist in graph"));^304^305^306^^^303^308^if  ( !graph.hasNode ( value )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P16_Remove_Block]^^304^305^306^^^303^308^if  ( !graph.hasNode ( value )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P13_Insert_Block]^if  ( ! ( graph.hasNode ( value )  )  )  {     throw new IllegalArgumentException (  ( value + " does not exist in graph" )  ) ; }^305^^^^^303^308^[Delete]^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P8_Replace_Mix]^return ;^305^^^^^303^308^throw new IllegalArgumentException  (" ")  ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P7_Replace_Invocation]^nodes.add ( graph.hasNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P14_Delete_Statement]^^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P11_Insert_Donor_Statement]^GraphNode<N, E> node = graph.getNode ( value ) ;nodes.add ( graph.getNode ( value )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P12_Insert_Condition]^if  ( !graph.hasNode ( value )  )  { nodes.add ( graph.getNode ( value )  ) ; }^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
[P5_Replace_Variable]^nodes.add ( value.getNode ( graph )  ) ;^307^^^^^303^308^nodes.add ( graph.getNode ( value )  ) ;^[CLASS] SimpleSubGraph  [METHOD] addNode [RETURN_TYPE] void   N value [VARIABLES] List  nodes  Graph  graph  boolean  N  value  
