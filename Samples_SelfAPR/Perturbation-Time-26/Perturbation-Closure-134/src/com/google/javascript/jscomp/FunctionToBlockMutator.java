[P8_Replace_Mix]^this.compiler =  null;^46^^^^^44^48^this.compiler = compiler;^[CLASS] FunctionToBlockMutator  [METHOD] <init> [RETURN_TYPE] Supplier)   AbstractCompiler compiler String> safeNameIdSupplier [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  
[P5_Replace_Variable]^this.safeNameIdSupplier = this;^47^^^^^44^48^this.safeNameIdSupplier = safeNameIdSupplier;^[CLASS] FunctionToBlockMutator  [METHOD] <init> [RETURN_TYPE] Supplier)   AbstractCompiler compiler String> safeNameIdSupplier [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  
[P8_Replace_Mix]^this.safeNameIdSupplier =  null;^47^^^^^44^48^this.safeNameIdSupplier = safeNameIdSupplier;^[CLASS] FunctionToBlockMutator  [METHOD] <init> [RETURN_TYPE] Supplier)   AbstractCompiler compiler String> safeNameIdSupplier [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  
[P5_Replace_Variable]^Node newFnNode = newBlock.cloneTree (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^Node newFnNode = fnNode.newString (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node newFnNode = newBlock.newString (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node newFnNode = fnNode.cloneTree (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Node newValue = entry.getValue (  ) .cloneTree (  ) ;Node newFnNode = fnNode.cloneTree (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node newFnNode = newFnNode.newString (  ) ;^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^63^^^^^48^78^Node newFnNode = fnNode.cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^makeLocalNamesUnique ( newBlock, isCallInLoop ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^makeLocalNamesUnique ( newFnNode, needsDefaultResult ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^makeLocalNamesUnique (  isCallInLoop ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^makeLocalNamesUnique ( newFnNode ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^makeLocalNamesUnique ( isCallInLoop, newFnNode ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^addDummyAssignment ( newFnNode, isCallInLoop ) ;^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^67^^^^^52^82^makeLocalNamesUnique ( newFnNode, isCallInLoop ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newBlock ) ;^71^72^^^^56^86^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^FunctionArgumentInjector.findModifiedParameters ( inlineResult ) ;^72^^^^^57^87^FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newBlock, callNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, newFnNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode,  this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, this.safeNameIdSupplier, callNode ) ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^LinkedHashMap<String, Node> args = FunctionArgumentInjector .findModifiedParameters ( newBlock )  ;^73^74^75^^^58^88^LinkedHashMap<String, Node> args = FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newBlock, callNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, newBlock, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap (  callNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode,  this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( callNode, newFnNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.getFunctionCallParameterMap ( this.safeNameIdSupplier, callNode, newFnNode ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^FunctionArgumentInjector .findModifiedParameters ( newFnNode )  ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^FunctionArgumentInjector.findModifiedParameters ( newFnNode ) ;FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^74^75^^^^59^89^FunctionArgumentInjector.getFunctionCallParameterMap ( newFnNode, callNode, this.safeNameIdSupplier ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^76^^^^^61^91^boolean hasArgs = !args.isEmpty (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^if  ( needsDefaultResult )  {^77^^^^^62^92^if  ( hasArgs )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P15_Unwrap_Block]^com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(newFnNode, args, namesToAlias, compiler.getCodingConvention());^77^78^79^80^^62^92^if  ( hasArgs )  { FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P16_Remove_Block]^^77^78^79^80^^62^92^if  ( hasArgs )  { FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newBlock, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments (  args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode,  namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args,  compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( args, newFnNode, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, namesToAlias, args, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, compiler, namesToAlias.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( compiler, args, namesToAlias, newFnNode.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^FunctionArgumentInjector.inject ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getUniqueNameIdSupplier (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P13_Insert_Block]^if  ( hasArgs )  {     maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ; }^78^^^^^63^93^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^newFnNode, args, namesToAlias, compiler.getUniqueNameIdSupplier (  )  ) ;^79^^^^^64^94^newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^79^^^^^64^94^newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^79^^^^^64^94^newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( inlineResult, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, compiler, namesToAlias, args.getCodingConvention (  )  ) ;^78^79^^^^63^93^FunctionArgumentInjector.maybeAddTempsForCallArguments ( newFnNode, args, namesToAlias, compiler.getCodingConvention (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^Node newBlock = NodeUtil.isStatementBlock ( newFnNode ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^Node newBlock = NodeUtil .newUndefinedNode (  )  ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node newBlock = NodeUtil.getFunctionBody ( inlineResult ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Node retVal = NodeUtil.newUndefinedNode (  ) ;Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node newBlock = NodeUtil.getFunctionBody ( newBlock ) ;^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^82^^^^^67^97^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^newBlock.newString (  ) ;^84^^^^^69^99^newBlock.detachFromParent (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^84^^^^^69^99^newBlock.detachFromParent (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^if  ( needsDefaultResult )  {^86^^^^^71^101^if  ( hasArgs )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node inlineResult = aliasAndInlineArguments(newBlock, args, namesToAlias); com.google.common.base.Preconditions.checkState((newBlock == inlineResult));^86^87^88^89^90^71^101^if  ( hasArgs )  { Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ; Preconditions.checkState ( newBlock == inlineResult ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P16_Remove_Block]^^86^87^88^89^90^71^101^if  ( hasArgs )  { Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ; Preconditions.checkState ( newBlock == inlineResult ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments (  args, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments ( newBlock,  namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments ( newBlock, args ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments ( namesToAlias, args, newBlock ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments ( args, newBlock, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node inlineResult = aliasAndInlineArguments ( newBlock, namesToAlias, args ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node inlineResult = aliasAndInlineArguments ( newFnNode, args, namesToAlias ) ;^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^87^88^^^^72^102^Node inlineResult = aliasAndInlineArguments ( newBlock, args, namesToAlias ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P2_Replace_Operator]^Preconditions.checkState ( newBlock >= inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Preconditions.checkState ( newFnNode == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Preconditions.checkState ( newBlock == newFnNode ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Preconditions.checkState ( inlineResult == newBlock ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( callNode )  ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( result == fnTemplateRoot ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( labelName ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;Preconditions.checkState ( newBlock == inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P2_Replace_Operator]^Preconditions.checkState ( newBlock != inlineResult ) ;^89^^^^^74^104^Preconditions.checkState ( newBlock == inlineResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^if  ( needsDefaultResult )  {^97^^^^^82^112^if  ( isCallInLoop )  {^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P15_Unwrap_Block]^fixUnitializedVarDeclarations(newBlock);^97^98^99^^^82^112^if  ( isCallInLoop )  { fixUnitializedVarDeclarations ( newBlock ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P16_Remove_Block]^^97^98^99^^^82^112^if  ( isCallInLoop )  { fixUnitializedVarDeclarations ( newBlock ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^fixUnitializedVarDeclarations ( inlineResult ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^hasReturnAtExit ( newBlock ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^fixUnitializedVarDeclarations ( newFnNode ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^fixUnitializedVarDeclarations ( c ) ;fixUnitializedVarDeclarations ( newBlock ) ;^98^^^^^83^113^fixUnitializedVarDeclarations ( newBlock ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P13_Insert_Block]^if  ( isCallInLoop )  {     fixUnitializedVarDeclarations ( newBlock ) ; }^98^^^^^83^113^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P1_Replace_Type]^char labelName = getLabelNameForFunction ( fnName ) ;^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^String labelName = getLabelNameForFunction ( resultName ) ;^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^String labelName = hasReturnAtExit ( fnName ) ;^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^String labelName = hasReturnAtExit ( resultName ) ;^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^101^^^^^86^116^String labelName = getLabelNameForFunction ( fnName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newFnNode, resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, resultName, resultName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, isCallInLoop ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns (  resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock,  labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, resultName,  needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( needsDefaultResult, resultName, labelName, newBlock ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, labelName, resultName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, needsDefaultResult, labelName, resultName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P7_Replace_Invocation]^Node injectableBlock = replaceReturnWithBreak ( newBlock, resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node injectableBlock = replaceReturnWithBreak ( newFnNode, resultName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, labelName, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( resultName, newBlock, labelName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Node injectableBlock = replaceReturns ( newBlock, resultName, needsDefaultResult, labelName ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Node injectableBlock = replaceReturns ( newBlock, resultName, fnName, needsDefaultResult ) ;^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^102^103^^^^87^117^Node injectableBlock = replaceReturns ( newBlock, resultName, labelName, needsDefaultResult ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P2_Replace_Operator]^Preconditions.checkState ( injectableBlock == null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^Preconditions.checkState ( newFnNode != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P8_Replace_Mix]^Preconditions .checkNotNull ( injectableBlock )  ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P14_Delete_Statement]^^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( result == fnTemplateRoot ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( labelName ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;Preconditions.checkState ( injectableBlock != null ) ;^104^^^^^89^119^Preconditions.checkState ( injectableBlock != null ) ;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^return newBlock;^106^^^^^91^121^return injectableBlock;^[CLASS] FunctionToBlockMutator  [METHOD] mutate [RETURN_TYPE] Node   String fnName Node fnNode Node callNode String resultName boolean needsDefaultResult boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  boolean  hasArgs  isCallInLoop  needsDefaultResult  Set  namesToAlias  Node  callNode  fnNode  injectableBlock  inlineResult  newBlock  newFnNode  Supplier  safeNameIdSupplier  String  fnName  labelName  resultName  LinkedHashMap  args  
[P5_Replace_Variable]^if  ( NodeUtil.isLoopStructure ( name )  )  {^117^^^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n )  )  {^117^^^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( name )   )  {^117^^^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P15_Unwrap_Block]^return ;^117^118^119^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  { return; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P16_Remove_Block]^^117^118^119^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  { return; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( c )   )  {^117^^^^^114^134^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( isLoopStructure ( n )  )  {     return ; }^117^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( c )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( NodeUtil.newExpr ( n )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( n )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node name = n.getFirstChild(); if (!(name.hasChildren())) {    name.addChildToBack(com.google.javascript.jscomp.NodeUtil.newUndefinedNode());}; return ;^122^123^^125^126^114^134^if  ( NodeUtil.isVar ( n )  )  { Node name = n.getFirstChild (  ) ; if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P16_Remove_Block]^^122^123^^125^126^114^134^if  ( NodeUtil.isVar ( n )  )  { Node name = n.getFirstChild (  ) ; if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( !name.newString (  )  )  {^125^^^^^114^134^if  ( !name.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P9_Replace_Statement]^if  ( node.hasChildren (  )  )  {^125^^^^^114^134^if  ( !name.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P15_Unwrap_Block]^name.addChildToBack(com.google.javascript.jscomp.NodeUtil.newUndefinedNode());^125^126^127^^^114^134^if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P16_Remove_Block]^^125^126^127^^^114^134^if  ( !name.hasChildren (  )  )  { name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( retVal == null )  {     retVal = newUndefinedNode (  ) ; }^125^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( retVal != null )  {     resultNode = newExpr ( retVal ) ; }^125^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P14_Delete_Statement]^^126^^^^^114^134^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( retVal == null )  {     retVal = newUndefinedNode (  ) ; }^126^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( ! ( name.hasChildren (  )  )  )  {     name.addChildToBack ( newUndefinedNode (  )  ) ; }^126^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( isLoopStructure ( n )  )  {     return ; }^126^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^Node came = n.getFirstChild (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^Node name = n.newString (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P11_Insert_Donor_Statement]^Node ret = block.getLastChild (  ) ;Node name = n.getFirstChild (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^Node nameame = n.getFirstChild (  ) ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P14_Delete_Statement]^^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^if  ( !name .addChildrenToBack ( name )   )  {^125^^^^^114^134^if  ( !name.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( name )  )  {^122^^^^^114^134^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P13_Insert_Block]^if  ( isLoopStructure ( n )  )  {     return ; }^122^^^^^114^134^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^Node name = n .getLastChild (  )  ;^123^^^^^114^134^Node name = n.getFirstChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^name .addChildrenToBack ( c )  ;^126^^^^^114^134^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^for  ( Node c = n.newString (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.newString (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P8_Replace_Mix]^for  ( Node name = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P5_Replace_Variable]^fixUnitializedVarDeclarations ( name ) ;^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^hasReturnAtExit ( c ) ;^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P14_Delete_Statement]^^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P11_Insert_Donor_Statement]^fixUnitializedVarDeclarations ( newBlock ) ;fixUnitializedVarDeclarations ( c ) ;^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; name !^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P14_Delete_Statement]^^131^132^133^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { fixUnitializedVarDeclarations ( c ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P7_Replace_Invocation]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^131^^^^^114^134^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P8_Replace_Mix]^hasReturnAtExit ( name ) ;^132^^^^^114^134^fixUnitializedVarDeclarations ( c ) ;^[CLASS] FunctionToBlockMutator  [METHOD] fixUnitializedVarDeclarations [RETURN_TYPE] void   Node n [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  c  n  name  
[P3_Replace_Literal]^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "SCompilSCompiler_inline_",^143^144^145^146^^141^148^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P4_Replace_Constructor]^compiler, fnNode, compiler, fnNode,  new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  , "JSCompiler_inline_",^143^144^145^146^^141^148^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P5_Replace_Variable]^fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^143^144^145^146^^141^148^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P7_Replace_Invocation]^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getCodingConvention (  ) , "JSCompiler_inline_",^143^144^145^146^^141^148^compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_",^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P3_Replace_Literal]^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "inlSCompiler_inline_", isCallInLoop )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P5_Replace_Variable]^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_" )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P5_Replace_Variable]^new InlineRenamer ( isCallInLoop.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", compiler )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P7_Replace_Invocation]^new InlineRenamer ( compiler.getCodingConvention (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^144^145^146^147^^141^148^new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, fnNode, NodeTraversal.traverse ( compiler, fnNode,  new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler,  new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P5_Replace_Variable]^NodeTraversal.traverse (  fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P7_Replace_Invocation]^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getCodingConvention (  ) ,^142^143^144^145^^141^148^NodeTraversal.traverse ( compiler, fnNode, new MakeDeclaredNamesUnique ( new InlineRenamer ( compiler.getUniqueNameIdSupplier (  ) ,^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P7_Replace_Invocation]^compiler.getCodingConvention (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^145^146^147^^^141^148^compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P14_Delete_Statement]^^145^146^147^^^141^148^compiler.getUniqueNameIdSupplier (  ) , "JSCompiler_inline_", isCallInLoop )  )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] makeLocalNamesUnique [RETURN_TYPE] void   Node fnNode boolean isCallInLoop [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  isCallInLoop  Node  fnNode  
[P1_Replace_Type]^char name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^String name =  ( fnName == null && fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^String name =  ( fnName != null || fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P3_Replace_Literal]^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "nnon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P6_Replace_Expression]^String name =  ( fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P5_Replace_Variable]^String name =  ( name == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P14_Delete_Statement]^^154^^^^^153^156^String name =  ( fnName == null || fnName.isEmpty (  )  )  ? "anon" : fnName;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  >=  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^return "JSCompiler_inline_label_"  !=  name  !=  "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^return "JSCompiler_inline_label_"  &&  name + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P3_Replace_Literal]^return "ine_" + name + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P5_Replace_Variable]^return "JSCompiler_inline_label_" + fnName + "_" + safeNameIdSupplier.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P5_Replace_Variable]^return "JSCompiler_inline_label_" + safeNameIdSupplier + "_" + name.get (  ) ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P8_Replace_Mix]^return "JSCompiler_inline_label_"  ;^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P14_Delete_Statement]^^155^^^^^153^156^return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getLabelNameForFunction [RETURN_TYPE] String   String fnName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  fnName  name  boolean  
[P2_Replace_Operator]^if  ( namesToAlias == null && namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P2_Replace_Operator]^if  ( namesToAlias != null || namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( newValueamesToAlias == null || namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P6_Replace_Expression]^if  ( namesToAlias == null ) {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P6_Replace_Expression]^if  (  namesToAlias.isEmpty (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P6_Replace_Expression]^if  ( result == fnTemplateRoot )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^if  ( namesToAlias == null || namesToAlias.contains (  )  )  {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^if  ( namesToAlias == this ) {^172^^^^^157^187^if  ( namesToAlias == null || namesToAlias.isEmpty (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( name.contains ( namesToAlias )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( newValue , newValue )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node newValue = entry .getKey (  )  .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node newFnNode = fnNode.cloneTree (  ) ;Node newValue = entry.getValue (  ) .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newNode = NodeUtil.newVarNode ( name, result ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newNode = NodeUtil.newVarNode (  newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newNode = NodeUtil.newVarNode ( name ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newNode = NodeUtil.newVarNode ( newValue, name ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newNode = NodeUtil .newUndefinedNode (  )  ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node newRoot = new Node ( Token.BLOCK ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node retVal = NodeUtil.newUndefinedNode (  ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node nameNode = Node.newString ( Token.NAME, name ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( fnTemplateRoot , result )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node newNode = NodeUtil.newVarNode ( name, newNode ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^resultNode = NodeUtil.newExpr ( retVal ) ;Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^195^^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P3_Replace_Literal]^newVars.add ( 6, newNode ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^newVars.add ( 0, result ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^newVars.add ( 0 ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^198^^^^^183^213^newArgMap.remove ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^return newValue;^213^^^^^198^228^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P1_Replace_Type]^char name = entry.getKey (  ) ;^192^^^^^177^207^String name = entry.getKey (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^String name = entry .getValue (  )  ;^192^^^^^177^207^String name = entry.getKey (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( newNode , n )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( newValue, null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject (  null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( newArgMap, null, fnTemplateRoot ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node result = FunctionArgumentInjector .findModifiedParameters ( newValue )  ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^184^^^^^169^199^Map<String, Node> newArgMap = Maps.newHashMap ( argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^188^^^^^173^203^List<Node> newVars = Lists.newLinkedList (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^for  ( Entry<String, Node> entry : 3.entrySet (  )  )  {^191^^^^^176^206^for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^for  ( Entry<String, Node> entry : null.entrySet (  )  )  {^191^^^^^176^206^for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^192^^^^^177^207^String name = entry.getKey (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( namesToAliassToAlias.contains ( name )  )  {^193^^^^^178^208^if  ( namesToAlias.contains ( name )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( result , n )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^194^195^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ; Node newNode = NodeUtil.newVarNode ( name, newValue ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^195^196^^^^180^210^Node newNode = NodeUtil.newVarNode ( name, newValue ) ; newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P3_Replace_Literal]^newVars.add ( -7, newNode ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^newVars.add ( 0, newValue ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node result = FunctionArgumentInjector.inject ( result, null, newArgMap ) ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( result != fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( newValue == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( result == newValue ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( fnTemplateRoot == result ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( labelName ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^fnTemplateRoot.addChildToFront ( result ) ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^fnTemplateRoot.addChildBefore ( n ) ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^fnTemplateRoot .addChildToBack (  )  ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^fnTemplateRoot.addChildBefore ( result ) ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^label.addChildToFront ( name ) ;fnTemplateRoot.addChildToFront ( n ) ;^210^^^^^195^225^fnTemplateRoot.addChildToFront ( n ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^return newValue;^177^^^^^162^192^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject (  null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( argMap, null, fnTemplateRoot ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node result = FunctionArgumentInjector .findModifiedParameters ( result )  ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node result = FunctionArgumentInjector.inject ( newValue, null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( result != fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( newValue == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( result == newValue ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( fnTemplateRoot == result ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P14_Delete_Statement]^^176^177^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ; return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( labelName ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;Preconditions.checkState ( result == fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newValue = 0.getValue (  ) .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P3_Replace_Literal]^newVars.add ( 1, newNode ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^return newNode;^213^^^^^198^228^return result;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, 1 ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( newValue , n )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node result = FunctionArgumentInjector.inject ( result, null, argMap ) ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node result = FunctionArgumentInjector .findModifiedParameters ( newValue )  ;^174^175^^^^159^189^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, argMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( result >= fnTemplateRoot ) ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( newNode )  ;^176^^^^^161^191^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^for  ( Entry<String, Node> entry : 2.entrySet (  )  )  {^191^^^^^176^206^for  ( Entry<String, Node> entry : argMap.entrySet (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node newValue = entry.getValue (  )  .addChildBefore ( newValue , newNode )  ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P8_Replace_Mix]^Node newValue = null.getValue (  ) .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node newValue = 2.getValue (  ) .cloneTree (  ) ;^194^^^^^179^209^Node newValue = entry.getValue (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P3_Replace_Literal]^newVars.add ( 5, newNode ) ;^196^^^^^181^211^newVars.add ( 0, newNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node result = FunctionArgumentInjector .findModifiedParameters ( fnTemplateRoot )  ;^203^204^^^^188^218^Node result = FunctionArgumentInjector.inject ( fnTemplateRoot, null, newArgMap ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( result )  ;^205^^^^^190^220^Preconditions.checkState ( result == fnTemplateRoot ) ;^[CLASS] FunctionToBlockMutator  [METHOD] aliasAndInlineArguments [RETURN_TYPE] Node   Node fnTemplateRoot Node> argMap String> namesToAlias [VARIABLES] AbstractCompiler  compiler  Entry  entry  Set  namesToAlias  boolean  Node  fnTemplateRoot  n  newNode  newValue  result  Supplier  safeNameIdSupplier  List  newVars  String  name  Map  newArgMap  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkNotNull ( newRoot ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( result == fnTemplateRoot ) ;Preconditions.checkNotNull ( block ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkNotNull ( block ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( labelName ) ;Preconditions.checkNotNull ( block ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;Preconditions.checkNotNull ( block ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkNotNull ( block ) ;^241^^^^^226^256^Preconditions.checkNotNull ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^Preconditions.checkNotNull ( resultName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkNotNull ( labelName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( result == fnTemplateRoot ) ;Preconditions.checkNotNull ( labelName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkNotNull ( labelName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkNotNull ( labelName ) ;^242^^^^^227^257^Preconditions.checkNotNull ( labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^Node root = newRoot;^244^^^^^229^259^Node root = block;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P3_Replace_Literal]^boolean hasReturnAtExit = true;^246^^^^^231^261^boolean hasReturnAtExit = false;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P12_Insert_Condition]^if  ( hasReturnAtExit )  { boolean hasReturnAtExit = false; }^246^^^^^231^261^boolean hasReturnAtExit = false;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P1_Replace_Type]^short  returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( root, Token.RETURN ) ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^int returnCount = NodeUtil.getFunctionBody ( block, Token.RETURN ) ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^int returnCount = NodeUtil .getFunctionBody ( newRoot )  ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^int returnCount = NodeUtil.getNodeTypeReferenceCount ( newRoot, Token.RETURN ) ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^int returnCount = NodeUtil .getFunctionBody ( block )  ;^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^247^^^^^232^262^int returnCount = NodeUtil.getNodeTypeReferenceCount ( block, Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( returnCount >= 0 )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( returnCount == 0 )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P3_Replace_Literal]^if  ( returnCount > returnCount )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P3_Replace_Literal]^if  ( returnCount > -4 )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^if  ( returnCount > 1 )  {^248^^^^^233^263^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P13_Insert_Block]^if  ( returnCount > 0 )  {     replaceReturnWithBreak ( block, null, resultName, labelName ) ;     Node label = new Node ( LABEL ) ;     Node name = newString ( Token.NAME, labelName ) ;     label.addChildToFront ( name ) ;     label.addChildToBack ( block ) ;     Node newRoot = new Node ( BLOCK ) ;     newRoot.addChildrenToBack ( label ) ;     root = newRoot; }^248^^^^^233^263^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^if  ( resultMustBeSet )  {^252^^^^^237^267^if  ( hasReturnAtExit )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P15_Unwrap_Block]^com.google.javascript.jscomp.FunctionToBlockMutator.convertLastReturnToStatement(block, resultName); returnCount--;^252^253^254^255^^237^267^if  ( hasReturnAtExit )  { convertLastReturnToStatement ( block, resultName ) ; returnCount--; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P16_Remove_Block]^^252^253^254^255^^237^267^if  ( hasReturnAtExit )  { convertLastReturnToStatement ( block, resultName ) ; returnCount--; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^convertLastReturnToStatement (  resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^convertLastReturnToStatement ( block ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^convertLastReturnToStatement ( resultName, block ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^getReplacementReturnStatement ( block, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^getReplacementReturnStatement ( newRoot, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^253^254^^^^238^268^convertLastReturnToStatement ( block, resultName ) ; returnCount--;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;convertLastReturnToStatement ( block, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^addDummyAssignment ( block, resultName ) ;convertLastReturnToStatement ( block, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;convertLastReturnToStatement ( block, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P13_Insert_Block]^if  ( hasReturnAtExit )  {     convertLastReturnToStatement ( block, resultName ) ;     returnCount--; }^253^^^^^238^268^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( returnCount < 0 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^if  ( returnCount > 3 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^root = root;^273^^^^^258^288^root = newRoot;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^root =  name;^273^^^^^258^288^root = newRoot;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^Node label = new Node ( Token.this ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node newRoot = new Node ( Token.BLOCK ) ;Node label = new Node ( Token.LABEL ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node label = new Node ( Token.LABEL ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node nameNode = Node.newString ( Token.NAME, name ) ;Node label = new Node ( Token.LABEL ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, labelName ) ;Node label = new Node ( Token.LABEL ) ;^264^^^^^249^279^Node label = new Node ( Token.LABEL ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, resultName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^Node name = Node.removeChild ( Token.NAME, labelName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node label = new Node ( Token.LABEL ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node nameNode = Node.newString ( Token.NAME, name ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node newRoot = new Node ( Token.BLOCK ) ;^269^^^^^254^284^Node newRoot = new Node ( Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node label = new Node ( Token.LABEL ) ;Node newRoot = new Node ( Token.BLOCK ) ;^269^^^^^254^284^Node newRoot = new Node ( Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;Node newRoot = new Node ( Token.BLOCK ) ;^269^^^^^254^284^Node newRoot = new Node ( Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( root, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak (  null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( block, null,  labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( block, null, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( resultName, null, block, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( block, null, labelName, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^replaceReturns ( block, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;replaceReturnWithBreak ( block, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^265^266^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ; label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^label.addChildToFront ( root ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^label.addChildBefore ( name ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^fnTemplateRoot.addChildToFront ( n ) ;label.addChildToFront ( name ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^label.addChildToBack ( block ) ;label.addChildToFront ( name ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^newRoot.addChildrenToBack ( label ) ;label.addChildToFront ( name ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^label.addChildToBack ( root ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^label.addChildBefore ( block ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^label.addChildToFront ( name ) ;label.addChildToBack ( block ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^node.addChildrenToBack ( resultNode ) ;label.addChildToBack ( block ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^newRoot.addChildrenToBack ( label ) ;label.addChildToBack ( block ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^newRoot.addChildrenToBack ( root ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^newRoot.addChildBefore ( label ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^newRoot.addChildBefore ( root ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^label.addChildToFront ( name ) ;newRoot.addChildrenToBack ( label ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^node.addChildrenToBack ( resultNode ) ;newRoot.addChildrenToBack ( label ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^label.addChildToBack ( block ) ;newRoot.addChildrenToBack ( label ) ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^hasReturnAtExit = hasReturnAtExit ( root ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^fixUnitializedVarDeclarations = hasReturnAtExit ( block ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^hasReturnAtExit =  hasReturnAtExit ( null ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P13_Insert_Block]^if  ( hasReturnAtExit )  {     convertLastReturnToStatement ( block, resultName ) ;     returnCount--; }^249^^^^^234^264^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^Node newRoot = new Node ( Token.this ) ;^269^^^^^254^284^Node newRoot = new Node ( Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^hasReturnAtExit = hasReturnAtExit ( newRoot ) ;^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^249^^^^^234^264^hasReturnAtExit = hasReturnAtExit ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^convertLastReturnToStatement ( block, labelName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( block, null, resultName, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^replaceReturnWithBreak ( newRoot, null, resultName, labelName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^Node name = Node .getLastChild (  )  ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^label .addChildToBack (  )  ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^label .addChildToBack (  )  ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^label.addChildBefore ( root ) ;^267^^^^^252^282^label.addChildToBack ( block ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^newRoot .addChildToBack (  )  ;^270^^^^^255^285^newRoot.addChildrenToBack ( label ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^convertLastReturnToStatement ( root, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^getReplacementReturnStatement ( block, labelName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P3_Replace_Literal]^if  ( returnCount > returnCount )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^if  ( returnCount > 1 )  {^257^^^^^242^272^if  ( returnCount > 0 )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^replaceReturnWithBreak ( labelName, null, resultName, block ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^replaceReturns ( block, null, resultName, resultName ) ;^261^^^^^246^276^replaceReturnWithBreak ( block, null, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^Node name = Node.removeChild ( Token.NAME, resultName ) ;^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^265^^^^^250^280^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^getReplacementReturnStatement ( root, resultName ) ;^253^^^^^238^268^convertLastReturnToStatement ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^label.addChildBefore ( root ) ;^266^^^^^251^281^label.addChildToFront ( name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( resultMustBeSet || !hasReturnAtExit || resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( resultMustBeSet || !hasReturnAtExit && resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^if  ( resultMustBeSet && !hasReturnAtExit && resultName == null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^if  ( hasReturnAtExit && !hasReturnAtExit && resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^if  ( resultMustBeSet && !hasReturnAtExit && labelName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P6_Replace_Expression]^if  ( resultMustBeSet ) {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P6_Replace_Expression]^if  (  !hasReturnAtExit && resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P6_Replace_Expression]^if  ( (resultMustBeSet && !hasReturnAtExit) )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P6_Replace_Expression]^if  ( resultName != null )  {^279^^^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P15_Unwrap_Block]^com.google.javascript.jscomp.FunctionToBlockMutator.addDummyAssignment(block, resultName);^279^280^281^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  { addDummyAssignment ( block, resultName ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P16_Remove_Block]^^279^280^281^^^264^294^if  ( resultMustBeSet && !hasReturnAtExit && resultName != null )  { addDummyAssignment ( block, resultName ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment ( newRoot, resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment (  resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment ( block ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment ( resultName, block ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P7_Replace_Invocation]^convertLastReturnToStatement ( block, resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^convertLastReturnToStatement ( block, labelName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P14_Delete_Statement]^^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P11_Insert_Donor_Statement]^convertLastReturnToStatement ( block, resultName ) ;addDummyAssignment ( block, resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P13_Insert_Block]^if  ( hasReturnAtExit )  {     convertLastReturnToStatement ( block, resultName ) ;     returnCount--; }^280^^^^^265^295^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P13_Insert_Block]^if  (  ( resultMustBeSet &&  ( !hasReturnAtExit )  )  &&  ( resultName != null )  )  {     addDummyAssignment ( block, resultName ) ; }^280^^^^^265^295^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment ( root, resultName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^addDummyAssignment ( block, labelName ) ;^280^^^^^265^295^addDummyAssignment ( block, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P5_Replace_Variable]^return name;^283^^^^^268^298^return root;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P8_Replace_Mix]^return newRoot;^283^^^^^268^298^return root;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturns [RETURN_TYPE] Node   Node block String resultName String labelName boolean resultMustBeSet [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  hasReturnAtExit  resultMustBeSet  int  returnCount  Node  block  label  name  newRoot  root  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  > Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Preconditions.checkArgument ( retVal.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( node.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.newString (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( block ) ;Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^Preconditions.checkArgument ( retVal.newString (  )  == Token.BLOCK ) ;^295^^^^^294^302^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^Node retVal = NodeUtil .newVarNode ( resultName , resultNode )  ;^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node newBlock = NodeUtil.getFunctionBody ( newFnNode ) ;Node retVal = NodeUtil.newUndefinedNode (  ) ;^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;Node retVal = NodeUtil.newUndefinedNode (  ) ;^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^retVal = NodeUtil.newUndefinedNode (  ) ;Node retVal = NodeUtil.newUndefinedNode (  ) ;^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;Node retVal = NodeUtil.newUndefinedNode (  ) ;^298^^^^^294^302^Node retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node resultNode = createAssignStatementNode ( resultName, node ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node resultNode = createAssignStatementNode (  retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node resultNode = createAssignStatementNode ( resultName ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node resultNode = createAssignStatementNode ( retVal, resultName ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^Node resultNode = makeLocalNamesUnique ( resultName, retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node resultNode = createAssignStatementNode ( resultName, resultNode ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^resultNode = createAssignStatementNode ( resultName, retVal ) ;Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^299^^^^^294^302^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^node.addChildrenToBack ( retVal ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^node.addChildBefore ( resultNode ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^label.addChildToBack ( block ) ;node.addChildrenToBack ( resultNode ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^newRoot.addChildrenToBack ( label ) ;node.addChildrenToBack ( resultNode ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( resultNode, breakNode ) ;node.addChildrenToBack ( resultNode ) ;^301^^^^^294^302^node.addChildrenToBack ( resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] addDummyAssignment [RETURN_TYPE] void   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^Node ret = resultNode.getLastChild (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Node ret = block.newString (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P8_Replace_Mix]^Node ret = resultNode .getFirstChild (  )  ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node ret = block.getLastChild (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node ret = ret.getLastChild (  ) ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Node ret = block .getFirstChild (  )  ;^314^^^^^312^323^Node ret = block.getLastChild (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P14_Delete_Statement]^^314^315^^^^312^323^Node ret = block.getLastChild (  ) ; Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P2_Replace_Operator]^Preconditions.checkArgument ( ret.getType (  )  != Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ret.newString (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P14_Delete_Statement]^^315^316^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ; Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( result == fnTemplateRoot ) ;Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( injectableBlock != null ) ;Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( node.getType (  )  == Token.BLOCK ) ;Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( newBlock == inlineResult ) ;Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Preconditions.checkArgument ( resultNode.getType (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P8_Replace_Mix]^Preconditions.checkArgument ( resultNode.newString (  )  == Token.RETURN ) ;^315^^^^^312^323^Preconditions.checkArgument ( ret.getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( block, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement (  resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( ret ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( resultName, ret ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Node resultNode = convertLastReturnToStatement ( ret, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( resultNode, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P14_Delete_Statement]^^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^resultNode = createAssignStatementNode ( resultName, retVal ) ;Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^convertLastReturnToStatement ( block, resultName ) ;Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^316^^^^^312^323^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P2_Replace_Operator]^if  ( resultNode != null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^if  ( block == null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P8_Replace_Mix]^if  ( resultNode == false )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P9_Replace_Statement]^if  ( resultName == null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P9_Replace_Statement]^if  ( retVal == null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P9_Replace_Statement]^if  ( retVal != null )  {^318^^^^^312^323^if  ( resultNode == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P15_Unwrap_Block]^block.removeChild(ret);^318^319^320^321^322^312^323^if  ( resultNode == null )  { block.removeChild ( ret ) ; } else { block.replaceChild ( ret, resultNode ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P16_Remove_Block]^^318^319^320^321^322^312^323^if  ( resultNode == null )  { block.removeChild ( ret ) ; } else { block.replaceChild ( ret, resultNode ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^block.replaceChild ( ret, ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^block.replaceChild (  resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^block.replaceChild ( ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^block.replaceChild ( resultNode, ret ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^block .getLastChild (  )  ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P8_Replace_Mix]^block.replaceChild ( block, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P14_Delete_Statement]^^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^block.removeChild ( ret ) ;block.replaceChild ( ret, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^parent.replaceChild ( current, breakNode ) ;block.replaceChild ( ret, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P5_Replace_Variable]^block.removeChild ( resultNode ) ;^319^^^^^312^323^block.removeChild ( ret ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^block.replaceChild ( ret ) ;^319^^^^^312^323^block.removeChild ( ret ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P14_Delete_Statement]^^319^^^^^312^323^block.removeChild ( ret ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P11_Insert_Donor_Statement]^block.replaceChild ( ret, resultNode ) ;block.removeChild ( ret ) ;^319^^^^^312^323^block.removeChild ( ret ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P8_Replace_Mix]^block.replaceChild ( resultNode, resultNode ) ;^321^^^^^312^323^block.replaceChild ( ret, resultNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] convertLastReturnToStatement [RETURN_TYPE] void   Node block String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  block  resultNode  ret  
[P7_Replace_Invocation]^Node nameNode = Node.removeChild ( Token.NAME, name ) ;^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node nameNode = Node.newString ( Token.NAME, name ) ;^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node label = new Node ( Token.LABEL ) ;Node nameNode = Node.newString ( Token.NAME, name ) ;^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;Node nameNode = Node.newString ( Token.NAME, name ) ;^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, labelName ) ;Node nameNode = Node.newString ( Token.NAME, name ) ;^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P14_Delete_Statement]^^332^^^^^329^335^Node nameNode = Node.newString ( Token.NAME, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P4_Replace_Constructor]^Node assign = new Node ( Token.ASSIGN,  expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P4_Replace_Constructor]^Node assign = new Node ( Token.ASSIGN, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, expression, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, nameNode, assign ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^Node assign = new Node ( Token. nameNode, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, expression, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^Node assign = new Node ( Token.ASSIGN, nameNode, nameNode ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^333^^^^^329^335^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P5_Replace_Variable]^return NodeUtil.newExpr ( nameNode ) ;^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P7_Replace_Invocation]^return NodeUtil.isVar ( assign ) ;^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P8_Replace_Mix]^return NodeUtil .newVarNode ( name , expression )  ;^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P7_Replace_Invocation]^return NodeUtil .newVarNode ( name , nameNode )  ;^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P14_Delete_Statement]^^334^^^^^329^335^return NodeUtil.newExpr ( assign ) ;^[CLASS] FunctionToBlockMutator  [METHOD] createAssignStatementNode [RETURN_TYPE] Node   String name Node expression [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  name  boolean  Node  assign  expression  nameNode  
[P11_Insert_Donor_Statement]^Node retVal = null;Node resultNode = null;^348^^^^^346^371^Node resultNode = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P12_Insert_Condition]^if  ( resultNode == null )  { Node resultNode = null; }^348^^^^^346^371^Node resultNode = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P12_Insert_Condition]^if  ( resultNode != null )  { Node resultNode = null; }^348^^^^^346^371^Node resultNode = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P12_Insert_Condition]^if  ( resultName == null )  { Node resultNode = null; }^348^^^^^346^371^Node resultNode = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node resultNode = null;Node retVal = null;^350^^^^^346^371^Node retVal = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P12_Insert_Condition]^if  ( retVal == null )  { Node retVal = null; }^350^^^^^346^371^Node retVal = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P12_Insert_Condition]^if  ( retVal != null )  { Node retVal = null; }^350^^^^^346^371^Node retVal = null;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^if  ( retVal.hasChildren (  )  )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^if  ( node.newString (  )  )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^if  ( node .addChildrenToBack ( resultNode )   )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( retVal.newString (  )  )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( !name.hasChildren (  )  )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P15_Unwrap_Block]^retVal = node.getFirstChild().cloneTree();^351^352^^354^355^346^371^if  ( node.hasChildren (  )  )  {  retVal = node.getFirstChild (  ) .cloneTree (  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P16_Remove_Block]^^351^352^^354^355^346^371^if  ( node.hasChildren (  )  )  {  retVal = node.getFirstChild (  ) .cloneTree (  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^retVal = retVal.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = node.newString (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^retVal =  resultNode.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = node .getLastChild (  )  .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^retVal = retVal.newString (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node newValue = entry.getValue (  ) .cloneTree (  ) ;retVal = node.getFirstChild (  ) .cloneTree (  ) ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( retVal .addChildrenToBack ( node )   )  {^351^^^^^346^371^if  ( node.hasChildren (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = node.getFirstChild (  )  .addChildBefore ( retVal , node )  ;^354^^^^^346^371^retVal = node.getFirstChild (  ) .cloneTree (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P2_Replace_Operator]^if  ( resultName != null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P6_Replace_Expression]^if  ( retVal != null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P6_Replace_Expression]^if  ( retVal == null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( resultName == true )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultNode == null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultNode != null )  {^357^^^^^346^371^if  ( resultName == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P15_Unwrap_Block]^if (retVal != null) {    resultNode = com.google.javascript.jscomp.NodeUtil.newExpr(retVal);};^357^358^359^360^^346^371^if  ( resultName == null )  { if  ( retVal != null )  { resultNode = NodeUtil.newExpr ( retVal ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P16_Remove_Block]^^357^358^359^360^^346^371^if  ( resultName == null )  { if  ( retVal != null )  { resultNode = NodeUtil.newExpr ( retVal ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P2_Replace_Operator]^if  ( retVal != null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^if  ( resultNode == null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( retVal == true )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultNode != null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultName == null )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P15_Unwrap_Block]^retVal = com.google.javascript.jscomp.NodeUtil.newUndefinedNode();^362^363^364^365^^346^371^if  ( retVal == null )  {  retVal = NodeUtil.newUndefinedNode (  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P16_Remove_Block]^^362^363^364^365^^346^371^if  ( retVal == null )  {  retVal = NodeUtil.newUndefinedNode (  ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( ! ( name.hasChildren (  )  )  )  {     name.addChildToBack ( newUndefinedNode (  )  ) ; }^362^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( retVal != null )  {     resultNode = newExpr ( retVal ) ; }^362^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = NodeUtil .newVarNode ( resultName , node )  ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^retVal  =  retVal ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = NodeUtil .newVarNode ( resultName , resultNode )  ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node retVal = NodeUtil.newUndefinedNode (  ) ;retVal = NodeUtil.newUndefinedNode (  ) ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^name.addChildToBack ( NodeUtil.newUndefinedNode (  )  ) ;retVal = NodeUtil.newUndefinedNode (  ) ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^return NodeUtil.newExpr ( assign ) ;retVal = NodeUtil.newUndefinedNode (  ) ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^retVal  = null ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^resultNode = createAssignStatementNode ( resultName, resultNode ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^resultNode = createAssignStatementNode (  retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^resultNode = createAssignStatementNode ( resultName ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^resultNode = createAssignStatementNode ( retVal, resultName ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^resultNode = makeLocalNamesUnique ( resultName, retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^resultNode =  createAssignStatementNode ( null, retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^retVal = NodeUtil .newVarNode ( resultName , retVal )  ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;resultNode = createAssignStatementNode ( resultName, retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;resultNode = createAssignStatementNode ( resultName, retVal ) ;^367^^^^^346^371^resultNode = createAssignStatementNode ( resultName, retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P2_Replace_Operator]^if  ( retVal == null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^if  ( resultNode != null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( retVal != true )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultNode == null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P9_Replace_Statement]^if  ( resultName == null )  {^358^^^^^346^371^if  ( retVal != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P15_Unwrap_Block]^resultNode = com.google.javascript.jscomp.NodeUtil.newExpr(retVal);^358^359^360^^^346^371^if  ( retVal != null )  { resultNode = NodeUtil.newExpr ( retVal ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P16_Remove_Block]^^358^359^360^^^346^371^if  ( retVal != null )  { resultNode = NodeUtil.newExpr ( retVal ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( retVal == null )  {     retVal = newUndefinedNode (  ) ; }^358^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( ! ( name.hasChildren (  )  )  )  {     name.addChildToBack ( newUndefinedNode (  )  ) ; }^358^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^resultNode = NodeUtil.newExpr ( resultNode ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^resultNode = NodeUtil.isVar ( retVal ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^resultNode =  NodeUtil.newExpr ( node ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( retVal == null )  {     retVal = newUndefinedNode (  ) ; }^359^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( retVal != null )  {     resultNode = newExpr ( retVal ) ; }^359^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^resultNode = NodeUtil .newVarNode ( resultName , node )  ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P14_Delete_Statement]^^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^Node newNode = NodeUtil.newVarNode ( name, newValue ) ;resultNode = NodeUtil.newExpr ( retVal ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P11_Insert_Donor_Statement]^return NodeUtil.newExpr ( assign ) ;resultNode = NodeUtil.newExpr ( retVal ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P13_Insert_Block]^if  ( isLoopStructure ( n )  )  {     return ; }^359^^^^^346^371^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P7_Replace_Invocation]^resultNode = NodeUtil .newVarNode ( resultName , retVal )  ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^resultNode = NodeUtil.isVar ( resultNode ) ;^359^^^^^346^371^resultNode = NodeUtil.newExpr ( retVal ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^if  ( retVal == this )  {^362^^^^^346^371^if  ( retVal == null )  {^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P8_Replace_Mix]^retVal ;^364^^^^^346^371^retVal = NodeUtil.newUndefinedNode (  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P5_Replace_Variable]^return retVal;^370^^^^^346^371^return resultNode;^[CLASS] FunctionToBlockMutator  [METHOD] getReplacementReturnStatement [RETURN_TYPE] Node   Node node String resultName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  resultName  boolean  Node  node  resultNode  retVal  
[P2_Replace_Operator]^return  ( block.getLastChild (  ) .getType (  )  >= Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P5_Replace_Variable]^return  ( block.getLastChild (  ) .getType (  )  == Token.this ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P7_Replace_Invocation]^return  ( block.getLastChild (  )  .getNext (  )   == Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P7_Replace_Invocation]^return  ( block.newString (  ) .getType (  )  == Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P8_Replace_Mix]^return  ( block.newString (  ) .getType (  )   &&  Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P12_Insert_Condition]^if  ( current.getType (  )  == Token.RETURN )  { return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ; }^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P7_Replace_Invocation]^return  ( block .getFirstChild (  )  .getType (  )  == Token.RETURN ) ;^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P14_Delete_Statement]^^379^^^^^376^380^return  ( block.getLastChild (  ) .getType (  )  == Token.RETURN ) ;^[CLASS] FunctionToBlockMutator  [METHOD] hasReturnAtExit [RETURN_TYPE] boolean   Node block [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  boolean  Node  block  
[P2_Replace_Operator]^if  ( current.getType (  )  == Token.FUNCTION && current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^if  ( current.getType (  )  > Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( resultNode.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  ( current.getType (  )  == Token.FUNCTION ) {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  (  current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  ( current.getType (  )  == FUNCTION )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  ( current.getType (  )  == EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^if  ( current.newString (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^if  ( current .getNext (  )   == Token.FUNCTION || current^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P15_Unwrap_Block]^return current;^391^392^^^395^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  { return current; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P16_Remove_Block]^^391^392^^^395^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  { return current; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^return parent;^395^^^^^391^396^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^return resultNode;^395^^^^^391^396^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^return resultNode;^395^^^^^389^419^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^return parent;^395^^^^^389^419^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^if  ( resultNode.newString (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^391^392^^^^389^419^if  ( current.getType (  )  == Token.FUNCTION || current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^|| resultNode.getType (  )  == Token.EXPR_RESULT )  {^392^^^^^389^419^|| current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^|| current.newString (  )  == Token.EXPR_RESULT )  {^392^^^^^389^419^|| current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^|| current .getNext (  )   == Token.EXPR_RESULT )  {^392^^^^^389^419^|| current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^|| parent.getType (  )  == Token.EXPR_RESULT )  {^392^^^^^389^419^|| current.getType (  )  == Token.EXPR_RESULT )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( parenturrent.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  ( resultNode != null )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P6_Replace_Expression]^if  ( c != null )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^if  ( current.newString (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node parent = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node current = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current.newString (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.newString (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( resultNode, current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, resultNode, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, labelName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, resultName, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak (  current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c,  resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current,  labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( resultName, current, c, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^c = replaceReturns ( c, current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^c =  replaresultNodeeReturnWithBreak ( resultNode, resultNodeurrent, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^replaceReturnWithBreak ( block, null, resultName, labelName ) ;c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^for  ( Node c =  resultNodeurrent.getFirstChild (  ) ; resultNode !^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, labelName, resultName, current ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( labelName, current, resultName, c ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^412^^^^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^412^413^414^415^^398^416^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = replaceReturnWithBreak ( c, current, resultName, labelName ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, resultName, current, labelName ) ;^414^^^^^398^416^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^if  ( resultNode == null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( name != null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^if  ( resultNode != this )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P9_Replace_Statement]^if  ( resultName == null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P9_Replace_Statement]^if  ( retVal == null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P9_Replace_Statement]^if  ( retVal != null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P15_Unwrap_Block]^parent.addChildBefore(resultNode, breakNode);^407^408^409^^^389^419^if  ( resultNode != null )  { parent.addChildBefore ( resultNode, breakNode ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P16_Remove_Block]^^407^408^409^^^389^419^if  ( resultNode != null )  { parent.addChildBefore ( resultNode, breakNode ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore ( name, breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore ( resultNode, parent ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore (  breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore ( resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore ( breakNode, resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^408^409^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^node.addChildrenToBack ( resultNode ) ;parent.addChildBefore ( resultNode, breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^parent.replaceChild ( current, breakNode ) ;parent.addChildBefore ( resultNode, breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P13_Insert_Block]^if  ( resultNode != null )  {     parent.addChildBefore ( resultNode, breakNode ) ; }^408^^^^^389^419^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^current = resultNode;^410^^^^^389^419^current = breakNode;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node breakNode = new Node ( Token.BREAK, parent ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node breakNode = new Node ( Token.BREAK ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node breakNode = new Node ( Token. name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( parent, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( current, labelName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement (  resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( current ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( resultName, current ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Node resultNode = convertLastReturnToStatement ( current, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node resultNode = createAssignStatementNode ( resultName, retVal ) ;Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node resultNode = getReplacementReturnStatement ( ret, resultName ) ;Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node name = Node.newString ( Token.NAME, resultName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Node name = Node.removeChild ( Token.NAME, labelName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Node name = Node .getLastChild (  )  ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node breakNode = new Node ( Token.BREAK, name ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node label = new Node ( Token.LABEL ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node nameNode = Node.newString ( Token.NAME, name ) ;Node name = Node.newString ( Token.NAME, labelName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node breakNode = new Node ( Token.BREAK, resultNode ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node newRoot = new Node ( Token.BLOCK ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node assign = new Node ( Token.ASSIGN, nameNode, expression ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node label = new Node ( Token.LABEL ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node nameNode = Node.newString ( Token.NAME, name ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node name = Node.newString ( Token.NAME, labelName ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^Node newFnNode = fnNode.cloneTree (  ) ;Node breakNode = new Node ( Token.BREAK, name ) ;^403^^^^^389^419^Node breakNode = new Node ( Token.BREAK, name ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( name )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Preconditions.checkNotNull ( NodeUtil.isStatementBlock ( parent )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isVar ( parent )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .getNodeTypeReferenceCount ( current )   ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( resultNode )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isVar ( resultNode )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P13_Insert_Block]^if  ( isLoopStructure ( n )  )  {     return ; }^399^^^^^389^419^[Delete]^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^Node resultNode = getReplacementReturnStatement ( resultNode, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^convertLastReturnToStatement ( block, resultName ) ;Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.replaceChild ( resultNode, breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.replaceChild ( current, resultNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.replaceChild (  breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.replaceChild ( current ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^parent.addChildBefore ( resultNode, breakNode ) ;parent.replaceChild ( current, breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^block.replaceChild ( ret, resultNode ) ;parent.replaceChild ( current, breakNode ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.addChildBefore ( parent, breakNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^parent .addChildToFront ( breakNode )  ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^parent.addChildBefore ( resultNode, resultNode ) ;^408^^^^^389^419^parent.addChildBefore ( resultNode, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( parent != null )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^if  ( name != true )  {^407^^^^^389^419^if  ( resultNode != null )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P2_Replace_Operator]^for  ( Node c = current.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node c = resultNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node parent = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^for  ( Node current = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current.newString (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.newString (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^for  ( Node resultNode = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( parent, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, resultNode, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak (  current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c,  resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current,  labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( labelName, current, resultName, c ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( current, c, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, labelName, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^c = replaceReturns ( c, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^c =  replaparenteReturnWithBreak ( parent, parenturrent, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( resultNode, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, parent, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, resultName, resultName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, resultName, current, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^c = replaceReturns ( resultNode, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P11_Insert_Donor_Statement]^replaceReturnWithBreak ( block, null, resultName, labelName ) ;c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c .getType (  )   )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^for  ( Node c =  resultNodeurrent.getFirstChild (  ) ; resultNode !^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^c =  replanulleReturnWithBreak ( null, nullurrent, resultName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^Node resultNode = convertLastReturnToStatement ( parent, resultName ) ;^401^^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^if  ( resultNode.getType (  )  == Token.RETURN )  {^398^^^^^389^419^if  ( current.getType (  )  == Token.RETURN )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^Preconditions.checkNotNull ( NodeUtil.isStatementBlock ( resultNode )  ) ;^399^^^^^389^419^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent )  ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^401^402^^^^389^419^Node resultNode = getReplacementReturnStatement ( current, resultName ) ; Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^Node name = Node.removeChild ( Token.NAME, resultName ) ;^402^^^^^389^419^Node name = Node.newString ( Token.NAME, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^parent.replaceChild ( breakNode, current ) ;^406^^^^^389^419^parent.replaceChild ( current, breakNode ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P7_Replace_Invocation]^for  ( Node c = current .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P14_Delete_Statement]^^412^413^414^415^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = replaceReturnWithBreak ( c, current, resultName, labelName ) ; }^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^for  ( Node resultNode = current.getFirstChild (  ) ; c != null; c = c.newString (  )  )  {^412^^^^^389^419^for  ( Node c = current.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P5_Replace_Variable]^c = replaceReturnWithBreak ( c, current, labelName, labelName ) ;^414^^^^^389^419^c = replaceReturnWithBreak ( c, current, resultName, labelName ) ;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
[P8_Replace_Mix]^return resultNode;^418^^^^^389^419^return current;^[CLASS] FunctionToBlockMutator  [METHOD] replaceReturnWithBreak [RETURN_TYPE] Node   Node current Node parent String resultName String labelName [VARIABLES] AbstractCompiler  compiler  Supplier  safeNameIdSupplier  String  labelName  resultName  boolean  Node  breakNode  c  current  name  parent  resultNode  
