[P8_Replace_Mix]^this.compiler =  null;^38^^^^^37^40^this.compiler = compiler;^[CLASS] CodingConventionAnnotator  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  CodingConvention  convention  boolean  
[P8_Replace_Mix]^this.convention =  null.getCodingConvention (  ) ;^39^^^^^37^40^this.convention = compiler.getCodingConvention (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  CodingConvention  convention  boolean  
[P14_Delete_Statement]^^39^^^^^37^40^this.convention = compiler.getCodingConvention (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  CodingConvention  convention  boolean  
[P2_Replace_Operator]^if  ( externs == null )  {^44^^^^^43^50^if  ( externs != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^if  ( root != null )  {^44^^^^^43^50^if  ( externs != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P8_Replace_Mix]^if  ( externs != true )  {^44^^^^^43^50^if  ( externs != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P9_Replace_Statement]^if  ( fnInfo == null )  {^44^^^^^43^50^if  ( externs != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, this);^44^45^46^^^43^50^if  ( externs != null )  { NodeTraversal.traverse ( compiler, externs, this ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P16_Remove_Block]^^44^45^46^^^43^50^if  ( externs != null )  { NodeTraversal.traverse ( compiler, externs, this ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( root != null )  {     traverse ( compiler, root, this ) ; }^44^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P14_Delete_Statement]^^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, this ) ;NodeTraversal.traverse ( compiler, externs, this ) ;^45^^^^^43^50^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( root != null )  {     traverse ( compiler, root, this ) ; }^45^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( externs != null )  {     traverse ( compiler, externs, this ) ; }^45^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P2_Replace_Operator]^if  ( root == null )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^if  ( externs != null )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P8_Replace_Mix]^if  ( root != this )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P9_Replace_Statement]^if  ( fnInfo == null )  {^47^^^^^43^50^if  ( root != null )  {^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P15_Unwrap_Block]^com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);^47^48^49^^^43^50^if  ( root != null )  { NodeTraversal.traverse ( compiler, root, this ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P16_Remove_Block]^^47^48^49^^^43^50^if  ( root != null )  { NodeTraversal.traverse ( compiler, root, this ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( externs != null )  {     traverse ( compiler, externs, this ) ; }^47^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P14_Delete_Statement]^^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, externs, this ) ;NodeTraversal.traverse ( compiler, root, this ) ;^48^^^^^43^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( root != null )  {     traverse ( compiler, root, this ) ; }^48^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P13_Insert_Block]^if  ( externs != null )  {     traverse ( compiler, externs, this ) ; }^48^^^^^43^50^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  CodingConvention  convention  Node  externs  root  
[P5_Replace_Variable]^if  ( convention.isConstant ( parent.getString (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( n.isConstant ( convention.getString (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isVarArgsParameter ( n.getString (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isConstant ( n.putBooleanProp (  )  )  )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^n.putBooleanProp(Node.IS_CONSTANT_NAME, true);^57^58^59^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  { n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^57^58^59^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  { n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, false ) ;^58^^^^^43^73^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^58^^^^^43^73^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^58^^^^^43^73^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^58^^^^^43^73^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( fnInfo != null )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( parent.getType() == ASSIGN )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( parent.getType() == NAME )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( fnInfo == false )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( root != null )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( externs != null )  {^64^^^^^49^79^if  ( fnInfo == null )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P13_Insert_Block]^if  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  {     fnInfo = parent.getJSDocInfo (  ) ; }else     if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {         fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;     }^64^^^^^49^79^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  < Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  > Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( parent.getType() == NAME )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( parent.putBooleanProp (  )  == Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  < Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^} else {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^} else if  ( parent.putBooleanProp (  )  == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^} else if  ( parent .getString (  )   == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^fnInfo = parent.getParent().getJSDocInfo();^69^70^71^72^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {  fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^69^70^71^72^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {  fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^fnInfo = n.getParent (  ) .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^fnInfo = parent.putBooleanProp (  ) .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^fnInfo = parent.getJSDocInfo (  ) ;fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^fnInfo = n.putBooleanProp (  ) .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^} else if  ( n.putBooleanProp (  )  == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^fnInfo = parent .getString (  )  .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^fnInfo = n.getJSDocInfo (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^fnInfo = parent.putBooleanProp (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^fnInfo = parent .getString (  )  ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;fnInfo = parent.getJSDocInfo (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^fnInfo = n.putBooleanProp (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;fnInfo = parent.getJSDocInfo (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  >= Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^fnInfo = parent.getParent (  )  .getString (  )  ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^fnInfo = n .getString (  )  .getJSDocInfo (  ) ;^71^^^^^56^86^fnInfo = parent.getParent (  ) .getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^fnInfo = n .getString (  )  ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.ASSIGN )  {^66^^^^^51^81^if  ( parent.getType (  )  == Token.ASSIGN )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^} else if  ( parent.getType (  )  != Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.3 )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  && typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null || typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr == null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isOptionalParameter ( parent )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isOptionalParameter ( typeExpr )  || arg != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( typeExpr.isOptionalParameter ( arg )  || convention != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( convention.isOptionalParameter ( arg )  ) {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  (  typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( (typeExpr != null && typeExpr.isOptionalArg()) )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( typeExpr != null )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  (  typeExpr != this && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);^85^86^87^88^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^85^86^87^88^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P13_Insert_Block]^if  (  ( convention.isVarArgsParameter ( arg )  )  ||  (  ( typeExpr != null )  &&  ( typeExpr.isVarArgs (  )  )  )  )  {     arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^85^^^^^70^100^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^85^88^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^87^^^^^85^88^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^85^88^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^85^88^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  && typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null || typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr == null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( arg.isVarArgsParameter ( convention )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isVarArgsParameter ( typeExpr )  || arg != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( typeExpr.isVarArgsParameter ( arg )  || convention != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( convention.isVarArgsParameter ( arg )  ) {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  (  typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( (typeExpr != null && typeExpr.isVarArgs()) )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( typeExpr != null )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != false && typeExpr.isVarArgs (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^89^90^^^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);^89^90^91^92^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^89^90^91^92^^74^104^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P13_Insert_Block]^if  (  ( convention.isOptionalParameter ( arg )  )  ||  (  ( typeExpr != null )  &&  ( typeExpr.isOptionalArg (  )  )  )  )  {     arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^89^^^^^74^104^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^arg .getJSDocInfo (  )  ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^89^92^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^for  ( Node arg = parent.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^for  ( Node parent = args.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^for  ( Node args = arg.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^for  ( Node arg = args.putBooleanProp (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^for  ( Node arg = parent.putBooleanProp (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  && typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null || typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isOptionalParameter ( arg )  || typeExpr == null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isOptionalParameter ( parent )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( arg.isOptionalParameter ( convention )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( typeExpr.isOptionalParameter ( arg )  || convention != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( convention.isOptionalParameter ( arg )  ) {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  (  typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( (typeExpr != null && typeExpr.isOptionalArg()) )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( typeExpr != null )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  (  typeExpr != false && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);^85^86^87^88^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^85^86^87^88^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P13_Insert_Block]^if  (  ( convention.isVarArgsParameter ( arg )  )  ||  (  ( typeExpr != null )  &&  ( typeExpr.isVarArgs (  )  )  )  )  {     arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^85^^^^^78^93^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  && typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null || typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr == null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( convention.isVarArgsParameter ( typeExpr )  || arg != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( arg.isVarArgsParameter ( convention )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( convention.isVarArgsParameter ( arg )  ) {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  (  typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( (typeExpr != null && typeExpr.isVarArgs()) )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^if  ( typeExpr != null )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention .isOptionalParameter ( args )   || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != false && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P9_Replace_Statement]^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P15_Unwrap_Block]^arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);^89^90^91^92^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P16_Remove_Block]^^89^90^91^92^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ; }^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P13_Insert_Block]^if  (  ( convention.isOptionalParameter ( arg )  )  ||  (  ( typeExpr != null )  &&  ( typeExpr.isOptionalArg (  )  )  )  )  {     arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ; }^89^^^^^78^93^[Delete]^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^arg .getJSDocInfo (  )  ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^78^93^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P1_Replace_Type]^char argName = arg.getchar (  ) ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^String argName = arg.putBooleanProp (  ) ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^String parentName = arg.putBooleanProp (  ) ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^JSTypeExpression typeExpr = fnInfo != null ? null : fnInfo.getParameterType ( argName ) ;^82^83^^^^78^93^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^JSTypeExpression typeExpr = argName == null ? null : fnInfo.getParameterType ( fnInfo ) ;^82^83^^^^78^93^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^JSTypeExpression typeExpr = fnInfo ( fnInfo.getParameterType ( argName ) ;^82^83^^^^78^93^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^String parentName = arg.getString (  ) ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^String argName = arg .getParent (  )  ;^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^81^^^^^78^93^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^null : argName.getParameterType ( fnInfo ) ;^83^^^^^78^93^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^83^^^^^78^93^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( convention.isVarArgsParameter ( parent )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^78^93^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^86^87^^^^78^93^typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^arg .getJSDocInfo (  )  ;^87^^^^^78^93^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^if  ( convention .isOptionalParameter ( n )   || typeExpr != null && typeExpr.isVarArgs (  )  )  {^89^90^^^^78^93^if  ( convention.isVarArgsParameter ( arg )  || typeExpr != null && typeExpr.isVarArgs (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^90^91^^^^78^93^typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^fnInfo =  null.getJSDocInfo (  ) ;^68^^^^^53^83^fnInfo = parent.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^arg = parent.getNext (  )  )  {^80^^^^^65^95^arg = arg.getNext (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^arg = arg.putBooleanProp (  )  )  {^80^^^^^65^95^arg = arg.getNext (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^JSDocInfo fnInfo = parent.getJSDocInfo (  ) ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^JSDocInfo fnInfo = n.putBooleanProp (  ) ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^JSDocInfo fnInfo = n .getString (  )  ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^Node args = parent.getFirstChild (  ) .getNext (  ) ;^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^Node args = n.putBooleanProp (  ) .getNext (  ) ;^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^for  ( Node arg = args .getString (  )  ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^String argName = arg.getString (  ) ;for  ( Node arg = args.getFirstChild (  ) ;^78^^^^^63^93^for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P1_Replace_Type]^char argName = arg.getchar (  ) ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^String parentName = arg.getString (  ) ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^String argName = arg.putBooleanProp (  ) ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^String argName = arg .getParent (  )  ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^String parentName = arg .getParent (  )  ;^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P2_Replace_Operator]^JSTypeExpression typeExpr = fnInfo != null ? null : fnInfo.getParameterType ( argName ) ;^82^83^^^^67^97^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^JSTypeExpression typeExpr = argName == null ? null : fnInfo.getParameterType ( fnInfo ) ;^82^83^^^^67^97^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P6_Replace_Expression]^JSTypeExpression typeExpr = fnInfo ( fnInfo.getParameterType ( argName ) ;^82^83^^^^67^97^JSTypeExpression typeExpr = fnInfo == null ? null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^54^^^^^39^69^switch  ( n.getType (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^switch  ( n.putBooleanProp (  )  )  {^54^^^^^39^69^switch  ( n.getType (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^if  ( convention .isOptionalParameter ( parent )   )  {^57^^^^^42^72^if  ( convention.isConstant ( n.getString (  )  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^JSDocInfo fnInfo = parent.putBooleanProp (  ) ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^fnInfo = parent.getJSDocInfo (  ) ;JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^63^^^^^48^78^JSDocInfo fnInfo = n.getJSDocInfo (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^} else if  ( n .getString (  )   == Token.NAME )  {^69^^^^^54^84^} else if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^Node args = n .getString (  )  .getNext (  ) ;^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^Node args = parent .getString (  )  .getNext (  ) ;^77^^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^77^78^^^^62^92^Node args = n.getFirstChild (  ) .getNext (  ) ; for  ( Node arg = args.getFirstChild (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^80^81^^^^65^95^arg = arg.getNext (  )  )  { String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^81^^^^^66^96^String argName = arg.getString (  ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^null : argName.getParameterType ( fnInfo ) ;^83^^^^^68^98^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^83^^^^^68^98^null : fnInfo.getParameterType ( argName ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P5_Replace_Variable]^if  ( arg.isOptionalParameter ( convention )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^85^86^^^^70^100^if  ( convention.isOptionalParameter ( arg )  || typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^typeExpr != null && typeExpr .isVarArgs (  )   )  {^86^^^^^71^101^typeExpr != null && typeExpr.isOptionalArg (  )  )  {^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^86^87^^^^71^101^typeExpr != null && typeExpr.isOptionalArg (  )  )  { arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, false ) ;^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P8_Replace_Mix]^arg .getJSDocInfo (  )  ;^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^87^^^^^72^102^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^90^91^^^^75^105^typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P3_Replace_Literal]^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, false ) ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P7_Replace_Invocation]^arg .getJSDocInfo (  )  ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P14_Delete_Statement]^^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^arg.putBooleanProp ( Node.IS_OPTIONAL_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^typeExpr != null && typeExpr.isVarArgs (  )  )  { arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
[P11_Insert_Donor_Statement]^n.putBooleanProp ( Node.IS_CONSTANT_NAME, true ) ;arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^91^^^^^76^106^arg.putBooleanProp ( Node.IS_VAR_ARGS_PARAM, true ) ;^[CLASS] CodingConventionAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CodingConvention  convention  Node  arg  args  n  parent  JSTypeExpression  typeExpr  String  argName  JSDocInfo  fnInfo  
