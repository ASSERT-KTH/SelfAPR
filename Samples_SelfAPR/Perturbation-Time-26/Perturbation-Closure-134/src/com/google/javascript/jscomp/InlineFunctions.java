[P8_Replace_Mix]^private  Map<String, FunctionState> fns = Maps.newHashMap (  ) ;^64^^^^^59^69^private final Map<String, FunctionState> fns = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  Map<Node, String> anonFns = Maps.newHashMap (  ) ;^65^^^^^60^70^private final Map<Node, String> anonFns = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  FunctionInjector injector;^69^^^^^64^74^private final FunctionInjector injector;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P12_Insert_Condition]^if  ( !blockFunctionInliningEnabled )  { private final boolean blockFunctionInliningEnabled; }^71^^^^^66^76^private final boolean blockFunctionInliningEnabled;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  boolean inlineAnonymousFunctionExpressions;^72^^^^^67^77^private final boolean inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P12_Insert_Condition]^if  ( inlineAnonymousFunctionExpressions )  { private final boolean inlineAnonymousFunctionExpressions; }^72^^^^^67^77^private final boolean inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  boolean inlineGlobalFunctions;^73^^^^^68^78^private final boolean inlineGlobalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P1_Replace_Type]^private  short  callsSeen = 0;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^private int callsSeen = 5;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private int callsSeen  = null ;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private CallVisitorCallback callback;^335^^^^^330^340^protected CallVisitorCallback callback;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  FunctionInjector injector;^515^^^^^510^520^private final FunctionInjector injector;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private Function fn = this;^758^^^^^753^763^private Function fn = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private Node safeFnNode  = null ;^759^^^^^754^764^private Node safeFnNode = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^private boolean inline = false;^760^^^^^755^765^private boolean inline = true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private boolean inline  = null ;^760^^^^^755^765^private boolean inline = true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^private boolean remove = false;^761^^^^^756^766^private boolean remove = true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^private boolean inlineDirectly = true;^762^^^^^757^767^private boolean inlineDirectly = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private boolean inlineDirectly  = null ;^762^^^^^757^767^private boolean inlineDirectly = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^private boolean referencesThis = true;^763^^^^^758^768^private boolean referencesThis = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private Map<Node, Reference> references = false;^764^^^^^759^769^private Map<Node, Reference> references = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private JSModule module ;^765^^^^^760^770^private JSModule module = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private Set<String> namesToAlias ;^766^^^^^761^771^private Set<String> namesToAlias = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  Node fn;^906^^^^^901^911^private final Node fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P1_Replace_Type]^private final char fakeName;^949^^^^^944^954^private final String fakeName;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^private  char fakeName;^949^^^^^944^954^private final String fakeName;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^boolean requiresDecomposition;^972^^^^^967^977^final boolean requiresDecomposition;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P12_Insert_Condition]^if  ( ref.requiresDecomposition )  { final boolean requiresDecomposition; }^972^^^^^967^977^final boolean requiresDecomposition;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P3_Replace_Literal]^boolean inlined = true;^973^^^^^968^978^boolean inlined = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P8_Replace_Mix]^boolean inlined  = null ;^973^^^^^968^978^boolean inlined = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference   [VARIABLES] 
[P2_Replace_Operator]^Preconditions.checkArgument ( compiler == null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P14_Delete_Statement]^^83^84^^^^76^95^Preconditions.checkArgument ( compiler != null ) ; Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( changed != null ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkArgument ( compiler != null ) ;^83^^^^^76^95^Preconditions.checkArgument ( compiler != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P2_Replace_Operator]^Preconditions.checkArgument ( safeNameIdSupplier == null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P14_Delete_Statement]^^84^85^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ; this.compiler = compiler;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( changed != null ) ;Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^84^^^^^76^95^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.compiler =  null;^85^^^^^76^95^this.compiler = compiler;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.module = module;this.compiler = compiler;^85^^^^^76^95^this.compiler = compiler;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inline = inline;this.compiler = compiler;^85^^^^^76^95^this.compiler = compiler;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.remove = remove;this.compiler = compiler;^85^^^^^76^95^this.compiler = compiler;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.inlineGlobalFunctions = referencesThis;^87^^^^^76^95^this.inlineGlobalFunctions = inlineGlobalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;this.inlineGlobalFunctions = inlineGlobalFunctions;^87^^^^^76^95^this.inlineGlobalFunctions = inlineGlobalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineLocalFunctions = inlineLocalFunctions;this.inlineGlobalFunctions = inlineGlobalFunctions;^87^^^^^76^95^this.inlineGlobalFunctions = inlineGlobalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.inlineLocalFunctions = requiresDecomposition;^88^^^^^76^95^this.inlineLocalFunctions = inlineLocalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.inlineLocalFunctions =  inlined;^88^^^^^76^95^this.inlineLocalFunctions = inlineLocalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;this.inlineLocalFunctions = inlineLocalFunctions;^88^^^^^76^95^this.inlineLocalFunctions = inlineLocalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineGlobalFunctions = inlineGlobalFunctions;this.inlineLocalFunctions = inlineLocalFunctions;^88^^^^^76^95^this.inlineLocalFunctions = inlineLocalFunctions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.inlineAnonymousFunctionExpressions = requiresDecomposition;^89^90^^^^76^95^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.inlineAnonymousFunctionExpressions =  inlined;^89^90^^^^76^95^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineLocalFunctions = inlineLocalFunctions;this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^89^90^^^^76^95^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inlineGlobalFunctions = inlineGlobalFunctions;this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^89^90^^^^76^95^this.inlineAnonymousFunctionExpressions = inlineAnonymousFunctionExpressions;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.blockFunctionInliningEnabled = remove;^91^^^^^76^95^this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.blockFunctionInliningEnabled =  inlineLocalFunctions;^91^^^^^76^95^this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P4_Replace_Constructor]^this.injector = new FunctionInjector (  safeNameIdSupplier, enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P4_Replace_Constructor]^this.injector = new FunctionInjector ( compiler,  enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P4_Replace_Constructor]^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, inlineLocalFunctions ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.injector = new FunctionInjector ( enableExpressionDecomposition, safeNameIdSupplier, compiler ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.injector = new FunctionInjector ( compiler, enableExpressionDecomposition, safeNameIdSupplier ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.injector =  new FunctionInjector ( null, safeNameIdSupplier, enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, requiresDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.injector = new FunctionInjector ( safeNameIdSupplier, compiler, enableExpressionDecomposition ) ;^93^94^^^^76^95^this.injector = new FunctionInjector ( compiler, safeNameIdSupplier, enableExpressionDecomposition ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Supplier,boolean,boolean,boolean,boolean,boolean)   AbstractCompiler compiler String> safeNameIdSupplier boolean inlineGlobalFunctions boolean inlineLocalFunctions boolean inlineAnonymousFunctionExpressions boolean blockFunctionInliningEnabled boolean enableExpressionDecomposition [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  Supplier  safeNameIdSupplier  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.functionMap =  null;^342^^^^^339^345^this.functionMap = fns;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.fn = fn;this.functionMap = fns;^342^^^^^339^345^this.functionMap = fns;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.anonFunctionMap = anonFns;this.functionMap = fns;^342^^^^^339^345^this.functionMap = fns;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.anonFunctionMap =  null;^343^^^^^339^345^this.anonFunctionMap = anonFns;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.functionMap = fns;this.anonFunctionMap = anonFns;^343^^^^^339^345^this.anonFunctionMap = anonFns;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.callback =  null;^344^^^^^339^345^this.callback = callback;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.callback = this;this.callback = callback;^344^^^^^339^345^this.callback = callback;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^super (  anonFns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^super ( fns,  null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^super ( anonFns, fns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P14_Delete_Statement]^^391^392^^^^388^393^super ( fns, anonFns, null ) ; this.callback = this;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.callback  =  this.callback ;^392^^^^^388^393^this.callback = this;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.callback = callback;this.callback = this;^392^^^^^388^393^this.callback = this;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P8_Replace_Mix]^this.injector =  null;^518^^^^^517^519^this.injector = injector;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector)   FunctionInjector injector [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inline = inline;this.injector = injector;^518^^^^^517^519^this.injector = injector;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] FunctionInjector)   FunctionInjector injector [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.fn = var;^909^^^^^908^910^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.var = var;this.fn = fn;^909^^^^^908^910^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.functionMap = fns;this.fn = fn;^909^^^^^908^910^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.inline = inline;this.fn = fn;^909^^^^^908^910^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.var = safeFnNode;^930^^^^^929^931^this.var = var;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node var [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P11_Insert_Donor_Statement]^this.fn = fn;this.var = var;^930^^^^^929^931^this.var = var;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node)   Node var [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  
[P5_Replace_Variable]^this.fn = var;^952^^^^^951^956^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.var = var;this.fn = fn;^952^^^^^951^956^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.functionMap = fns;this.fn = fn;^952^^^^^951^956^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.inline = inline;this.fn = fn;^952^^^^^951^956^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.fakeName = String.valueOf ( callsSeen ) ;^955^^^^^951^956^this.fakeName = String.valueOf ( index ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^955^^^^^951^956^this.fakeName = String.valueOf ( index ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super ( var, module, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super (  module, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super ( callNode,  mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super ( callNode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super ( mode, module, callNode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super ( module, callNode, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^976^977^^^^974^978^super ( callNode, module, mode ) ; this.requiresDecomposition = decompose;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.requiresDecomposition = requiresDecomposition;^977^^^^^974^978^this.requiresDecomposition = decompose;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.requiresDecomposition =  referencesThis;^977^^^^^974^978^this.requiresDecomposition = decompose;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  InliningMode  mode  Node  callNode  fn  safeFnNode  var  JSModule  module  String  fakeName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionState fs = fns.get ( fakeName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionState fs = fnName.get ( fns ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fs = fns.get ( fnName ) ;^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^98^^^^^97^104^FunctionState fs = fns.get ( fnName ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fs != null )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( fs == true )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnNode != null )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( references == null )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( ref != null )  {^99^^^^^97^104^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs = new com.google.javascript.jscomp.InlineFunctions.FunctionState(); fns.put(fnName, fs);^99^100^101^102^^97^104^if  ( fs == null )  { fs = new FunctionState (  ) ; fns.put ( fnName, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^99^100^101^102^^97^104^if  ( fs == null )  { fs = new FunctionState (  ) ; fns.put ( fnName, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^fs = fs =  new FindCandidateFunctions (  )  ;^100^^^^^97^104^fs = new FunctionState (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs =  new FindCandidateFunctions (  )  ;^100^^^^^97^104^fs = new FunctionState (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     fs = new FunctionState (  ) ;     fns.put ( fnName, fs ) ; }^100^^^^^97^104^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fns.put ( fakeName, fs ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fns.put (  fs ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fns.put ( fnName ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fns.put ( fs, fnName ) ;^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^101^^^^^97^104^fns.put ( fnName, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getOrCreateFunctionState [RETURN_TYPE] InlineFunctions$FunctionState   String fnName [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  namesToAlias  CallVisitorCallback  callback  Node  callNode  fn  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkArgument ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkState ( compiler.reportCodeChange (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkState ( compiler .getUniqueNameIdSupplier (  )   ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( compiler.isNormalized (  )  ) ;^110^^^^^95^125^Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new Inline ( injector )   ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, var, new FindCandidateFunctions (  )  ) ;^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^112^^^^^97^127^NodeTraversal.traverse ( compiler, root, new FindCandidateFunctions (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fns.keySet (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !namesToAlias.isEmpty (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !name.isEmpty (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !names.isEmpty (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^113^^^^^98^128^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return ;^113^114^115^^^98^128^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^113^114^115^^^98^128^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^113^^^^^98^128^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^113^^^^^98^128^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^113^^^^^98^128^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^113^^^^^98^128^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^new FindCandidateFunctions (  )   ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new FindCandidatesReferences (  anonFns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new FindCandidatesReferences ( fns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new FindCandidatesReferences ( anonFns, fns )  ) ;^117^^^^^102^132^new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new FindCandidateFunctions (  )   ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, safeFnNode, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences (  anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, anonFns, new FindCandidatesReferences ( fns, root )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new FindCandidatesReferences ( fns, anonFns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( anonFns, fns )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( anonFns, root, new FindCandidatesReferences ( fns, compiler )  ) ;^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^116^117^^^^101^131^NodeTraversal.traverse ( compiler, root, new FindCandidatesReferences ( fns, anonFns )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^trimCanidatesUsingOnCost (  ) ;^118^^^^^103^133^trimCanidatesNotMeetingMinimumRequirements (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^118^^^^^103^133^trimCanidatesNotMeetingMinimumRequirements (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^trimCanidatesUsingOnCost (  ) ;trimCanidatesNotMeetingMinimumRequirements (  ) ;^118^^^^^103^133^trimCanidatesNotMeetingMinimumRequirements (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fns.keySet (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !namesToAlias.isEmpty (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !name.isEmpty (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !names.isEmpty (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^119^^^^^104^134^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return ;^119^120^121^^^104^134^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^119^120^121^^^104^134^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^119^^^^^104^134^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^119^^^^^104^134^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^119^^^^^104^134^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^119^^^^^104^134^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Set<String> fnNames = Sets.newHashSet ( fns.entrySet (  )  ) ;^131^^^^^116^146^Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Set<String> changed = Sets.newHashSet (  ) ;Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^131^^^^^116^146^Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^131^^^^^116^146^Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^131^132^^^^116^146^Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ; injector.setKnownConstants ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^injector.isDirectCallNodeReplacementPossible ( fnNames ) ;^132^^^^^117^147^injector.setKnownConstants ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^injector .isDirectCallNodeReplacementPossible ( root )  ;^132^^^^^117^147^injector.setKnownConstants ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^132^^^^^117^147^injector.setKnownConstants ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^decomposeExpressions ( fnNames ) ;injector.setKnownConstants ( fnNames ) ;^132^^^^^117^147^injector.setKnownConstants ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^removeInlinedFunctions (  ) ;^134^^^^^119^149^trimCanidatesUsingOnCost (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^134^^^^^119^149^trimCanidatesUsingOnCost (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^trimCanidatesNotMeetingMinimumRequirements (  ) ;trimCanidatesUsingOnCost (  ) ;^134^^^^^119^149^trimCanidatesUsingOnCost (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fns.keySet (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !namesToAlias.isEmpty (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !name.isEmpty (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !names.isEmpty (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^135^^^^^120^150^if  ( fns.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return ;^135^136^137^^^120^150^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^135^136^137^^^120^150^if  ( fns.isEmpty (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^135^^^^^120^150^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^135^^^^^120^150^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^removeInlinedFunctions (  ) ;^138^^^^^123^153^resolveInlineConflicts (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^138^^^^^123^153^resolveInlineConflicts (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^resolveInlineConflictsForFunction ( fs ) ;resolveInlineConflicts (  ) ;^138^^^^^123^153^resolveInlineConflicts (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^removeInlinedFunctions (  ) ;resolveInlineConflicts (  ) ;^138^^^^^123^153^resolveInlineConflicts (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^getOrCreateFunctionState ( fnNames ) ;^139^^^^^124^154^decomposeExpressions ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^139^^^^^124^154^decomposeExpressions ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^injector.setKnownConstants ( fnNames ) ;decomposeExpressions ( fnNames ) ;^139^^^^^124^154^decomposeExpressions ( fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new CallVisitor (  anonFns, new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new CallVisitor ( fns,  new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new CallVisitor ( anonFns, fns, new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^new CallVisitor ( injector, anonFns, new Inline ( fns )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^new CallVisitor ( fns, 2, new Inline ( injector )  )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^CallVisitor ( fns, anonFns,  new FindCandidateFunctions (  )   )  ) ;^141^^^^^126^156^new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, safeFnNode, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new CallVisitor (  anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns,  new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, anonFns, new CallVisitor ( fns, root, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( injector, root, new CallVisitor ( fns, anonFns, new Inline ( compiler )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, fns, new CallVisitor ( root, anonFns, new Inline ( injector )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, injector, new Inline ( anonFns )  )  ) ;^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^140^141^^^^125^155^NodeTraversal.traverse ( compiler, root, new CallVisitor ( fns, anonFns, new Inline ( injector )  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^resolveInlineConflicts (  ) ;^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^resolveInlineConflictsForFunction ( fs ) ;removeInlinedFunctions (  ) ;^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;removeInlinedFunctions (  ) ;^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.removeBlockInliningReferences (  ) ;removeInlinedFunctions (  ) ;^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^resolveInlineConflicts (  ) ;removeInlinedFunctions (  ) ;^143^^^^^128^158^removeInlinedFunctions (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  callNode  externs  fn  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return inlineLocalFunctions && inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent != null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || var == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlined || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlineLocalFunctions || requiresDecomposition || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlineLocalFunctions || parent || inlineAnonymousFunctionExpressions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return parent || inlineAnonymousFunctionExpressions || inlineLocalFunctions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlineAnonymousFunctionExpressions || inlineLocalFunctions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isFunctionObjectCall ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatement ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return   inlined || parent != null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatement ( parent ) ;;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^|| root == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^|| parent == null || NodeUtil.isFunctionObjectCall ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^|| safeFnNode == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^|| NodeUtil.isStatementBlock ( var ) ;^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^|| NodeUtil.isStatement ( parent ) ;^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^|| NodeUtil .isStatement ( callNode )  ;^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( !NodeUtil.isStatement ( n )  )  { || NodeUtil.isStatementBlock ( parent ) ; }^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  nodeTraversal  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) &&  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  (  ( t.inGlobalScope (  )  || inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  (  ( t.inGlobalScope (  )  && requiresDecomposition ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  (  ( t.inGlobalScope (  )  && inlineLocalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineGlobalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ) {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (   ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( t.inGlobalScope( && inlineGlobalFunctions) )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( !(t.inGlobalScope() && inlineLocalFunctions) )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  (  ( t .getModule (  )   && inlineGlobalFunctions ) ||  ( !t^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  (  ( t .getModule (  )   && inlined ) ||  ( !t^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^findNamedFunctions(t, n, parent);^163^164^165^166^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^163^164^165^166^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t, safeFnNode, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t, n, var ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions (  n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t,  parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( n, t, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t, parent, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^visit ( t, var, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findCalledFunctions ( c, changed ) ;findNamedFunctions ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findCalledFunctions ( node, changed ) ;findNamedFunctions ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^super.visit ( t, n, parent ) ;findNamedFunctions ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^checkNameUsage ( t, n, parent ) ;findNamedFunctions ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^||  ( !t .getModule (  )   && inlineLocalFunctions )  )  {^164^^^^^162^171^||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^164^165^^^^162^171^||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( t, var, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findNamedFunctions ( parent, n, t ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^visit ( t, n, var ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( requiresDecomposition )  {^168^^^^^162^171^if  ( inlineAnonymousFunctionExpressions )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( inlineLocalFunctions )  {^168^^^^^162^171^if  ( inlineAnonymousFunctionExpressions )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^findAnonymousFunctionExpressions(t, n);^168^169^170^^^162^171^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^168^169^170^^^162^171^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( t, var ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findAnonymousFunctionExpressions (  n ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( n, t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatement ( safeFnNode )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !NodeUtil.isStatementBlock ( n )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !NodeUtil .isStatementBlock ( fn )   )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !NodeUtil.isStatementBlock ( root )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return ;^174^175^176^177^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^174^175^176^177^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( referencesThis ( block )  )  {     fs.setReferencesThis ( true ) ; }^174^^^^^159^189^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( r.mode )  ==  ( BLOCK )  )  {     return true; }^174^^^^^159^189^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatement ( parent )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !NodeUtil.isStatement ( root )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^174^^^^^159^189^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( var.hasOneChild (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( (nameNode.getType() == NAME && nameNode.hasChildren()) )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == NAME )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( nameNode.getFirstChild (  ) .getType (  )  == FUNCTION )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.getAncestor (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( root.hasOneChild (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  == Token.NAME || nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  > Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  != Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( safeFnNodeameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.NAME && nameNodeameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( nameNodeameNode.getType (  )  == Token.NAME && n.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == Token.NAME ) {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (  nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( (nameNode.getType() == NAME && nameNode.hasChildren()) )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == NAME )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( nameNode.getFirstChild (  ) .getType (  )  == FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode.getAncestor (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode.getType (  )  == Token.NAME && nameNode.getAncestor (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode.isExported (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode .getString (  )   == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  )^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getAncestor (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( root.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^maybeAddFunction(new com.google.javascript.jscomp.InlineFunctions.FunctionVar(n), t.getModule());^188^189^190^191^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^188^189^190^191^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^188^^^^^173^203^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( n.hasOneChild (  )  )  {     Node nameNode = n.getFirstChild (  ) ;     if  (  (  (  ( nameNode.getType (  )  )  ==  ( NAME )  )  &&  ( nameNode.hasChildren (  )  )  )  &&  (  ( nameNode.getFirstChild (  ) .getType (  )  )  ==  ( FUNCTION )  )  )  {         maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;     } }^188^^^^^173^203^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^maybeAddFunction ( maybeAddFunction (  new FindCandidateFunctions (  )  , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( varew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( rootew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^maybeAddFunction ( fn, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^maybeAddFunction ( new FunctionVar ( n ) , t .getCompiler (  )   ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^maybeAddFunction ( maybeAddFunction (  new FindCandidateFunctions (  )  , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node safeFnNodeameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node nameNode = n.getAncestor (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node nameNode = n .getString (  )  ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node varameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node gramps = n.getAncestor ( 2 ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node rootameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^return var.getFirstChild (  ) .getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( safeFnNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( root .getString (  )   == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  )^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^&& root.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^&& nameNode.getFirstChild (  ) .isExported (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^&& nameNode.getAncestor (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^&& var.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^189^190^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^&& parent.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^&& parent.getAncestor (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( safeFnNodeew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^maybeAddFunction ( new FunctionVar ( n ) , t .getCompiler (  )   ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^process ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^maybeAddFunction ( fn, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  >= Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( varameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( nameNode.getType (  )  == Token.NAME && nameNode .hasOneChild (  )  && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !name.valueOf (  )  )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !namesToAlias.isEmpty (  )  )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !names.isEmpty (  )  )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^maybeAddFunction(fn, t.getModule());^202^203^204^^^187^217^if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^202^203^204^^^187^217^if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction (  t.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( t, fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( fn, t.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( name.isEmpty (  )  )  )  {     maybeAddFunction ( fn, t.getModule (  )  ) ; }^203^^^^^188^218^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^maybeAddFunction ( fn, t .getCompiler (  )   ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( varew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P4_Replace_Constructor]^Function fn = Function fn =  new FindCandidateFunctions (  )  ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Function fn = parentew NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Function fn = varew NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;Function fn = new NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;Function fn = new NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;Function fn = new NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^char name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = null;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Set<String> changed = Sets.newHashSet (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;String name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^switch  ( n.getAncestor (  )  )  {^179^^^^^164^194^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^179^^^^^164^194^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^switch  ( root .getString (  )   )  {^179^^^^^164^194^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node parentameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( var .getString (  )   == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  )^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.NAME && nameNode.getAncestor (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^&& nameNode.getFirstChild (  )  .getString (  )   == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^&& nameNode .getString (  )  .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^&& var.getFirstChild (  ) .isExported (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) && parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  != Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( nameNode ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatement ( parent ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getAncestor (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( root ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( safeFnNode ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatementBlock ( var ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^|| root.getType (  )  == Token.LABEL ) ;^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^|| parent.getAncestor (  )  == Token.LABEL ) ;^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^|| root.getAncestor (  )  == Token.LABEL ) ;^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^199^200^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ; Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;|| parent.getType (  )  == Token.LABEL ) ;^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  { || parent.getType (  )  == Token.LABEL ) ; Function fn = new NamedFunction ( n ) ; }^199^200^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ; Function fn = new NamedFunction ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !name .get ( null )   )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .getType (  )  >= Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .getType (  )  != Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( root.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.getFirstChild (  ) .isExported (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.getAncestor (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n .getString (  )  .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.isExported (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.getFirstChild (  ) .getAncestor (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( n.getFirstChild (  ) .getType (  )  == Token.2 )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( var )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^} else {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^} else if  ( NodeUtil.getFunctionBody ( n )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionBody ( root )   )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node fnIdentifingNode = n.getFirstChild().getFirstChild(); if ((fnIdentifingNode.getType()) == (com.google.javascript.rhino.Token.FUNCTION)) {    fnNode = fnIdentifingNode;};^223^224^225^226^227^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^223^224^225^226^227^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( n )  )  {     checkState ( isGet ( child )  ) ;     Node fnIdentifingNode = child.getFirstChild (  ) ;     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {         name = fnIdentifingNode.getString (  ) ;     }else         if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {             name = anonFunctionMap.get ( fnIdentifingNode ) ;         }      }^223^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( n.getFirstChild (  ) .getType (  )  )  ==  ( FUNCTION )  )  {     fnNode = n.getFirstChild (  ) ; }else     if  ( isFunctionObjectCall ( n )  )  {         Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;         if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {             fnNode = fnIdentifingNode;         }     }^223^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {     name = fnIdentifingNode.getString (  ) ; }else     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         name = anonFunctionMap.get ( fnIdentifingNode ) ;     }^223^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  > Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fnIdentifingNode.getAncestor (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( var.getAncestor (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fnNode = fnIdentifingNode;^225^226^227^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^225^226^227^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     name = anonFunctionMap.get ( fnIdentifingNode ) ; }^225^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^225^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fnNode = nameNode;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode =  var;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fnNode = parent;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node fnIdentifingNode = var.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnIdentifingNode = n.isExported (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnIdentifingNode = n .getString (  )^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnIdentifingNode = n.getAncestor (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node fnIdentifingNode = var.getAncestor (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node fnIdentifingNode = nameNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^224^225^226^227^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fnIdentifingNode .getString (  )   == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  != Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode =  root;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( parent )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^223^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node fnIdentifingNode = root.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fnNode = var.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fnNode = n.getAncestor (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode =  safeFnNode.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fnNode = nameNode.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode = var.getAncestor (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( safeFnNode )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  >= Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode =  safeFnNode;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node fnIdentifingNode = parent.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( safeFnNode.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fnNode == null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( safeFnNode != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( fnNodeNode != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( fnNode != false )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( inline == false )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs == null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( references == null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( ref != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^com.google.javascript.jscomp.InlineFunctions.Function fn = new com.google.javascript.jscomp.InlineFunctions.AnonymousFunction(fnNode, ((callsSeen)++)); maybeAddFunction(fn, t.getModule()); anonFns.put(fnNode, fn.getName());^231^232^233^234^235^215^238^if  ( fnNode != null )  { Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^231^232^233^234^235^215^238^if  ( fnNode != null )  { Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Function fn = new AnonymousFunction ( parent, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Function fn = new AnonymousFunction ( var, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = new NamedFunction ( n ) ;Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fnNode != null )  {     Function fn = new AnonymousFunction ( fnNode,  (  ( callsSeen ) ++ )  ) ;     maybeAddFunction ( fn, t.getModule (  )  ) ;     anonFns.put ( fnNode, fn.getName (  )  ) ; }^232^^^^^215^238^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction (  t.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddFunction ( t, fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( fn, t.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^233^234^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^anonFns.put ( var, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^anonFns.put (  fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^anonFns.put ( fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^anonFns.put ( fn, fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^anonFns.put ( fnNode, fn .getFunctionNode (  )   ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;anonFns.put ( fnNode, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fnNode = root.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Function fn = new AnonymousFunction ( nameNode, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Function fn = new AnonymousFunction ( safeFnNode, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = null;Node fnNode = null;^220^^^^^215^238^Node fnNode = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fnNode != null )  { Node fnNode = null; }^220^^^^^215^238^Node fnNode = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^switch  ( var.getType (  )  )  {^216^^^^^215^238^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^switch  ( n.getAncestor (  )  )  {^216^^^^^215^238^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^switch  ( parent.getType (  )  )  {^216^^^^^215^238^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( var.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fnNode = n .getString (  )  ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fnNode = root.getAncestor (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^} else if  ( NodeUtil.getFunctionBody ( parent )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node fnIdentifingNode = nameNode .getString (  )^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^maybeAddFunction ( fn, t .getCompiler (  )   ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^anonFns.put ( root, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^anonFns.put ( nameNode, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^char name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = null;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Set<String> changed = Sets.newHashSet (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;String name = fn.getName (  ) ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = fn .getFunctionNode (  )  ;^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^246^^^^^231^261^String name = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionState fs = getOrCreateFunctionState ( fnName ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^FunctionState fs = decomposeExpressions ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^FunctionState fs = decomposeExpressions ( fnName ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = new NamedFunction ( n ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fs = getOrCreateFunctionState ( name ) ;^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^247^^^^^232^262^FunctionState fs = getOrCreateFunctionState ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^253^^^^^238^268^if  ( fs.hasExistingFunctionDefinition (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^253^^^^^238^268^if  ( fs.hasExistingFunctionDefinition (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( n.hasOneChild (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( injector.setKnownConstants ( fn.getFunctionNode (  )  )  )  {^260^261^^^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.inlineDirectly(true);^260^261^262^263^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  { fs.inlineDirectly ( true ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^260^261^262^263^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  { fs.inlineDirectly ( true ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.inlineDirectly ( false ) ;^262^^^^^260^263^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs .canInlineDirectly (  )  ;^262^^^^^260^263^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^262^^^^^260^263^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.inlineDirectly ( true ) ;^262^^^^^260^263^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.inlineDirectly ( true ) ;^262^^^^^260^263^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !inliningLowersCost ( fn )  )  {^268^^^^^253^283^if  ( !isCandidateFunction ( fn )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.setInline(false);^268^269^270^271^^253^283^if  ( !isCandidateFunction ( fn )  )  {  fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^268^269^270^271^^253^283^if  ( !isCandidateFunction ( fn )  )  {  fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( blockFunctionInliningEnabled )  )  {     fs.setInline ( false ) ; }^268^^^^^253^283^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( mimimizeCost ( fsCalled )  )  )  {     fsCalled.setInline ( false ) ; }^268^^^^^253^283^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( !referenceAdded )  {     fs.setRemove ( false ) ; }^268^^^^^253^283^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.setInline ( true ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .canInline (  )  ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setInline ( false ) ;^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( inline == false )  { fs.setInline ( false ) ; }^270^^^^^255^285^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( fs .setInline ( requiresDecomposition )   )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( n.hasOneChild (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !namesToAlias.add (  )  )  {^280^^^^^265^295^if  ( !namesToAlias.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !name.isEmpty (  )  )  {^280^^^^^265^295^if  ( !namesToAlias.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !names.isEmpty (  )  )  {^280^^^^^265^295^if  ( !namesToAlias.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^280^^^^^265^295^if  ( !namesToAlias.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.inlineDirectly(false); fs.setNamesToAlias(namesToAlias);^280^281^282^283^^265^295^if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^280^281^282^283^^265^295^if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.inlineDirectly ( true ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^281^282^^^^266^296^fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.inlineDirectly ( false ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.inlineDirectly ( false ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.inlineDirectly ( false ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.inlineDirectly ( false ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( true ) ;fs.inlineDirectly ( false ) ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .getNamesToAlias (  )  ;^282^^^^^267^297^fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^282^^^^^267^297^fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( NodeUtil.referencesThis ( safeFnNode )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( NodeUtil.removeChild ( block )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.setReferencesThis(true);^286^287^288^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^286^287^288^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^286^^^^^271^301^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.setReferencesThis ( false ) ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .getReferencesThis (  )  ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;fs.setReferencesThis ( true ) ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.getReferencesThis (  )  ) ;fs.setReferencesThis ( true ) ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setReferencesThis ( true ) ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( true ) ;fs.setReferencesThis ( true ) ;^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( NodeUtil.referencesThis ( block )  )  { fs.setReferencesThis ( true ) ; }^287^^^^^272^302^fs.setReferencesThis ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnNode = fn .getName (  )  ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node gramps = n.getAncestor ( 2 ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node fnNode = fn.getFunctionNode (  ) ;^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( nameNode ) ;^278^279^^^^263^293^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( parent ) ;^278^279^^^^263^293^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( parent ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil.removeChild ( fnNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node block = NodeUtil.removeChild ( var ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node block = NodeUtil.getFunctionBody ( fnNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs .getModule (  )  ;^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setModule ( module ) ;^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setModule ( module ) ;^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setModule ( module ) ;^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setModule ( module ) ;^275^^^^^260^290^fs.setModule ( module ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^277^^^^^262^292^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionArgumentInjector.findModifiedParameters ( parent ) ;^279^^^^^264^294^FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^FunctionArgumentInjector.findModifiedParameters ( nameNode ) ;^279^^^^^264^294^FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^279^280^281^282^283^264^294^FunctionArgumentInjector.findModifiedParameters ( fnNode ) ; if  ( !namesToAlias.isEmpty (  )  )  { fs.inlineDirectly ( false ) ; fs.setNamesToAlias ( namesToAlias ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs .canInlineDirectly (  )  ;^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^281^^^^^266^296^fs.inlineDirectly ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( safeFnNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunctionObjectCall ( nameNode )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node block = NodeUtil.getFunctionBody ( nameNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( NodeUtil.referencesThis ( var )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( root )   )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( referencesThis ( block )  )  {     fs.setReferencesThis ( true ) ; }^286^^^^^271^301^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( NodeUtil.referencesThis ( nameNode )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fs.canInline (  )  || !fs.canInlineDirectly (  )  )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( fs.canInline (  )  ) {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (  !fs.canInlineDirectly (  )  )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  && !fs.canInlineDirectly (  )  )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.canInline (  )  && !fs.inlineDirectly (  )  )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^if (!(blockFunctionInliningEnabled)) {    fs.setInline(false);};^292^293^294^295^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  { if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^292^293^294^295^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  { if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !inlined )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.setInline(false);^293^294^295^^^278^308^if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^293^294^295^^^278^308^if  ( !blockFunctionInliningEnabled )  { fs.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( mimimizeCost ( fsCalled )  )  )  {     fsCalled.setInline ( false ) ; }^293^^^^^278^308^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( !referenceAdded )  {     fs.setRemove ( false ) ; }^293^^^^^278^308^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isCandidateFunction ( fn )  )  )  {     fs.setInline ( false ) ; }^293^^^^^278^308^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.setInline ( true ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setInline ( false ) ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( inline == false )  { fs.setInline ( false ) ; }^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .canInline (  )  ;^294^^^^^279^309^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !requiresDecomposition )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !inlineLocalFunctions )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( var ) ;^278^279^^^^263^293^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( root ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunctionObjectCall ( block )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .getFn (  )  ;^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setFn ( fn ) ;^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setFn ( fn ) ;^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setFn ( fn ) ;^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setFn ( fn ) ;^259^^^^^244^274^fs.setFn ( fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( fn.isDirectCallNodeReplacementPossible ( injector.getFunctionNode (  )  )  )  {^260^261^^^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( injector .inliningLowersCost ( fs )   )  {^260^261^^^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {     fs.inlineDirectly ( true ) ; }^260^^^^^245^275^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fn .getName (  )   )  )  {^261^^^^^246^276^fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^261^262^^^^246^276^fn.getFunctionNode (  )  )  )  { fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.inlineDirectly ( false ) ;^262^^^^^247^277^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .canInlineDirectly (  )  ;^262^^^^^247^277^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^262^^^^^247^277^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.inlineDirectly ( true ) ;^262^^^^^247^277^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.inlineDirectly ( true ) ;^262^^^^^247^277^fs.inlineDirectly ( true ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node block = NodeUtil.removeChild ( parent ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( NodeUtil.referencesThis ( parent )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .setInline ( decompose )   && !fs^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.canInline (  )  && !fs .inlineDirectly ( inlineDirectly )   )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .setInline ( inline )   )  {^274^^^^^259^289^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs.setNamesToAlias ( 4 ) ;^282^^^^^267^297^fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( NodeUtil.referencesThis ( root )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node block = NodeUtil.getFunctionBody ( var ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^FunctionArgumentInjector.findModifiedParameters ( var ) ;^279^^^^^264^294^FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( nameNode )   )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .setInline ( inlined )   && !fs^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  (  !fs .inlineDirectly ( inlineDirectly )   )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !referencesThis )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( blockFunctionInliningEnabled )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node block = NodeUtil.removeChild ( safeFnNode ) ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( fs .setInline ( enableExpressionDecomposition )   )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( injector.isDirectCallNodeReplacementPossible ( fn .getName (  )   )  )  {^260^261^^^^245^275^if  ( injector.isDirectCallNodeReplacementPossible ( fn.getFunctionNode (  )  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( NodeUtil.removeChild ( parent )  )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .setInline ( inline )   && !fs^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.setInline ( true ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs .canInline (  )  ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setInline ( false ) ;^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( inline == false )  { fs.setInline ( false ) ; }^254^^^^^239^269^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( fs .setInline ( remove )   )  {^257^^^^^242^272^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs.setNamesToAlias ( this ) ;^282^^^^^267^297^fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunctionObjectCall ( safeFnNode )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fs.setNamesToAlias ( null ) ;^282^^^^^267^297^fs.setNamesToAlias ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.canInline (  )  && !fs .inlineDirectly ( enableExpressionDecomposition )   )  {^292^^^^^277^307^if  ( fs.canInline (  )  && !fs.canInlineDirectly (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !remove )  {^293^^^^^278^308^if  ( !blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( root ) ;^278^279^^^^263^293^Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunctionObjectCall ( fn )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^FunctionArgumentInjector.findModifiedParameters ( root ) ;^279^^^^^264^294^FunctionArgumentInjector.findModifiedParameters ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node block = NodeUtil .isFunctionObjectCall ( parent )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( safeFnNode )   )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node block = NodeUtil .isFunctionObjectCall ( fnNode )  ;^285^^^^^270^300^Node block = NodeUtil.getFunctionBody ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( NodeUtil .removeChild ( externs )   )  {^286^^^^^271^301^if  ( NodeUtil.referencesThis ( block )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .FunctionState (  )   )  {^253^^^^^238^268^if  ( fs.hasExistingFunctionDefinition (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddFunction [RETURN_TYPE] void   Function fn JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^char fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^String fnName = fn .getFunctionNode (  )  ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^anonFns.put ( fnNode, fn.getName (  )  ) ;String fnName = fn.getName (  ) ;^307^^^^^305^320^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( compiler.getCodingConvention (  ) .isExported ( name )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( fnName.getCodingConvention (  ) .isExported ( compiler )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( compiler.getCodingConvention (  ) .equals ( fnName )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( compiler.reportCodeChange (  ) .isExported ( fnName )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( compiler.getCodingConvention (  ) .equals ( name )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return true;^315^^^^^305^320^return false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( compiler .getUniqueNameIdSupplier (  )  .isExported ( fnName )  )  {^308^^^^^305^320^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( compiler.getCodingConvention (  ) .isExported ( fnName )  )  {     return false; }^308^^^^^305^320^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node gramps = n.getAncestor ( 2 ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node fnNode = fn.getFunctionNode (  ) ;^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^318^^^^^305^320^Node fnNode = fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.doesFunctionMeetMinimumRequirements ( name, fnNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.doesFunctionMeetMinimumRequirements ( fnName, parent ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.doesFunctionMeetMinimumRequirements (  fnNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.doesFunctionMeetMinimumRequirements ( fnName ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.doesFunctionMeetMinimumRequirements ( fnNode, fnName ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return fnName.doesFunctionMeetMinimumRequirements ( injector, fnNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return injector.doesFunctionMeetMinimumRequirements ( fnName, var ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return fnNode.doesFunctionMeetMinimumRequirements ( fnName, injector ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return injector.doesFunctionMeetMinimumRequirements ( fnName, nameNode ) ;^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^319^^^^^305^320^return injector.doesFunctionMeetMinimumRequirements ( fnName, fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] isCandidateFunction [RETURN_TYPE] boolean   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( child.getType() == FUNCTION )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( child.getAncestor (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( child.putType (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( child.getType (  )  < Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( child.getType (  )  <= Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( root.getType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == NAME )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( child.getAncestor (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( child .getString (  )   == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( child.putType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^}  if  ( var.getType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( root )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == FUNCTION )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( NodeUtil.getFunctionBody ( n )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  <= Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  >= Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fnIdentifingNode.getAncestor (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fnIdentifingNode .getString (  )   == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fnIdentifingNode.putType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^name = fnIdentifingNode.getString();^362^363^364^365^366^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^362^363^364^365^366^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( n )  )  {     Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         fnNode = fnIdentifingNode;     } }^362^^^^^347^377^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( CALL )  )  {     Node child = node.getFirstChild (  ) ;     if  (  ( child.getType (  )  )  ==  ( NAME )  )  {         String name = child.getString (  ) ;         changed.add ( name ) ;     } }^362^^^^^347^377^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^362^^^^^347^377^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  != Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( nameNode.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( fnIdentifingNode.getAncestor (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( fnIdentifingNode .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( fnIdentifingNode.putType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^name = anonFunctionMap.get(fnIdentifingNode);^364^365^366^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^364^365^366^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^364^^^^^349^379^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^364^^^^^349^379^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     fnNode = fnIdentifingNode; }^364^^^^^349^379^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( parent ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = fnIdentifingNode.get ( anonFunctionMap ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = anonFunctionMap.put ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( child ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( n ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.get ( var ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^365^366^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  anonFunctionMap.get ( root ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( root.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( nameNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P1_Replace_Type]^name = fnIdentifingNode.getchar (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = nameNode.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = fnIdentifingNode.getAncestor (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = fnIdentifingNode .getParent (  )  ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  var.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;name = fnIdentifingNode.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = safeFnNode.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = n.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^363^364^365^366^^348^378^name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  >= Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( fnIdentifingNode.getType (  )  == Token.null )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( n.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnIdentifingNode = child.getAncestor (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnIdentifingNode = child .getString (  )  ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = root.getAncestor (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( nameNode )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatement ( child )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( fnNode )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatement ( n )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^360^361^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( safeFnNode )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( n )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^360^^^^^345^375^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node fnIdentifingNode = n.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = nameNode .getString (  )  ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^361^362^363^364^365^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( var.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( root.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = var.getAncestor (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( var.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  > Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  < Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( parent.getAncestor (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  < Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^}  if  ( nameNode.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = null.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( root ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = n .getParent (  )  ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  anonFunctionMap.get ( null ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( safeFnNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = root.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node fnIdentifingNode = safeFnNode.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( nameNode )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( NodeUtil.getFunctionBody ( fnNode )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^359^^^^^344^374^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( safeFnNode )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( fnIdentifingNode )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatement ( parent )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node fnIdentifingNode = parent.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = root.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = n.getAncestor (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( n .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( safeFnNode ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = this.get ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = child.get ( anonFunctionMap ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = anonFunctionMap.put ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  anonFunctionMap.get ( n ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( fnIdentifingNode ) ;name = anonFunctionMap.get ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( nameNode ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;name = anonFunctionMap.get ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( safeFnNode )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionBody ( root )   )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  <= Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  parent.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node fnIdentifingNode = nameNode.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( parent )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isStatement ( root )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = var.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( n.getAncestor (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  != Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = this.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = null.put ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = parent.getAncestor (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( var ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( n.getType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( nameNode.getAncestor (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = anonFunctionMap.get ( root ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( var )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( var )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = parent.getAncestor (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( safeFnNode.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( nameNode .getString (  )   == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( safeFnNode.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( nameNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P1_Replace_Type]^name = child.getchar (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = var.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = child.getAncestor (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name =  parent.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = fnIdentifingNode.getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = nameNode.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = n.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^return fn.getFirstChild (  ) .getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^return var.getFirstChild (  ) .getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^} else if  ( child.getType (  )  != Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionBody ( fnIdentifingNode )   )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( fnIdentifingNode.getType (  )  == Token.null )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( parent ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^name = 3.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = nameNode.getAncestor (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^} else if  ( nameNode .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( safeFnNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( n ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( NodeUtil .getFunctionBody ( externs )   )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( fn )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^name = anonFunctionMap.put ( nameNode ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( nameNode.getAncestor (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isGet ( root )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( name == null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( fnName != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( varame != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( fs != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( name != false )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( inline == false )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fnNode != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs == null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( references == null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( ref != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( namesToAlias == null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^com.google.javascript.jscomp.InlineFunctions.FunctionState fs = functionMap.get(name); if (fs != null) {    callback.visitCallSite(t, n, parent, fs);};^369^370^^372^373^354^384^if  ( name != null )  { FunctionState fs = functionMap.get ( name ) ; if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^369^370^^372^373^354^384^if  ( name != null )  { FunctionState fs = functionMap.get ( name ) ; if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fs == null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( fs != fnNodeull )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n != fsull )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( fs != this )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fnNode != null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( references == null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( name != null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( ref != null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^callback.visitCallSite(t, n, parent, fs);^372^373^374^^^357^387^if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^372^373^374^^^357^387^if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, fnNode, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, nameNode, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite (  n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t,  parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n,  fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( parent, n, t, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, parent, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( fs, n, parent, t ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^callback .visitCallSite ( t , root , callNode , fs )  ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^callback.visitCallSite ( t, var, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^super.visit ( t, n, parent ) ;callback.visitCallSite ( t, n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^checkNameUsage ( t, n, parent ) ;callback.visitCallSite ( t, n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fs != null )  {     callback.visitCallSite ( t, n, parent, fs ) ; }^373^^^^^358^388^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = functionMap.get ( fnName ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = name.get ( functionMap ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fs == null )  {     fs = new FunctionState (  ) ;     fns.put ( fnName, fs ) ; }^370^^^^^355^385^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( child ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, safeFnNode, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, var, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, fs, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, fnNode, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( n, t, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^callback .visitCallSite ( t , externs , nameNode , fs )  ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^name = child .getParent (  )  ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node child = safeFnNode.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node child = n.getAncestor (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node child = root.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = node.getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node gramps = n.getAncestor ( 2 ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P1_Replace_Type]^char name = null;^352^^^^^337^367^String name = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;String name = null;^352^^^^^337^367^String name = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = null;String name = null;^352^^^^^337^367^String name = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnIdentifingNode = safeFnNode .getString (  )  ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^switch  ( fnNode.getType (  )  )  {^348^^^^^333^363^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^switch  ( n.getAncestor (  )  )  {^348^^^^^333^363^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^348^^^^^333^363^switch  ( n.getType (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node child = parent.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node child = n .getString (  )  ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node child = var.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^351^352^^^^336^366^Node child = n.getFirstChild (  ) ; String name = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^return var.getFirstChild (  ) .getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^} else if  ( var.getType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, parent, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^super.visit (  n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super.visit ( t,  parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^super.visit ( t, n ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^super .FindCandidateFunctions (  )  ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findNamedFunctions ( t, n, parent ) ;super.visit ( t, n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^checkNameUsage ( t, n, parent ) ;super.visit ( t, n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^callback.visitCallSite ( t, n, parent, fs ) ;super.visit ( t, n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( fnNode.getType (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.2 )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( n.getAncestor (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^checkNameUsage(t, n, parent);^398^399^400^^^396^401^if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^398^399^400^^^396^401^if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     name = anonFunctionMap.get ( fnIdentifingNode ) ; }^398^^^^^396^401^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^398^^^^^396^401^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^398^^^^^396^401^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( NAME )  )  {     String name = child.getString (  ) ;     changed.add ( name ) ; }^398^^^^^396^401^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     fnNode = fnIdentifingNode; }^398^^^^^396^401^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( t, var, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( t, n, fnNode ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage (  n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( t,  parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( t, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( parent, n, t ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( n, t, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^checkNameUsage ( t, parent, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^checkNameUsage ( t, parent, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findNamedFunctions ( t, n, parent ) ;checkNameUsage ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^super.visit ( t, n, parent ) ;checkNameUsage ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^callback.visitCallSite ( t, n, parent, fs ) ;checkNameUsage ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( safeFnNode.getType (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^visit ( t, n, fnNode ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^maybeAddReference ( t, fs, root, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^maybeAddReference (  fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^maybeAddReference ( t,  callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^maybeAddReference ( t, fs,  t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^maybeAddReference ( fs, t, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^maybeAddReference ( t, callNode, fs, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^visitCallSite ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^maybeAddReference ( t, fs, n, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^maybeAddFunction ( fn, t.getModule (  )  ) ;maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^maybeAddReference ( t, fs, callNode, t .getCompiler (  )   ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( !fs.setInline (  )  )  {^410^^^^^408^433^if  ( !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( !fs .setInline ( blockFunctionInliningEnabled )   )  {^410^^^^^408^433^if  ( !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^410^^^^^408^433^if  ( !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^410^411^412^^^408^433^if  ( !fs.canInline (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^410^411^412^^^408^433^if  ( !fs.canInline (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^410^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fns.isEmpty (  )  )  {     return ; }^410^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^410^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^410^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^boolean referenceAdded = true;^414^^^^^408^433^boolean referenceAdded = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( !referenceAdded )  { boolean referenceAdded = false; }^414^^^^^408^433^boolean referenceAdded = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^InliningMode mode  =  InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^InliningMode mode  =  InliningMode.DIRECT ;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^InliningMode mode = fs.inlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.this : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^InliningMode mode = fs .inlineDirectly ( inlineLocalFunctions )  ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, nameNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( module, fs, callNode, t, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, n, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, parent, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( !referenceAdded || mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( !referenceAdded && mode != InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !inlineLocalFunctions && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !referenceAdded && mode == InliningMode.DIRECT && referenceAdded )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !referenceAdded && blockFunctionInliningEnabled == InliningMode.DIRECT && mode )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( !referenceAdded ) {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( (!referenceAdded && mode == DIRECT) )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( mode == DIRECT )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^mode  =  mode ;^423^^^^^408^433^mode = InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( r.mode == InliningMode.BLOCK )  { mode = InliningMode.BLOCK; }^423^^^^^408^433^mode = InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, var, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, module, callNode, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, safeFnNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, n, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^mode  = null ;^423^^^^^408^433^mode = InliningMode.BLOCK;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, root, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, nameNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !inlineGlobalFunctions )  {^428^^^^^408^433^if  ( !referenceAdded )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( !inlineLocalFunctions )  {^428^^^^^408^433^if  ( !referenceAdded )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !ref.inlined )  {^428^^^^^408^433^if  ( !referenceAdded )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( references == null )  {^428^^^^^408^433^if  ( !referenceAdded )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^fs.setRemove(false);^428^429^^431^432^408^433^if  ( !referenceAdded )  {  fs.setRemove ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^428^429^^431^432^408^433^if  ( !referenceAdded )  {  fs.setRemove ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^428^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( blockFunctionInliningEnabled )  )  {     fs.setInline ( false ) ; }^428^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( mimimizeCost ( fsCalled )  )  )  {     fsCalled.setInline ( false ) ; }^428^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( !lowersCost )  {     i.remove (  ) ; }^428^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( isCandidateFunction ( fn )  )  )  {     fs.setInline ( false ) ; }^428^^^^^408^433^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^fs .canRemove (  )  ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^i.remove (  ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, n, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction (  callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t,  fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) ,  fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( callNode, t, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, fs, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, mode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , callNode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = t.canInlineReferenceToFunction ( injector, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.inliningLowersCost ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.setInline (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs .setFn ( fn )  .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.setInline (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.setReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs .setReferencesThis ( inlineDirectly )   ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, nameNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( mode, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , t, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = callNode.canInlineReferenceToFunction ( t, injector, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = fs.canInlineReferenceToFunction ( t, callNode, injector.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^CanInlineResult result = mode.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , injector, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector .inliningLowersCost ( fs )  , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs .setReferencesThis ( inlineGlobalFunctions )   ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t, callNode, fs.setInline (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t, callNode, fs .setFn ( fn )  .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^fs.setInline (  ) , mode, fs.getReferencesThis (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^fs.getNamesToAlias (  ) , mode, fs.setReferencesThis (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( result < CanInlineResult.NO )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( result == AFTER_DECOMPOSITION )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( result = CanInlineResult.NO )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^return false;^446^^^^^435^450^return true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P4_Replace_Constructor]^fs.addReference ( new Reference (  module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode,  mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode, module,  decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode, module, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( var, module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, module, mode, referencesThis )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( decompose, module, mode, callNode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( module, callNode, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( mode, module, callNode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^fs.addReference ( new Reference ( n, module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^boolean decompose = ( result != CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, module, mode, inlined )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, decompose, mode, module )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, module, decompose, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^445^446^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ; return true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, module, mode, inlineLocalFunctions )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( parent, module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, mode, module, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^return true;^449^^^^^435^450^return false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^Preconditions.checkState ( n.getType (  )  >= Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Preconditions.checkState ( var.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( n.getAncestor (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^|| parent.getType (  )  == Token.LABEL ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( child.getType (  )  == Token.NAME )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Preconditions.checkState ( safeFnNode.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getString (  )   == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Preconditions.checkState ( nameNode.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.VAR ) {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == VAR )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.VAR || parent^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.VAR ) {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^458^459^^461^462^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^458^459^^461^462^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^458^^^^^443^473^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( NAME )  )  {     name = fnIdentifingNode.getString (  ) ; }else     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         name = anonFunctionMap.get ( fnIdentifingNode ) ;     }^458^^^^^443^473^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^458^^^^^443^473^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  (  ( nameNode.getType (  )  )  ==  ( NAME )  )  &&  ( nameNode.hasChildren (  )  )  )  &&  (  ( nameNode.getFirstChild (  ) .getType (  )  )  ==  ( FUNCTION )  )  )  {     maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^458^^^^^443^473^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^458^^^^^443^473^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.CALL || parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  >= n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == var )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && parent.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.CALL ) {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CALL )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.CALL && parent.getAncestor (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  (  parent.getFirstChild (  )  == var )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^464^465^466^467^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^464^465^466^467^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {  return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {     name = anonFunctionMap.get ( fnIdentifingNode ) ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( NAME )  )  {     String name = child.getString (  ) ;     changed.add ( name ) ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^464^^^^^449^479^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) || n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) && n >= parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) && n < parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) && n != parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "aall" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( NodeUtil.isGet ( n ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( NodeUtil.isGet ( parent ) && var == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( NodeUtil.isGet ( parent ) ) {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( isGet(parent) && (n == parent.getFirstChild()) && getType() == STRING) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( isGet(parent && n == parent.getFirstChild()) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( n.getNext (  ) .getType (  )  == STRING )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType() == CALL && gramps.getFirstChild() == parent )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getFirstChild (  )  == parent )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isStatement ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getAncestor (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .isExported (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getAncestor (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .isExported (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getAncestor (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  )  .getString (  )   == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  != Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  != parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == safeFnNode )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps.getAncestor (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps .getString (  )   == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps.getAncestor (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^482^483^^485^486^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^482^483^^485^486^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^482^^^^^477^487^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^482^^^^^477^487^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^482^^^^^477^487^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( NAME )  )  {     String name = child.getString (  ) ;     changed.add ( name ) ; }^482^^^^^477^487^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^482^^^^^477^487^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -1 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node gramps = nameNode.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node gramps = n .getNext (  )  ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node gramps = safeFnNode.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -3 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node gramps = var.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node gramps = gramps .getNext (  )  ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( nameNode.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& n.getFirstChild (  )  == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& gramps.getAncestor (  )  == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& safeFnNode.getAncestor (  )  == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^483^484^485^^^477^487^&& gramps.getFirstChild (  )  == parent )  {  return;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  > Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  <= parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps.getAncestor (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps .getString (  )   == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps.getAncestor (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.CALL ) {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^482^483^^485^486^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^482^483^^485^486^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^482^^^^^467^497^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^482^^^^^467^497^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^482^^^^^467^497^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( NAME )  )  {     String name = child.getString (  ) ;     changed.add ( name ) ; }^482^^^^^467^497^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^482^^^^^467^497^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -5 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node gramps = safeFnNode.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node gramps = n .getNext (  )  ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node gramps = n.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( NodeUtil.isGet ( var ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^477^^^^^462^492^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& n == gramps.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^478^479^480^^^463^493^&& n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n == parent.getAncestor (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^478^479^480^^^463^493^&& n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& n == n.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^478^479^480^^^463^493^&& n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n.getNext (  ) .isExported (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n.getNext (  )  .getString (  )   == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n.getAncestor (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& gramps.getNext (  )  .getString (  )   == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^479^480^481^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  { Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& gramps.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& var.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^&& n.getNext (  ) .getString (  ) .equals ( "c" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& gramps.getNext (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n.getNext (  ) .isExported (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n.getAncestor (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& n .getParent (  )  .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^480^481^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  { Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& safeFnNode.getNext (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& var.getNext (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& nameNode.getNext (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& gramps.getAncestor (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -3 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node gramps = var.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( nameNode .getString (  )   == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^&& n.getFirstChild (  )  == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& gramps.getAncestor (  )  == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^&& gramps .getString (  )   == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^&& nameNode.getAncestor (  )  == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^483^484^485^^^468^498^&& gramps.getFirstChild (  )  == parent )  {  return;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P1_Replace_Type]^char name = n.getchar (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^String rootame = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^String name = n.getAncestor (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^String nameNodeame = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^String grampsame = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = fnIdentifingNode.getString (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;String name = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = fns.get ( fnName ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = this.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = name.get ( fns ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fs = fns.get ( name ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( fs != null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( fs == true )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fnNode != null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( references == null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( name != null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( ref != null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^return ;^492^493^494^^^477^507^if  ( fs == null )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^492^493^494^^^477^507^if  ( fs == null )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fns.isEmpty (  )  )  {     return ; }^492^^^^^477^507^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^492^^^^^477^507^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^492^^^^^477^507^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  != n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == safeFnNode )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.ASSIGN ) {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getAncestor (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent .getString (  )   == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( gramps.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( child.getType (  )  )  ==  ( NAME )  )  {     String name = child.getString (  ) ;     changed.add ( name ) ; }^497^^^^^482^512^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^fs .canRemove (  )  ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^i.remove (  ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^fs.setInline ( true ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( inline == false )  { fs.setInline ( false ) ; }^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^fs .canInline (  )  ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^fs .canRemove (  )  ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^i.remove (  ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkArgument ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Preconditions.checkState ( fs.setInline (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P12_Insert_Condition]^if  ( fs.hasExistingFunctionDefinition (  )  )  { Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ; }^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( n.hasOneChild (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fs.canInline (  )  )  {     for  ( Reference ref : fs.getReferences (  )  )  {         if  ( ref.requiresDecomposition )  {             decomposer.maybeDecomposeExpression ( ref.callNode ) ;         }     } }^524^^^^^521^537^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( name != null )  {     FunctionState fs = functionMap.get ( name ) ;     if  ( fs != null )  {         callback.visitCallSite ( t, n, parent, fs ) ;     } }^524^^^^^521^537^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( ref == null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( ref != false )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fnNode != null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs == null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( references == null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs != null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( name != null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^inlineFunction(t, callNode, fs, ref.mode); ref.inlined = true;^530^531^^^534^521^537^if  ( ref != null )  { inlineFunction ( t, callNode, fs, ref.mode ) ; ref.inlined = true; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^530^531^^^534^521^537^if  ( ref != null )  { inlineFunction ( t, callNode, fs, ref.mode ) ; ref.inlined = true; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^ref.inlined = false;^534^^^^^521^537^ref.inlined = true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^this.inline = inline;ref.inlined = true;^534^^^^^521^537^ref.inlined = true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^inlineFunction (  callNode, fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^inlineFunction ( t,  fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^inlineFunction ( t, callNode,  ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^inlineFunction ( t, callNode, fs.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^inlineFunction ( t, callNode, fs ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^visitCallSite ( t, callNode, fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Reference ref = callNode.getReference ( fs ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Reference ref = fs .getReferences (  )  ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( referencesThis ( block )  )  {     fs.setReferencesThis ( true ) ; }^525^^^^^521^537^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Reference ref = fs.getReference ( var ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Reference  ref  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Function fn = fs.setInline (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Function fn = fs .setFn ( fn )  ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = new NamedFunction ( n ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^544^545^^^^542^551^Function fn = fs.getFn (  ) ; String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P1_Replace_Type]^char fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^String fnName = fn .getFunctionNode (  )  ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = child.getString (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^anonFns.put ( fnNode, fn.getName (  )  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnNode = fs.setInline (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnNode = fs .setSafeFnNode ( root )  ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node gramps = n.getAncestor ( 2 ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node fnNode = fs .setSafeFnNode ( externs )  ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, safeFnNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, name, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, parent, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline (  callNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t,  fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode,  fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName,  mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( mode, callNode, fnName, fnNode, t ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, fnNode, fnName, callNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = fnName.inline ( t, callNode, injector, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = mode.inline ( t, callNode, fnName, fnNode, injector ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Node newCode = injector .inliningLowersCost ( fs )  ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node newCode = injector.inline ( t, callNode, fnName, n, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, n, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, var, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( fnNode, callNode, fnName, t, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnNode, fnName, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = callNode.inline ( t, injector, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Node newCode = injector.inline ( t, var, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  ) .isExported (  ) ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  )  .isExported ( fnName )  ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^t .getModule (  )  .reportCodeChange (  ) ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^549^550^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ; t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^compiler.reportCodeChange (  ) ;t.getCompiler (  ) .reportCodeChange (  ) ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^t.getCompiler (  ) .addToDebugLog ( "Inlined function: "   instanceof   fn.getName (  )  ) ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P3_Replace_Literal]^t.getCompiler (  ) .addToDebugLog ( "Inlined function: d fun" + fn.getName (  )  ) ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  )  .reportCodeChange (  )  ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn .getFunctionNode (  )   ) ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Set  fnNames  namesToAlias  NodeTraversal  t  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  InliningMode  mode  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Iterator<Entry<Node, Reference>> i;Iterator<Entry<String, FunctionState>> i;^559^^^^^558^566^Iterator<Entry<String, FunctionState>> i;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( !fs.hasExistingFunctionDefinition (  )  && !fs.canInline (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  ( !fs.hasExistingFunctionDefinition (  )  ) {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^if  (  !fs.canInline (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( !fs.setInline (  )  || !fs.canInline (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.setInline (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( !fs .FunctionState (  )   || !fs.canInline (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.hasExistingFunctionDefinition (  )  )  {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^i.remove();^562^563^564^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^562^563^564^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^i .next (  )  ;^563^^^^^558^566^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^563^^^^^558^566^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;i.remove (  ) ;^563^^^^^558^566^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;i.remove (  ) ;^563^^^^^558^566^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^for  ( i = null.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^for  ( fns = i.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.entrySet (  ) .isEmpty (  ) ; i.hasNext (  ) ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.keySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( !fs.setInline (  )  ) {^562^^^^^558^566^if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^FunctionState fs = i .hasNext (  )  .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^FunctionState fs = this.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^561^^^^^558^566^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^for  ( i  =  for  ( i ;^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^560^561^562^563^564^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  { FunctionState fs = i.next (  ) .getValue (  ) ; if  ( !fs.hasExistingFunctionDefinition (  )  || !fs.canInline (  )  )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.entrySet (  ) .iterator (  ) ; i .next (  )  ; )  {^560^^^^^558^566^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesNotMeetingMinimumRequirements [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Iterator<Entry<Node, Reference>> i;Iterator<Entry<String, FunctionState>> i;^572^^^^^571^588^Iterator<Entry<String, FunctionState>> i;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs.setReferencesThis (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( n.hasOneChild (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.hasBlockInliningReferences (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P6_Replace_Expression]^} else {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs.setRemove (  )  )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs .setRemove ( referencesThis )   )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^}  if  ( !fs.setRemove (  )  )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^i.remove();^582^583^^585^586^571^588^} else if  ( !fs.canRemove (  )  )  {  i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^582^583^^585^586^571^588^} else if  ( !fs.canRemove (  )  )  {  i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fns.isEmpty (  )  )  {     return ; }^582^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^582^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( !lowersCost )  {     i.remove (  ) ; }^582^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^582^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( !referenceAdded )  {     fs.setRemove ( false ) ; }^582^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^i .next (  )  ;^585^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^585^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;i.remove (  ) ;^585^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;i.remove (  ) ;^585^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs .setRemove ( inlineGlobalFunctions )   )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !remove )  {^578^^^^^571^588^if  ( !lowersCost )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( lowersCost )  {^578^^^^^571^588^if  ( !lowersCost )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^i.remove();^578^579^580^581^^571^588^if  ( !lowersCost )  {  i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^578^579^580^581^^571^588^if  ( !lowersCost )  {  i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^578^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( !referenceAdded )  {     fs.setRemove ( false ) ; }^578^^^^^571^588^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^i .next (  )  ;^580^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^580^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;i.remove (  ) ;^580^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;i.remove (  ) ;^580^^^^^571^588^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^boolean lowersCost = inliningLowersCost ( fs ) ;^577^^^^^571^588^boolean lowersCost = mimimizeCost ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^577^^^^^571^588^boolean lowersCost = mimimizeCost ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !inlineLocalFunctions )  {^578^^^^^571^588^if  ( !lowersCost )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs .setRemove ( referenceAdded )   )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.entrySet (  ) .isEmpty (  ) ; i.hasNext (  ) ; )  {^573^^^^^571^588^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.keySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^573^^^^^571^588^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = fns.entrySet (  ) .iterator (  ) ; i .next (  )  ; )  {^573^^^^^571^588^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs .getReferences (  )   )  {^575^^^^^571^588^if  ( fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs .setRemove ( inlineAnonymousFunctionExpressions )   )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( !referencesThis )  {^578^^^^^571^588^if  ( !lowersCost )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( !inlined )  {^578^^^^^571^588^if  ( !lowersCost )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^} else if  ( !fs .setRemove ( decompose )   )  {^582^^^^^571^588^} else if  ( !fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^FunctionState fs = this.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fs = i.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^FunctionState fs = i .hasNext (  )  .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^FunctionState fs = 2.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^for  ( i  =  for  ( i ;^573^^^^^571^588^for  ( i = fns.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^FunctionState fs = 4.next (  ) .getValue (  ) ;^574^^^^^571^588^FunctionState fs = i.next (  ) .getValue (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] trimCanidatesUsingOnCost [RETURN_TYPE] void   [VARIABLES] Set  fnNames  namesToAlias  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( !mimimizeCost ( fs )  )  {^596^^^^^595^609^if  ( !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs.hasBlockInliningReferences (  )  )  {     fs.setRemove ( false ) ;     fs.removeBlockInliningReferences (  ) ;     if  (  ( ! ( fs.hasReferences (  )  )  )  ||  ( ! ( inliningLowersCost ( fs )  )  )  )  {         return false;     } }else {     return false; }^596^^^^^595^609^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^598^^^^^595^609^if  ( fs.hasBlockInliningReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^598^^^^^595^609^if  ( fs.hasBlockInliningReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^598^^^^^595^609^if  ( fs.hasBlockInliningReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fs.setRemove(false); fs.removeBlockInliningReferences(); if ((!(fs.hasReferences())) || (!(inliningLowersCost(fs)))) {    return false;};^598^599^600^601^602^595^609^if  ( fs.hasBlockInliningReferences (  )  )  { fs.setRemove ( false ) ; fs.removeBlockInliningReferences (  ) ; if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^598^599^600^601^602^595^609^if  ( fs.hasBlockInliningReferences (  )  )  { fs.setRemove ( false ) ; fs.removeBlockInliningReferences (  ) ; if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return true;^605^^^^^595^609^return false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( !fs.hasReferences (  )  && !inliningLowersCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( !fs.hasReferences (  )  ) {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (  !inliningLowersCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !fs.setReferencesThis (  )  || !inliningLowersCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !fs.hasReferences (  )  || !mimimizeCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return false;^601^602^603^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^601^602^603^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  { return false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.hasReferences (  )  )  )  {     return ; }^601^^^^^595^609^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return true;^602^^^^^595^609^return false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .canRemove (  )  ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^i.remove (  ) ;fs.setRemove ( false ) ;^599^^^^^595^609^fs.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setInline (  ) ;^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;fs.removeBlockInliningReferences (  ) ;^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^removeInlinedFunctions (  ) ;fs.removeBlockInliningReferences (  ) ;^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fs.hasBlockInliningReferences (  )  )  { fs.removeBlockInliningReferences (  ) ; }^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !fs .getReferences (  )   || !inliningLowersCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fs .removeBlockInliningReferences (  )   )  {^598^^^^^595^609^if  ( fs.hasBlockInliningReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs .hasBlockInliningReferences (  )  ;^600^^^^^595^609^fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  (  !mimimizeCost ( fs )  )  {^601^^^^^595^609^if  ( !fs.hasReferences (  )  || !inliningLowersCost ( fs )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^599^600^^^^595^609^fs.setRemove ( false ) ; fs.removeBlockInliningReferences (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return false;^608^^^^^595^609^return true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] mimimizeCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return injector.inliningLowersCost ( fs.getModule (  ) .getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return fs.inliningLowersCost ( injector.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector .inliningLowersCost ( fs )  .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs.setRemove (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs .getCompiler (  )  , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs.getModule (  ) , fs.setInline (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.setReferencesThis (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs .getReference ( nameNode )  ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  )  .getName (  )  , fs.getReferences (  ) ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs .getReference ( block )  ,^615^616^617^618^^614^622^return injector.inliningLowersCost ( fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setRemove (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) , fs.getNamesToAlias (  ) ,^616^617^618^619^^614^622^fs.getModule (  ) , fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) , fs.getNamesToAlias (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setInline (  ) .getFunctionNode (  ) , fs.getReferences (  ) , fs.getNamesToAlias (  ) , fs.canRemove (  ) ,^617^618^619^620^^614^622^fs.getFn (  ) .getFunctionNode (  ) , fs.getReferences (  ) , fs.getNamesToAlias (  ) , fs.canRemove (  ) ,^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setReferencesThis (  ) , fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^618^619^620^621^^614^622^fs.getReferences (  ) , fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .getReference ( var )  , fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs^618^619^620^621^^614^622^fs.getReferences (  ) , fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setInline (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^619^620^621^^^614^622^fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^619^620^621^^^614^622^fs.getNamesToAlias (  ) , fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setRemove (  ) , fs.getReferencesThis (  )  ) ;^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setReferencesThis ( true ) ;fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.getReferencesThis (  )  ) ;fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.removeBlockInliningReferences (  ) ;fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^620^621^^^^614^622^fs.canRemove (  ) , fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setReferencesThis (  )  ) ;^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .setReferencesThis ( inlineLocalFunctions )   ) ;^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fs.hasReferences (  )  )  { fs.getReferencesThis (  )  ) ; }^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( !fs.hasReferences (  )  )  { fs.getReferencesThis (  )  ) ; }^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( NodeUtil.referencesThis ( block )  )  { fs.getReferencesThis (  )  ) ; }^621^^^^^614^622^fs.getReferencesThis (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inliningLowersCost [RETURN_TYPE] boolean   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( FunctionState fs : fns.keySet (  )  )  {^642^^^^^641^645^for  ( FunctionState fs : fns.values (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^642^643^644^^^641^645^for  ( FunctionState fs : fns.values (  )  )  { resolveInlineConflictsForFunction ( fs ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^inliningLowersCost ( fs ) ;^643^^^^^641^645^resolveInlineConflictsForFunction ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^643^^^^^641^645^resolveInlineConflictsForFunction ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^removeInlinedFunctions (  ) ;resolveInlineConflictsForFunction ( fs ) ;^643^^^^^641^645^resolveInlineConflictsForFunction ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^resolveInlineConflicts (  ) ;resolveInlineConflictsForFunction ( fs ) ;^643^^^^^641^645^resolveInlineConflictsForFunction ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflicts [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !fs.setReferencesThis (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !fs .getReferences (  )   )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.hasBlockInliningReferences (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs.canInline (  )  )  {^652^^^^^650^676^if  ( !fs.hasReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return ;^652^653^654^^^650^676^if  ( !fs.hasReferences (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^652^653^654^^^650^676^if  ( !fs.hasReferences (  )  )  { return; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canRemove (  )  )  )  {     i.remove (  ) ; }^652^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fns.isEmpty (  )  )  {     return ; }^652^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^652^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( ! ( fs.hasReferences (  )  )  )  ||  ( ! ( inliningLowersCost ( fs )  )  )  )  {     return false; }^652^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^652^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node fnNode = fsCalled.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnNode = fs.setInline (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node fnNode = fs .setFn ( fn )  .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^656^^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^656^657^^^^650^676^Node fnNode = fs.getFn (  ) .getFunctionNode (  ) ; Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Set<String> names = findCalledFunctions ( n ) ;^657^^^^^650^676^Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Set<String> names = isCandidateFunction ( fnNode ) ;^657^^^^^650^676^Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Set<String> names = isCandidateFunction ( n ) ;^657^^^^^650^676^Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Set<String> names = findCalledFunctions ( safeFnNode ) ;^657^^^^^650^676^Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^657^^^^^650^676^Set<String> names = findCalledFunctions ( fnNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( fsCalled != null )  {^658^^^^^650^676^if  ( !names.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !names.add (  )  )  {^658^^^^^650^676^if  ( !names.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !namesToAlias.isEmpty (  )  )  {^658^^^^^650^676^if  ( !names.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !name.isEmpty (  )  )  {^658^^^^^650^676^if  ( !names.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^658^^^^^650^676^if  ( !names.isEmpty (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fsCalled != null || fsCalled.canRemove (  )  )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( fsCalled == null && fsCalled.canRemove (  )  )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( fs != null && fsCalled.canRemove (  )  )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( fsCalled != null ) {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  (  fsCalled.canRemove (  )  )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fsCalled != null && fsCalled.setRemove (  )  )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fsCalled != null && fsCalled .setRemove ( requiresDecomposition )   )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !mimimizeCost ( fs )  )  {^666^^^^^650^676^if  ( !mimimizeCost ( fsCalled )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( !inliningLowersCost ( fsCalled )  )  {^666^^^^^650^676^if  ( !mimimizeCost ( fsCalled )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( !inliningLowersCost ( fs )  )  {^666^^^^^650^676^if  ( !mimimizeCost ( fsCalled )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^fsCalled.setInline(false);^666^667^668^669^^650^676^if  ( !mimimizeCost ( fsCalled )  )  {  fsCalled.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^666^667^668^669^^650^676^if  ( !mimimizeCost ( fsCalled )  )  {  fsCalled.setInline ( false ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( blockFunctionInliningEnabled )  )  {     fs.setInline ( false ) ; }^666^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( !referenceAdded )  {     fs.setRemove ( false ) ; }^666^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isCandidateFunction ( fn )  )  )  {     fs.setInline ( false ) ; }^666^^^^^650^676^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fsCalled.setInline ( true ) ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fsCalled.setInline ( false ) ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setRemove ( false ) ;fsCalled.setInline ( false ) ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fsCalled.setInline ( false ) ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fsCalled.setInline ( false ) ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^fsCalled.setRemove ( true ) ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fsCalled .canRemove (  )  ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.inlineDirectly ( false ) ;fsCalled.setRemove ( false ) ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fsCalled.setInline ( false ) ;fsCalled.setRemove ( false ) ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fsCalled.setRemove ( false ) ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fsCalled.setRemove ( false ) ;^663^^^^^650^676^fsCalled.setRemove ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fsCalled .canInline (  )  ;^668^^^^^650^676^fsCalled.setInline ( false ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^for  ( char name : names )  {^660^^^^^650^676^for  ( String name : names )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionState fsCalled = fns.get ( fnName ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^FunctionState fsCalled = name.get ( fns ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = getOrCreateFunctionState ( name ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;FunctionState fsCalled = fns.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^fs.setSafeFnNode ( fsCalled.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs .getSafeFnNode (  )  .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .getAncestor (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  )  .hasOneChild (  )   ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setSafeFnNode ( fs.setInline (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setSafeFnNode ( fs.getFn (  )  .getName (  )  .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^fs.setSafeFnNode ( fs .setFn ( fn )  .getFunctionNode (  ) .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs.setSafeFnNode ( fsCalled.setInline (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fs.setSafeFnNode ( fsCalled .setFn ( fn )  .getFunctionNode (  ) .cloneTree (  )  ) ;^674^^^^^650^676^fs.setSafeFnNode ( fs.getFn (  ) .getFunctionNode (  ) .cloneTree (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( fsCalled != null && fsCalled .setRemove ( inlineDirectly )   )  {^662^^^^^650^676^if  ( fsCalled != null && fsCalled.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^FunctionState fsCalled = 1.get ( name ) ;^661^^^^^650^676^FunctionState fsCalled = fns.get ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] resolveInlineConflictsForFunction [RETURN_TYPE] void   FunctionState fs [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  parent  root  safeFnNode  var  FunctionState  fs  fsCalled  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Set<String> changed = Sets.newHashSet (  ) ;^682^^^^^681^685^Set<String> changed = Sets.newHashSet (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Set<String> fnNames = Sets.newHashSet ( fns.keySet (  )  ) ;Set<String> changed = Sets.newHashSet (  ) ;^682^^^^^681^685^Set<String> changed = Sets.newHashSet (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^682^683^^^^681^685^Set<String> changed = Sets.newHashSet (  ) ; findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^references = Maps.newHashMap (  ) ;Set<String> changed = Sets.newHashSet (  ) ;^682^^^^^681^685^Set<String> changed = Sets.newHashSet (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( node, 2 ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions (  changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( node ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( changed, node ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( node, changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^findCalledFunctions ( var, changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^683^684^^^^681^685^findCalledFunctions ( node, changed ) ; return changed;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findCalledFunctions ( c, changed ) ;findCalledFunctions ( node, changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findNamedFunctions ( t, n, parent ) ;findCalledFunctions ( node, changed ) ;^683^^^^^681^685^findCalledFunctions ( node, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] Set   Node node [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^Preconditions.checkArgument ( changed == null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkArgument ( null != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkArgument ( changed != null ) ;^692^^^^^690^705^Preconditions.checkArgument ( changed != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( nameNode.getType (  )  == Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^if  ( child.getType() == NAME )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( node.getAncestor (  )  == Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( parent.getAncestor (  )  == Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.NAME )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node child = node.getFirstChild(); if ((child.getType()) == (com.google.javascript.rhino.Token.NAME)) {    java.lang.String name = child.getString();    changed.add(name);};^694^695^696^697^698^690^705^if  ( node.getType (  )  == Token.CALL )  { Node child = node.getFirstChild (  ) ; if  ( child.getType (  )  == Token.NAME )  { String name = child.getString (  ) ; changed.add ( name ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^694^695^696^697^698^690^705^if  ( node.getType (  )  == Token.CALL )  { Node child = node.getFirstChild (  ) ; if  ( child.getType (  )  == Token.NAME )  { String name = child.getString (  ) ; changed.add ( name ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( child.getType (  )  >= Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( child.getAncestor (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( var.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^java.lang.String name = child.getString(); changed.add(name);^696^697^698^699^^690^705^if  ( child.getType (  )  == Token.NAME )  { String name = child.getString (  ) ; changed.add ( name ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^696^697^698^699^^690^705^if  ( child.getType (  )  == Token.NAME )  { String name = child.getString (  ) ; changed.add ( name ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^696^^^^^690^705^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^696^^^^^690^705^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^696^^^^^690^705^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^696^^^^^690^705^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^char name = child.getchar (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^String name = n.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^String name = child.getAncestor (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = root.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^String name = child .getParent (  )  ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = newCode.getAncestor (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^return fn.getFirstChild (  ) .getString (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^name = fnIdentifingNode.getString (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^return var.getFirstChild (  ) .getString (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;String name = child.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^changed.add ( fnName ) ;^698^^^^^690^705^changed.add ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^changed .iterator (  )  ;^698^^^^^690^705^changed.add ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^698^^^^^690^705^changed.add ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node child = var.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node child = node.getAncestor (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node child = n.getAncestor (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fn.getFunctionNode (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node block = NodeUtil.getFunctionBody ( fnNode ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^String name = var.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = safeFnNode.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node child = gramps.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^return var.getFirstChild (  ) .getFirstChild (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;Node child = node.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( newCode.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = n.getAncestor (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^697^698^^^^690^705^String name = child.getString (  ) ; changed.add ( name ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^String name = newCode.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^Node child = nameNode.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Node child = node .getString (  )  ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Node child = n.getFirstChild (  ) ;^695^^^^^690^705^Node child = node.getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^String name = node.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^String name = nameNode.getString (  ) ;^697^^^^^690^705^String name = child.getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( gramps.getType (  )  == Token.CALL )  {^694^^^^^690^705^if  ( node.getType (  )  == Token.CALL )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.NAME )  {^696^^^^^690^705^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node c = nameNode.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node node = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Node c = node.getAncestor (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getAncestor (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^for  ( Node c = nameNode.getFirstChild (  ) ; c != null; c = c.getAncestor (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( n, changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions (  changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( c ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^findCalledFunctions ( changed, c ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^process ( c, changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^findCalledFunctions ( newCode, changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findCalledFunctions ( node, changed ) ;findCalledFunctions ( c, changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^findNamedFunctions ( t, n, parent ) ;findCalledFunctions ( c, changed ) ;^703^^^^^690^705^findCalledFunctions ( c, changed ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node var = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c .getParent (  )   )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^for  ( Node c =  node.getFirstChild (  ) ; null !^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Node c = node .getString (  )  ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^702^703^704^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { findCalledFunctions ( c, changed ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^for  ( Node nameNode = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^702^^^^^690^705^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] findCalledFunctions [RETURN_TYPE] void   Node node String> changed [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  )  ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer (  compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( fnNames, compiler.getUniqueNameIdSupplier (  ) , compiler ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getCodingConvention (  ) , fnNames ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , 3 ) ;^712^713^^^^711^724^ExpressionDecomposer decomposer = new ExpressionDecomposer ( compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^compiler, compiler.getCodingConvention (  ) , fnNames ) ;^713^^^^^711^724^compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^713^^^^^711^724^compiler, compiler.getUniqueNameIdSupplier (  ) , fnNames ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs.setInline (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( n.hasOneChild (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.canRemove (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fs.hasReferences (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( fns.isEmpty (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( !fs.hasReferences (  )  )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^for (com.google.javascript.jscomp.InlineFunctions.Reference ref : fs.getReferences()) {    if (ref.requiresDecomposition) {        decomposer.maybeDecomposeExpression(ref.callNode);    }};^716^717^718^719^720^711^724^if  ( fs.canInline (  )  )  { for  ( Reference ref : fs.getReferences (  )  )  { if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^716^717^718^719^720^711^724^if  ( fs.canInline (  )  )  { for  ( Reference ref : fs.getReferences (  )  )  { if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( fs.canInline (  )  )  {     Reference ref = fs.getReference ( callNode ) ;     if  ( ref != null )  {         inlineFunction ( t, callNode, fs, ref.mode ) ;         ref.inlined = true;     } }^716^^^^^711^724^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^decomposer.maybeDecomposeExpression(ref.callNode);^718^719^720^^^711^724^if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^718^719^720^^^711^724^if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^719^^^^^711^724^decomposer.maybeDecomposeExpression ( ref.callNode ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ref.requiresDecomposition )  {     decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^719^^^^^711^724^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( Reference ref : fs.setReferencesThis (  )  )  {^717^^^^^711^724^for  ( Reference ref : fs.getReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( Reference ref : fs .getReference ( n )   )  {^717^^^^^711^724^for  ( Reference ref : fs.getReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^717^718^719^720^^711^724^for  ( Reference ref : fs.getReferences (  )  )  { if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( FunctionState fs : fns.keySet (  )  )  {^715^^^^^711^724^for  ( FunctionState fs : fns.values (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^715^716^717^718^719^711^724^for  ( FunctionState fs : fns.values (  )  )  { if  ( fs.canInline (  )  )  { for  ( Reference ref : fs.getReferences (  )  )  { if  ( ref.requiresDecomposition )  { decomposer.maybeDecomposeExpression ( ref.callNode ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs .setInline ( decompose )   )  {^716^^^^^711^724^if  ( fs.canInline (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] decomposeExpressions [RETURN_TYPE] void   String> fnNames [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  ExpressionDecomposer  decomposer  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^if  ( fs.setRemove (  )  )  {^731^^^^^729^740^if  ( fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !fs.canInline (  )  )  {^731^^^^^729^740^if  ( fs.canRemove (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Function fn = fs.setInline (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Function fn = fs .setFn ( fn )  ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Function fn = new NamedFunction ( n ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fsCalled = fns.get ( name ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = i.next (  ) .getValue (  ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( fnName ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^FunctionState fs = fns.get ( name ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String name = fn.getName (  ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Function fn = fs.getFn (  ) ;^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( fs == null )  {     fs = new FunctionState (  ) ;     fns.put ( fnName, fs ) ; }^732^^^^^729^740^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^732^^^^^729^740^Function fn = fs.getFn (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkArgument ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkState ( fs.setInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkState ( fs .setInline ( enableExpressionDecomposition )   ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^733^734^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ; Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( changed != null ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkState ( fs.canInline (  )  ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^Preconditions.checkState ( fn == null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^734^735^^^^729^740^Preconditions.checkState ( fn != null ) ; verifyAllReferencesInlined ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( changed != null ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( this.fn == null ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( fn != null ) ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^inliningLowersCost ( fs ) ;^735^^^^^729^740^verifyAllReferencesInlined ( fs ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^735^736^737^738^^729^740^verifyAllReferencesInlined ( fs ) ; fn.remove (  ) ; compiler.reportCodeChange (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^fn .next (  )  ;^736^^^^^729^740^fn.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^736^737^^^^729^740^fn.remove (  ) ; compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setFn ( fn ) ;fn.remove (  ) ;^736^^^^^729^740^fn.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fn.remove (  ) ;^736^^^^^729^740^fn.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^fs.setModule ( module ) ;fn.remove (  ) ;^736^^^^^729^740^fn.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^i.remove (  ) ;fn.remove (  ) ;^736^^^^^729^740^fn.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^compiler.isNormalized (  ) ;^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^compiler .isExported ( name )  ;^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .reportCodeChange (  ) ;compiler.reportCodeChange (  ) ;^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( FunctionState fs : fns.keySet (  )  )  {^730^^^^^729^740^for  ( FunctionState fs : fns.values (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^732^733^^^^729^740^Function fn = fs.getFn (  ) ; Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkState ( fs .setInline ( lowersCost )   ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions.checkState ( fs .setInline ( inlineDirectly )   ) ;^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^733^^^^^729^740^Preconditions.checkState ( fs.canInline (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^734^^^^^729^740^Preconditions.checkState ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^compiler .isExported ( fnName )  ;^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^compiler .isExported ( fakeName )  ;^737^^^^^729^740^compiler.reportCodeChange (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeInlinedFunctions [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( !lowersCost )  {^748^^^^^746^752^if  ( !ref.inlined )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^if  ( !referenceAdded )  {^748^^^^^746^752^if  ( !ref.inlined )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Call site missed.");^748^749^750^^^746^752^if  ( !ref.inlined )  { throw new IllegalStateException  (" ")  ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^748^749^750^^^746^752^if  ( !ref.inlined )  { throw new IllegalStateException  (" ")  ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  ( ! ( ref.inlined )  )  {     throw new IllegalStateException ( "Call site missed." ) ; }^749^^^^^746^752^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( Reference ref : fs.setReferencesThis (  )  )  {^747^^^^^746^752^for  ( Reference ref : fs.getReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( Reference ref : fs .getReference ( c )   )  {^747^^^^^746^752^for  ( Reference ref : fs.getReferences (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^747^748^749^750^^746^752^for  ( Reference ref : fs.getReferences (  )  )  { if  ( !ref.inlined )  { throw new IllegalStateException  (" ")  ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] verifyAllReferencesInlined [RETURN_TYPE] void   FunctionState fs [VARIABLES] Set  changed  fnNames  names  namesToAlias  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  FunctionState  fs  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^return  ( fn == null ) ;^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return  ( fn ;^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fnNode != null )  { return  ( fn != null ) ; }^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fs == null )  { return  ( fn != null ) ; }^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( fs != null )  { return  ( fn != null ) ; }^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( ref != null )  { return  ( fn != null ) ; }^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.referencesThis = requiresDecomposition;^773^^^^^772^774^this.referencesThis = referencesThis;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setReferencesThis [RETURN_TYPE] void   boolean referencesThis [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return inlineLocalFunctions;^777^^^^^776^778^return this.referencesThis;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesThis [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Iterator<Entry<String, FunctionState>> i;Iterator<Entry<Node, Reference>> i;^781^^^^^780^788^Iterator<Entry<Node, Reference>> i;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( entry.getValue (  ) .mode <= InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P9_Replace_Statement]^if  ( r.mode == InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P15_Unwrap_Block]^i.remove();^784^785^786^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P16_Remove_Block]^^784^785^786^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P13_Insert_Block]^if  (  ( r.mode )  ==  ( BLOCK )  )  {     return true; }^784^^^^^780^788^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^785^^^^^780^788^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fn.remove (  ) ;i.remove (  ) ;^785^^^^^780^788^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;i.remove (  ) ;^785^^^^^780^788^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .entrySet (  ) .getFirstChild (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .keySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = getReferencesThis (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i .next (  )  ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( entry.getValue (  ) .mode > InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^i .next (  )  ;^785^^^^^780^788^i.remove (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^Entry<Node, Reference> entry = i .hasNext (  )  ;^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P5_Replace_Variable]^if  ( this.getValue (  ) .mode == InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^for  ( i  =  for  ( i ;^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .entrySet (  )  .isEmpty (  )  ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P14_Delete_Statement]^^782^783^784^785^786^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  { Entry<Node, Reference> entry = i.next (  ) ; if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P8_Replace_Mix]^Entry<Node, Reference> entry = 3.next (  ) ;^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Set  changed  fnNames  names  namesToAlias  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  String  fakeName  fnName  name  int  callsSeen  index  Function  fn  AbstractCompiler  compiler  Entry  entry  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  CallVisitorCallback  callback  Iterator  i  JSModule  module  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  
[P2_Replace_Operator]^if  ( r.mode <= InliningMode.BLOCK )  {^792^^^^^790^797^if  ( r.mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^792^^^^^790^797^if  ( r.mode == InliningMode.BLOCK )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return true;^792^793^794^^^790^797^if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^792^793^794^^^790^797^if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^792^^^^^790^797^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( entry.getValue (  ) .mode )  ==  ( BLOCK )  )  {     i.remove (  ) ; }^792^^^^^790^797^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return false;^793^^^^^790^797^return true;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Reference r : getReferencesInternal (  ) .keySet (  )  )  {^791^^^^^790^797^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^for  ( Reference r : getReferencesThis (  ) .values (  )  )  {^791^^^^^790^797^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^791^792^793^794^^790^797^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  { if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^return true;^796^^^^^790^797^return false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  r  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^Preconditions.checkState ( this.fn != null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^Preconditions.checkArgument ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^Preconditions .checkArgument (  )  ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^804^805^^^^803^806^Preconditions.checkState ( this.fn == null ) ; this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( compiler.isNormalized (  )  ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fn != null ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( changed != null ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( safeNameIdSupplier != null ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( compiler != null ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( fs.canInline (  )  ) ;Preconditions.checkState ( this.fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.fn =  null;^805^^^^^803^806^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.var = var;this.fn = fn;^805^^^^^803^806^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.functionMap = fns;this.fn = fn;^805^^^^^803^806^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.inline = inline;this.fn = fn;^805^^^^^803^806^this.fn = fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return  ( safeFnNode == null )  ? safeFnNode : fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return  ( n != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return  ( fn != null )  ? safeFnNode : safeFnNode.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^return  ( safeFnNode ! =  fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P6_Replace_Expression]^return  ( safeFnNode ! =  safeFnNode ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return  ( safeFnNode != null )  ? safeFnNode : fn.getName (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return  ( safeFnNode != this )  ? safeFnNode : fn.getName (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.safeFnNode = gramps;^813^^^^^812^814^this.safeFnNode = safeFnNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setSafeFnNode [RETURN_TYPE] void   Node safeFnNode [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.remove = remove;this.safeFnNode = safeFnNode;^813^^^^^812^814^this.safeFnNode = safeFnNode;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setSafeFnNode [RETURN_TYPE] void   Node safeFnNode [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return requiresDecomposition;^817^^^^^816^818^return inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.inline = inlined;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.inline =  requiresDecomposition;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.module = module;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.fn = fn;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^ref.inlined = true;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.injector = injector;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.remove = remove;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( inline != false )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^if  ( inline == true )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^if  ( remove == false )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnNode != null )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^references = null; remove = false;^822^823^824^^826^820^828^if  ( inline == false )  {  references = null; remove = false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^822^823^824^^826^820^828^if  ( inline == false )  {  references = null; remove = false; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^references = true;^824^^^^^820^828^references = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( references == null )  { references = null; }^824^^^^^820^828^references = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^remove = true;^826^^^^^820^828^remove = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.remove = remove;remove = false;^826^^^^^820^828^remove = false;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^references = false;^824^^^^^820^828^references = null;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return referenceAdded;^831^^^^^830^832^return remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] canRemove [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return inlineLocalFunctions;^831^^^^^830^832^return remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] canRemove [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.remove =  inlineLocalFunctions;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.module = module;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^remove = false;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.inline = inline;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.safeFnNode = safeFnNode;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return requiresDecomposition;^839^^^^^838^840^return inlineDirectly;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] canInlineDirectly [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^this.inlineDirectly = requiresDecomposition;^843^^^^^842^844^this.inlineDirectly = directReplacement;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineDirectly [RETURN_TYPE] void   boolean directReplacement [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.inlineDirectly =  inlined;^843^^^^^842^844^this.inlineDirectly = directReplacement;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] inlineDirectly [RETURN_TYPE] void   boolean directReplacement [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return  ( references != null || !references.isEmpty (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return  ( references == null && !references.isEmpty (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return  ( references != null && !references.keySet (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return  ( references != false && !references.keySet (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( references != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( references == this )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnNode != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs == null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !referenceAdded )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( ref != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( namesToAlias == null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return java.util.Collections.emptyMap();^851^852^853^^^850^855^if  ( references == null )  { return Collections.emptyMap (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^851^852^853^^^850^855^if  ( references == null )  { return Collections.emptyMap (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( references )  == null )  {     references = newHashMap (  ) ; }^851^^^^^850^855^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( namesToAlias )  == null )  {     return emptySet (  ) ; }^851^^^^^850^855^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return Collections.emptySet (  ) ;^852^^^^^850^855^return Collections.emptyMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^852^^^^^850^855^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^852^^^^^850^855^return Collections.emptyMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( references != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( references == this )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fnNode != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs == null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( !referenceAdded )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( fs != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( ref != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( namesToAlias == null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^references = com.google.common.collect.Maps.newHashMap();^858^859^860^^^857^862^if  ( references == null )  { references = Maps.newHashMap (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^858^859^860^^^857^862^if  ( references == null )  { references = Maps.newHashMap (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^858^^^^^857^862^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^references ;^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( references )  == null )  {     references = newHashMap (  ) ; }^859^^^^^857^862^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^Set<String> changed = Sets.newHashSet (  ) ;references = Maps.newHashMap (  ) ;^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^references  =  references ;^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^references.put ( ref.callNode ) ;^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^references.put (  ref ) ;^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Reference  ref  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return getReferencesInternal (  ) .keySet (  ) ;^865^^^^^864^866^return getReferencesInternal (  ) .values (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferences [RETURN_TYPE] Collection   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return getReferencesThis (  ) .values (  ) ;^865^^^^^864^866^return getReferencesInternal (  ) .values (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferences [RETURN_TYPE] Collection   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^865^^^^^864^866^return getReferencesInternal (  ) .values (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReferences [RETURN_TYPE] Collection   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return getReferencesInternal (  ) .get ( newCode ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return getReferencesInternal (  ) .put ( n ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return getReferencesThis (  ) .get ( n ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return getReferencesInternal (  ) .get ( gramps ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^if  ( namesToAlias != null )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^if  ( namesToAlias == true )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( references == null )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P9_Replace_Statement]^if  ( name != null )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P15_Unwrap_Block]^return java.util.Collections.emptySet();^873^874^875^^^872^877^if  ( namesToAlias == null )  { return Collections.emptySet (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P16_Remove_Block]^^873^874^875^^^872^877^if  ( namesToAlias == null )  { return Collections.emptySet (  ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^873^^^^^872^877^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return Collections.emptyMap (  ) ;^874^^^^^872^877^return Collections.emptySet (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P13_Insert_Block]^if  (  ( namesToAlias )  == null )  {     return emptySet (  ) ; }^874^^^^^872^877^[Delete]^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^874^^^^^872^877^return Collections.emptySet (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return Collections.emptySet ( namesToAlias ) ;^876^^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return Collections.unmodifiableSet ( null ) ;^876^^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^876^877^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ; }^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^namesToAlias =  null;^880^^^^^879^881^namesToAlias = names;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setNamesToAlias [RETURN_TYPE] void   String> names [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P12_Insert_Condition]^if  ( namesToAlias == null )  { namesToAlias = names; }^880^^^^^879^881^namesToAlias = names;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setNamesToAlias [RETURN_TYPE] void   String> names [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^this.module =  null;^884^^^^^883^885^this.module = module;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.module = module;^884^^^^^883^885^this.module = module;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.inline = inline;this.module = module;^884^^^^^883^885^this.module = module;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^this.remove = remove;this.module = module;^884^^^^^883^885^this.module = module;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return safeFnNode.getFirstChild (  ) .getString (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return fn.getFirstChild (  ) .getType (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return fn.getString (  ) .getString (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return fn.getFirstChild (  )  .getParent (  )  ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return newCode.getFirstChild (  ) .getString (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return var.getFirstChild (  ) .getType (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return parent.getFirstChild (  ) .getString (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return n;^917^^^^^916^918^return fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return newCode;^917^^^^^916^918^return fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeUtil.removeChild ( nameNode.getParent (  ) , fn ) ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^NodeUtil .referencesThis ( parent )  ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^NodeUtil.removeChild ( fn.getString (  ) , fn ) ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^NodeUtil .referencesThis ( node )  ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( var.getParent (  ) , var ) ;NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeUtil.removeChild ( n.getParent (  ) , fn ) ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return nameNode.getFirstChild (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return var.getFirstChild (  ) .getType (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return var.getFirstChild (  )  .getParent (  )  ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return var.getString (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return newCode.getFirstChild (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return gramps.getFirstChild (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return node.getFirstChild (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return gramps.getFirstChild (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return var.getString (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^return var .getString (  )^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return newCode.getFirstChild (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return n.getFirstChild (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^NodeUtil.removeChild ( parent.getParent (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P7_Replace_Invocation]^NodeUtil.removeChild ( var.getString (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^NodeUtil.removeChild ( gramps.getParent (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P14_Delete_Statement]^^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P11_Insert_Donor_Statement]^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;NodeUtil.removeChild ( var.getParent (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^NodeUtil.removeChild ( nameNode.getParent (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return name;^959^^^^^958^960^return fakeName;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P5_Replace_Variable]^return newCode;^963^^^^^962^964^return fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^return nameNode;^963^^^^^962^964^return fn;^[CLASS] InlineFunctions FindCandidateFunctions CallVisitor FindCandidatesReferences Inline FunctionState NamedFunction FunctionVar AnonymousFunction Reference  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P1_Replace_Type]^private  short  callsSeen = 0;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] FindCandidateFunctions  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P3_Replace_Literal]^private int callsSeen = index;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] FindCandidateFunctions  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P8_Replace_Mix]^private int callsSeen = 3;^150^^^^^145^155^private int callsSeen = 0;^[CLASS] FindCandidateFunctions  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Function  fn  AbstractCompiler  compiler  boolean  blockFunctionInliningEnabled  decompose  directReplacement  enableExpressionDecomposition  inline  inlineAnonymousFunctionExpressions  inlineDirectly  inlineGlobalFunctions  inlineLocalFunctions  inlined  lowersCost  referenceAdded  referencesThis  remove  requiresDecomposition  Set  changed  fnNames  names  namesToAlias  CallVisitorCallback  callback  Node  block  c  callNode  child  externs  fn  fnIdentifingNode  fnNode  gramps  n  nameNode  newCode  node  parent  root  safeFnNode  var  JSModule  module  String  fakeName  fnName  name  Map  anonFns  anonFunctionMap  fns  functionMap  references  FunctionInjector  injector  int  callsSeen  index  
[P2_Replace_Operator]^return inlineLocalFunctions && inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P2_Replace_Operator]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent != null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^return inlineLocalFunctions || parent || inlineAnonymousFunctionExpressions == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^return inlineAnonymousFunctionExpressions || inlineLocalFunctions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isFunctionObjectCall ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil .isFunctionObjectCall ( n )  || NodeUtil.isStatementBlock ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatement ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P8_Replace_Mix]^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatement ( parent ) ;^157^158^159^^^153^160^return inlineLocalFunctions || inlineAnonymousFunctionExpressions || parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^|| n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^|| parent == null || NodeUtil.isFunctionObjectCall ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P14_Delete_Statement]^^158^159^^^^153^160^|| parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^|| NodeUtil.isStatementBlock ( n ) ;^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^|| NodeUtil.isStatement ( parent ) ;^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P14_Delete_Statement]^^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P12_Insert_Condition]^if  ( !NodeUtil.isStatement ( n )  )  { || NodeUtil.isStatementBlock ( parent ) ; }^159^^^^^153^160^|| NodeUtil.isStatementBlock ( parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  int  callsSeen  Node  n  parent  
[P2_Replace_Operator]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) &&  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P2_Replace_Operator]^if  (  ( t.inGlobalScope (  )  || inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^if  (  ( inlineLocalFunctions.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && t )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^if  (  ( t.inGlobalScope (  )  && inlineLocalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineGlobalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P6_Replace_Expression]^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ) {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P6_Replace_Expression]^if  (   ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P6_Replace_Expression]^if  ( t.inGlobalScope( && inlineGlobalFunctions) )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P6_Replace_Expression]^if  ( !(t.inGlobalScope() && inlineLocalFunctions) )  {^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^if  (  ( t .getModule (  )   && inlineGlobalFunctions ) ||  ( !t^163^164^^^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P15_Unwrap_Block]^findNamedFunctions(t, n, parent);^163^164^165^166^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ; }^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P16_Remove_Block]^^163^164^165^166^^162^171^if  (  ( t.inGlobalScope (  )  && inlineGlobalFunctions ) ||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ; }^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( t, parent, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions (  n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( t,  parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( t, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( n, t, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( t, parent, n ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P14_Delete_Statement]^^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P7_Replace_Invocation]^||  ( !t .getModule (  )   && inlineLocalFunctions )  )  {^164^^^^^162^171^||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  {^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P14_Delete_Statement]^^164^165^^^^162^171^||  ( !t.inGlobalScope (  )  && inlineLocalFunctions )  )  { findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findNamedFunctions ( parent, n, t ) ;^165^^^^^162^171^findNamedFunctions ( t, n, parent ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P15_Unwrap_Block]^findAnonymousFunctionExpressions(t, n);^168^169^170^^^162^171^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P16_Remove_Block]^^168^169^170^^^162^171^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( t, parent ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findAnonymousFunctionExpressions (  n ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^findAnonymousFunctionExpressions ( n, t ) ;^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P14_Delete_Statement]^^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P12_Insert_Condition]^if  ( inlineAnonymousFunctionExpressions )  { findAnonymousFunctionExpressions ( t, n ) ; }^169^^^^^162^171^findAnonymousFunctionExpressions ( t, n ) ;^[CLASS] FindCandidateFunctions  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  int  callsSeen  Node  n  parent  
[P5_Replace_Variable]^if  ( !NodeUtil.isStatement ( parent )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^if  ( !NodeUtil.isStatementBlock ( n )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P15_Unwrap_Block]^return ;^174^175^176^177^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {  return; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P16_Remove_Block]^^174^175^176^177^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {  return; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P8_Replace_Mix]^if  ( !NodeUtil.isStatementBlock ( parent )  )  {^174^^^^^159^189^if  ( !NodeUtil.isStatement ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^174^^^^^159^189^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^if  ( parent.hasOneChild (  )  )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( (nameNode.getType() == NAME && nameNode.hasChildren()) )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == NAME )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( nameNode.getFirstChild (  ) .getType (  )  == FUNCTION )  {^185^^^^^170^200^if  ( n.hasOneChild (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  == Token.NAME || nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  != Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^if  ( parentameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.NAME && nameNodeameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == Token.NAME ) {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  (  nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( (nameNode.getType() == NAME && nameNode.hasChildren()) )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( nameNode.getType (  )  == NAME )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P6_Replace_Expression]^if  ( nameNode.getFirstChild (  ) .getType (  )  == FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^if  ( nameNode .getFirstChild (  )   == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  )^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode .hasOneChild (  )  .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P8_Replace_Mix]^if  ( parent .getFirstChild (  )   == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  )^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P15_Unwrap_Block]^maybeAddFunction(new com.google.javascript.jscomp.InlineFunctions.FunctionVar(n), t.getModule());^188^189^190^191^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P16_Remove_Block]^^188^189^190^191^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P13_Insert_Block]^if  ( n.hasOneChild (  )  )  {     Node nameNode = n.getFirstChild (  ) ;     if  (  (  (  ( nameNode.getType (  )  )  ==  ( NAME )  )  &&  ( nameNode.hasChildren (  )  )  )  &&  (  ( nameNode.getFirstChild (  ) .getType (  )  )  ==  ( FUNCTION )  )  )  {         maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;     } }^188^^^^^173^203^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P4_Replace_Constructor]^maybeAddFunction ( maybeAddFunction (  new NamedFunction ( n )  , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P4_Replace_Constructor]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P11_Insert_Donor_Statement]^maybeAddFunction ( fn, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^maybeAddFunction ( new FunctionVar ( n ) , t .inGlobalScope (  )   ) ;^190^^^^^188^191^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P4_Replace_Constructor]^maybeAddFunction ( maybeAddFunction (  new NamedFunction ( n )  , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( parentew FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^Node parentameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^Node nameNode = n .hasOneChild (  )  ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P8_Replace_Mix]^Node parentameNode = n .hasOneChild (  )  ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P11_Insert_Donor_Statement]^fnNode = n.getFirstChild (  ) ;Node nameNode = n.getFirstChild (  ) ;^187^^^^^172^202^Node nameNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^&& parent.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^&& nameNode.getFirstChild (  )  .getFirstChild (  )   == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^&& nameNode .hasOneChild (  )  .getType (  )  == Token.FUNCTION )  {^189^^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^189^190^^^^174^204^&& nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  { maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P4_Replace_Constructor]^maybeAddFunction ( new FunctionVar ( n ) .getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( tew FunctionVar ( n ) , n.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^maybeAddFunction ( new FunctionVar ( n ) , t .inGlobalScope (  )   ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P8_Replace_Mix]^maybeAddFunction ( parentew FunctionVar ( n ) , t .inGlobalScope (  )   ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P11_Insert_Donor_Statement]^maybeAddFunction ( fn, t.getModule (  )  ) ;maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^190^^^^^175^205^maybeAddFunction ( new FunctionVar ( n ) , t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  <= Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^if  ( nameNode.getType (  )  == Token.NAME && nameNode .hasOneChild (  )  && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^188^189^^^^173^203^if  ( nameNode.getType (  )  == Token.NAME && nameNode.hasChildren (  ) && nameNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P8_Replace_Mix]^if  ( name.isEmpty (  )  )  {^202^^^^^187^217^if  ( !name.isEmpty (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P15_Unwrap_Block]^maybeAddFunction(fn, t.getModule());^202^203^204^^^187^217^if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P16_Remove_Block]^^202^203^204^^^187^217^if  ( !name.isEmpty (  )  )  { maybeAddFunction ( fn, t.getModule (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction (  t.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^maybeAddFunction ( t, fn.getModule (  )  ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^maybeAddFunction ( fn, t .inGlobalScope (  )   ) ;^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^203^^^^^188^218^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P13_Insert_Block]^if  ( ! ( name.isEmpty (  )  )  )  {     maybeAddFunction ( fn, t.getModule (  )  ) ; }^203^^^^^188^218^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P4_Replace_Constructor]^Function fn = Function fn =  new FunctionVar ( n )  ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^Function fn = parentew NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P11_Insert_Donor_Statement]^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;Function fn = new NamedFunction ( n ) ;^200^^^^^185^215^Function fn = new NamedFunction ( n ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P1_Replace_Type]^char name = fn.getName (  ) ;^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^179^^^^^164^194^switch  ( n.getType (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) && parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  != Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isStatementBlock ( nameNode ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isStatement ( parent ) || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isStatement ( nameNode )  || parent.getType (  )  == Token.LABEL ) ;^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^198^199^^^^183^213^Preconditions.checkState ( NodeUtil.isStatementBlock ( parent ) || parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P5_Replace_Variable]^|| nameNode.getType (  )  == Token.LABEL ) ;^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^199^200^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ; Function fn = new NamedFunction ( n ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P12_Insert_Condition]^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { || parent.getType (  )  == Token.LABEL ) ; }^199^^^^^184^214^|| parent.getType (  )  == Token.LABEL ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P14_Delete_Statement]^^201^^^^^186^216^String name = fn.getName (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findNamedFunctions [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] Function  fn  String  name  boolean  NodeTraversal  t  int  callsSeen  Node  n  nameNode  parent  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .getType (  )  < Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P2_Replace_Operator]^if  ( n.getFirstChild (  ) .getType (  )  != Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^if  ( fnNode.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^if  ( n.getFirstChild (  )  .getFirstChild (  )   == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^if  ( n .hasOneChild (  )  .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^if  ( fnNode .hasOneChild (  )  .getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P9_Replace_Statement]^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^221^^^^^215^238^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( n )  )  {     Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;     if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {         fnNode = fnIdentifingNode;     } }^221^^^^^215^238^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P6_Replace_Expression]^} else {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isStatementBlock ( n )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isControlStructure ( n )   )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node fnIdentifingNode = n.getFirstChild().getFirstChild(); if ((fnIdentifingNode.getType()) == (com.google.javascript.rhino.Token.FUNCTION)) {    fnNode = fnIdentifingNode;};^223^224^225^226^227^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P16_Remove_Block]^^223^224^225^226^227^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  { Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P13_Insert_Block]^if  (  ( n.getFirstChild (  ) .getType (  )  )  ==  ( FUNCTION )  )  {     fnNode = n.getFirstChild (  ) ; }else     if  ( isFunctionObjectCall ( n )  )  {         Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;         if  (  ( fnIdentifingNode.getType (  )  )  ==  ( FUNCTION )  )  {             fnNode = fnIdentifingNode;         }     }^223^^^^^215^238^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  <= Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^if  ( fnIdentifingNode .getFirstChild (  )   == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P9_Replace_Statement]^if  ( n.getFirstChild (  ) .getType (  )  == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P15_Unwrap_Block]^fnNode = fnIdentifingNode;^225^226^227^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P16_Remove_Block]^^225^226^227^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^fnNode = n;^226^^^^^215^238^fnNode = fnIdentifingNode;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^Node fnIdentifingNode = fnNode.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^Node fnIdentifingNode = n .hasOneChild (  )^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P14_Delete_Statement]^^224^225^226^227^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { fnNode = fnIdentifingNode; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^if  ( n .getFirstChild (  )   == Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P13_Insert_Block]^if  ( ! ( isStatement ( n )  )  )  {     return ; }^223^^^^^215^238^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^fnNode = fnNode.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^fnNode =  null.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P14_Delete_Statement]^^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P11_Insert_Donor_Statement]^Node nameNode = n.getFirstChild (  ) ;fnNode = n.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  != Token.FUNCTION )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^if  ( fnIdentifingNode.getType (  )  == Token.null )  {^225^^^^^215^238^if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P2_Replace_Operator]^if  ( fnNode == null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^if  ( n != null )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^if  ( fnNode != false )  {^231^^^^^215^238^if  ( fnNode != null )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P15_Unwrap_Block]^com.google.javascript.jscomp.InlineFunctions.Function fn = new com.google.javascript.jscomp.InlineFunctions.AnonymousFunction(fnNode, ((callsSeen)++)); maybeAddFunction(fn, t.getModule()); anonFns.put(fnNode, fn.getName());^231^232^233^234^235^215^238^if  ( fnNode != null )  { Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P16_Remove_Block]^^231^232^233^234^235^215^238^if  ( fnNode != null )  { Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ; maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ; }^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^Function fn = new AnonymousFunction ( n, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P11_Insert_Donor_Statement]^Function fn = new NamedFunction ( n ) ;Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^232^^^^^215^238^Function fn = new AnonymousFunction ( fnNode, callsSeen++ ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P13_Insert_Block]^if  ( fnNode != null )  {     Function fn = new AnonymousFunction ( fnNode,  (  ( callsSeen ) ++ )  ) ;     maybeAddFunction ( fn, t.getModule (  )  ) ;     anonFns.put ( fnNode, fn.getName (  )  ) ; }^232^^^^^215^238^[Delete]^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^maybeAddFunction (  t.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^maybeAddFunction ( fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^maybeAddFunction ( t, fn.getModule (  )  ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P14_Delete_Statement]^^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P14_Delete_Statement]^^233^234^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ; anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^anonFns.put ( n, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^anonFns.put (  fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^anonFns.put ( fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^anonFns.put ( fn, fnNode.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P14_Delete_Statement]^^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^fnNode = n .hasOneChild (  )  ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^fnNode =  fnIdentifingNode.getFirstChild (  ) ;^222^^^^^215^238^fnNode = n.getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P12_Insert_Condition]^if  ( fnNode != null )  { Node fnNode = null; }^220^^^^^215^238^Node fnNode = null;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^switch  ( fnNode.getType (  )  )  {^216^^^^^215^238^switch  ( n.getType (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^switch  ( n .getFirstChild (  )   )  {^216^^^^^215^238^switch  ( n.getType (  )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isControlStructure ( fnIdentifingNode )   )  {^223^^^^^215^238^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^Node fnIdentifingNode = fnNode .hasOneChild (  )^224^^^^^215^238^Node fnIdentifingNode = n.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P7_Replace_Invocation]^maybeAddFunction ( fn, t .inGlobalScope (  )   ) ;^233^^^^^215^238^maybeAddFunction ( fn, t.getModule (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P5_Replace_Variable]^anonFns.put ( fnNodeNode, fn.getName (  )  ) ;^234^^^^^215^238^anonFns.put ( fnNode, fn.getName (  )  ) ;^[CLASS] FindCandidateFunctions  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^private CallVisitorCallback callback;^335^^^^^330^340^protected CallVisitorCallback callback;^[CLASS] CallVisitor  [METHOD] findAnonymousFunctionExpressions [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] Function  fn  boolean  NodeTraversal  t  int  callsSeen  Node  fnIdentifingNode  fnNode  n  
[P8_Replace_Mix]^this.functionMap =  null;^342^^^^^339^345^this.functionMap = fns;^[CLASS] CallVisitor  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] CallVisitorCallback  callback  Map  anonFns  anonFunctionMap  fns  functionMap  boolean  
[P11_Insert_Donor_Statement]^this.anonFunctionMap = anonFns;this.functionMap = fns;^342^^^^^339^345^this.functionMap = fns;^[CLASS] CallVisitor  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] CallVisitorCallback  callback  Map  anonFns  anonFunctionMap  fns  functionMap  boolean  
[P8_Replace_Mix]^this.anonFunctionMap =  null;^343^^^^^339^345^this.anonFunctionMap = anonFns;^[CLASS] CallVisitor  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] CallVisitorCallback  callback  Map  anonFns  anonFunctionMap  fns  functionMap  boolean  
[P11_Insert_Donor_Statement]^this.functionMap = fns;this.anonFunctionMap = anonFns;^343^^^^^339^345^this.anonFunctionMap = anonFns;^[CLASS] CallVisitor  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] CallVisitorCallback  callback  Map  anonFns  anonFunctionMap  fns  functionMap  boolean  
[P8_Replace_Mix]^this.callback =  null;^344^^^^^339^345^this.callback = callback;^[CLASS] CallVisitor  [METHOD] <init> [RETURN_TYPE] InlineFunctions$CallVisitorCallback)   FunctionState> fns String> anonFns CallVisitorCallback callback [VARIABLES] CallVisitorCallback  callback  Map  anonFns  anonFunctionMap  fns  functionMap  boolean  
[P2_Replace_Operator]^if  ( child.getType (  )  != Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( child.getType (  )  <= Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^if  ( child.getType() == FUNCTION )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^if  ( child .getString (  )   == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.NAME )  {^355^^^^^340^370^if  ( child.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( child.getType (  )  != Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( child.getType (  )  > Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == NAME )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^} else if  ( child .getString (  )   == Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else if  ( fnIdentifingNode.getType() == FUNCTION )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^} else if  ( NodeUtil.isGet ( n )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^}  if  ( NodeUtil.isFunctionObjectCall ( parent )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  >= Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  <= Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^if  ( fnIdentifingNode.getType() == FUNCTION )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^if  ( fnIdentifingNode .getString (  )   == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P9_Replace_Statement]^if  ( child.getType (  )  == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P15_Unwrap_Block]^name = fnIdentifingNode.getString();^362^363^364^365^366^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P16_Remove_Block]^^362^363^364^365^366^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  <= Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^} else {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^}  if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P9_Replace_Statement]^} else if  ( child.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P15_Unwrap_Block]^name = anonFunctionMap.get(fnIdentifingNode);^364^365^366^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P16_Remove_Block]^^364^365^366^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = anonFunctionMap.get ( parent ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = fnIdentifingNode.get ( anonFunctionMap ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( child ) ;name = anonFunctionMap.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^365^366^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^} else if  ( fnIdentifingNode .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P1_Replace_Type]^name = fnIdentifingNode.getchar (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = parent.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^name =  null.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;name = fnIdentifingNode.getString (  ) ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^name = fnIdentifingNode .getFirstChild (  )  ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^363^364^365^366^^348^378^name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  != Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^}  if  ( parent .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = null.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^Node fnIdentifingNode = parent.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;Node fnIdentifingNode = child.getFirstChild (  ) ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^Preconditions.checkState ( NodeUtil.isGet ( parent )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil.isFunctionObjectCall ( child )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isFunctionObjectCall ( fnIdentifingNode )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^360^361^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ; Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^Node fnIdentifingNode = child .getString (  )  ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^361^362^363^364^365^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ; if  ( fnIdentifingNode.getType (  )  == Token.NAME )  { name = fnIdentifingNode.getString (  ) ; } else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  { name = anonFunctionMap.get ( fnIdentifingNode ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  != Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  >= Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( fnIdentifingNode.getType (  )  == Token.4 )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^name = parent .getFirstChild (  )  ;^363^^^^^348^378^name = fnIdentifingNode.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( fnIdentifingNode.getType (  )  == Token.1 )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^name =  anonFunctionMap.get ( null ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( NodeUtil.isFunctionObjectCall ( parent )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^} else if  ( NodeUtil.isGet ( parent )  )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = anonFunctionMap.get ( parent ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = child.get ( anonFunctionMap ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( fnIdentifingNode ) ;name = anonFunctionMap.get ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^FunctionState fs = functionMap.get ( name ) ;name = anonFunctionMap.get ( child ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^}  if  ( NodeUtil .isGet ( child )   )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( fnIdentifingNode.getType (  )  < Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^if  ( fnIdentifingNode.getType (  )  == Token.this )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^}  if  ( parent.getType (  )  == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^Preconditions.checkState ( NodeUtil.isFunctionObjectCall ( parent )  ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = 0.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^name =  anonFunctionMap.get ( null ) ;^358^^^^^343^373^name = anonFunctionMap.get ( child ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P1_Replace_Type]^name = child.getchar (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = parent.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = fnIdentifingNode.getString (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^name = child .getFirstChild (  )  ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^Node child = n.getFirstChild (  ) ;name = child.getString (  ) ;^356^^^^^341^371^name = child.getString (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( child.getType (  )  <= Token.FUNCTION )  {^357^^^^^342^372^} else if  ( child.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^} else if  ( fnIdentifingNode.getType (  )  == Token.null )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^} else if  ( parent .getString (  )   == Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^} else if  ( fnIdentifingNode.getType (  )  < Token.FUNCTION )  {^364^^^^^349^379^} else if  ( fnIdentifingNode.getType (  )  == Token.FUNCTION )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^name = this.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^if  ( parent .getString (  )   == Token.NAME )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^} else if  ( NodeUtil .isGet ( child )   )  {^359^^^^^344^374^} else if  ( NodeUtil.isFunctionObjectCall ( n )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( fnIdentifingNode.getType (  )  == Token.null )  {^362^^^^^347^377^if  ( fnIdentifingNode.getType (  )  == Token.NAME )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^name = 1.get ( fnIdentifingNode ) ;^365^^^^^350^380^name = anonFunctionMap.get ( fnIdentifingNode ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( name == null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( parentame != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P6_Replace_Expression]^if  ( fs != null )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^if  ( name != false )  {^369^^^^^354^384^if  ( name != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P15_Unwrap_Block]^com.google.javascript.jscomp.InlineFunctions.FunctionState fs = functionMap.get(name); if (fs != null) {    callback.visitCallSite(t, n, parent, fs);};^369^370^^372^373^354^384^if  ( name != null )  { FunctionState fs = functionMap.get ( name ) ; if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P16_Remove_Block]^^369^370^^372^373^354^384^if  ( name != null )  { FunctionState fs = functionMap.get ( name ) ; if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P2_Replace_Operator]^if  ( fs == null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( fs != fnIdentifingNodeull )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( n != fsull )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^if  ( fs != this )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P9_Replace_Statement]^if  ( name != null )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P15_Unwrap_Block]^callback.visitCallSite(t, n, parent, fs);^372^373^374^^^357^387^if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P16_Remove_Block]^^372^373^374^^^357^387^if  ( fs != null )  { callback.visitCallSite ( t, n, parent, fs ) ; }^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, parent, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite (  n, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t,  parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, n,  fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( fs, n, parent, t ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, parent, n, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, n, fs, parent ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^callback.visitCallSite ( t, n, fnIdentifingNode, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P13_Insert_Block]^if  ( fs != null )  {     callback.visitCallSite ( t, n, parent, fs ) ; }^373^^^^^358^388^[Delete]^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^FunctionState fs = 1.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^FunctionState fs = name.get ( functionMap ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = anonFunctionMap.get ( child ) ;FunctionState fs = functionMap.get ( name ) ;^370^^^^^355^385^FunctionState fs = functionMap.get ( name ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, fnIdentifingNode, parent, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^if  ( fs != parentull )  {^372^^^^^357^387^if  ( fs != null )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( parent, n, t, fs ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^callback.visitCallSite ( t, fs, parent, n ) ;^373^^^^^358^388^callback.visitCallSite ( t, n, parent, fs ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^Node child = parent.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^Node child = n .getString (  )  ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^Node child = parent .getString (  )  ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^Node fnIdentifingNode = child.getFirstChild (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P1_Replace_Type]^char name = null;^352^^^^^337^367^String name = null;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^348^^^^^333^363^switch  ( n.getType (  )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^348^^^^^333^363^switch  ( n.getType (  )  )  {^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P14_Delete_Statement]^^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P11_Insert_Donor_Statement]^name = child.getString (  ) ;Node child = n.getFirstChild (  ) ;^351^^^^^336^366^Node child = n.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P7_Replace_Invocation]^Preconditions.checkState ( NodeUtil .isFunctionObjectCall ( n )   ) ;^360^^^^^345^375^Preconditions.checkState ( NodeUtil.isGet ( child )  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P8_Replace_Mix]^Node fnIdentifingNode = parent .getString (  )  ;^361^^^^^346^376^Node fnIdentifingNode = child.getFirstChild (  ) ;^[CLASS] CallVisitor  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  CallVisitorCallback  callback  NodeTraversal  t  Node  child  fnIdentifingNode  n  parent  FunctionState  fs  String  name  Map  anonFns  anonFunctionMap  fns  functionMap  
[P5_Replace_Variable]^super (  anonFns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[P5_Replace_Variable]^super ( fns,  null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[P5_Replace_Variable]^super ( anonFns, fns, null ) ;^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[P14_Delete_Statement]^^391^^^^^388^393^super ( fns, anonFns, null ) ;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[P8_Replace_Mix]^this.callback ;^392^^^^^388^393^this.callback = this;^[CLASS] FindCandidatesReferences  [METHOD] <init> [RETURN_TYPE] Map)   FunctionState> fns String> anonFns [VARIABLES] boolean  Map  anonFns  fns  
[P5_Replace_Variable]^super.visit (  n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^super.visit ( t,  parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^super.visit ( t, n ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^checkNameUsage ( t, n, parent ) ;super.visit ( t, n, parent ) ;^397^^^^^396^401^super.visit ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^if  ( n.getAncestor (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^if  ( n .getString (  )   == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P15_Unwrap_Block]^checkNameUsage(t, n, parent);^398^399^400^^^396^401^if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P16_Remove_Block]^^398^399^400^^^396^401^if  ( n.getType (  )  == Token.NAME )  { checkNameUsage ( t, n, parent ) ; }^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^398^^^^^396^401^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^398^^^^^396^401^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage (  n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( t,  parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( t, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( parent, n, t ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( t, parent, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^visit ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^checkNameUsage ( t, parent, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P11_Insert_Donor_Statement]^super.visit ( t, n, parent ) ;checkNameUsage ( t, n, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P8_Replace_Mix]^if  ( parent.getAncestor (  )  == Token.NAME )  {^398^^^^^396^401^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( t, n, n ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^checkNameUsage ( n, t, parent ) ;^399^^^^^396^401^checkNameUsage ( t, n, parent ) ;^[CLASS] FindCandidatesReferences  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeAddReference ( t, fs, parent, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference (  fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference ( t,  callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference ( t, fs,  t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference ( callNode, fs, t, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference ( fs, t, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^maybeAddReference ( t, callNode, fs, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^visitCallSite ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P14_Delete_Statement]^^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P11_Insert_Donor_Statement]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^405^^^^^403^406^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  NodeTraversal  t  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^if  ( !fs.setInline (  )  )  {^410^^^^^408^433^if  ( !fs.canInline (  )  )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^if  ( !fs .setInline ( referenceAdded )   )  {^410^^^^^408^433^if  ( !fs.canInline (  )  )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P15_Unwrap_Block]^return ;^410^411^412^^^408^433^if  ( !fs.canInline (  )  )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P16_Remove_Block]^^410^411^412^^^408^433^if  ( !fs.canInline (  )  )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P13_Insert_Block]^if  ( fs == null )  {     return ; }^410^^^^^408^433^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P3_Replace_Literal]^boolean referenceAdded = true;^414^^^^^408^433^boolean referenceAdded = false;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P12_Insert_Condition]^if  ( !referenceAdded )  { boolean referenceAdded = false; }^414^^^^^408^433^boolean referenceAdded = false;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^InliningMode mode  =  InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^InliningMode mode  =  InliningMode.DIRECT ;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^InliningMode mode = fs.setInline (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^InliningMode mode = fs .canInline (  )  ? InliningMode.DIRECT : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.4 : InliningMode.BLOCK;^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^415^416^^^^408^433^InliningMode mode = fs.canInlineDirectly (  ) ? InliningMode.DIRECT : InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( module, fs, callNode, t, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( fs, t, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, mode, callNode, module, fs ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( mode, fs, callNode, module, t ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^417^418^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P2_Replace_Operator]^if  ( !referenceAdded || mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P2_Replace_Operator]^if  ( !referenceAdded && mode != InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^if  ( !referenceAdded ) {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^if  (  mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^if  ( (!referenceAdded && mode == DIRECT) )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^if  ( mode == DIRECT )  {^419^420^^^^408^433^if  ( !referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^mode ;^423^^^^^408^433^mode = InliningMode.BLOCK;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode (  fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t,  callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs,  module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode,  mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( callNode, fs, t, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, mode, callNode, module, fs ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, callNode, fs, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, module, callNode, fs, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, mode, module ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^referenceAdded =  maybeAddReferenceUsingMode ( null, fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( module, fs, callNode, t, mode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^referenceAdded = maybeAddReferenceUsingMode ( t, fs, mode, module, callNode ) ;^424^425^^^^408^433^referenceAdded = maybeAddReferenceUsingMode ( t, fs, callNode, module, mode ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P15_Unwrap_Block]^fs.setRemove(false);^428^429^^431^432^408^433^if  ( !referenceAdded )  {  fs.setRemove ( false ) ; }^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P16_Remove_Block]^^428^429^^431^432^408^433^if  ( !referenceAdded )  {  fs.setRemove ( false ) ; }^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^fs .setInline ( referenceAdded )  ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^431^^^^^408^433^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReference [RETURN_TYPE] void   NodeTraversal t FunctionState fs Node callNode JSModule module [VARIABLES] boolean  referenceAdded  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction (  callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t,  fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) ,  fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( fs, callNode, t.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, mode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , callNode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, mode.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , fs, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( mode, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , t, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = mode.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , injector, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.setInline (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs .setInline ( decompose )  .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.setInline (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs .getReferencesThis (  )  , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.setRemove (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = injector.canInlineReferenceToFunction ( callNode, t, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^CanInlineResult result = fs.canInlineReferenceToFunction ( t, callNode, injector.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^438^439^440^^^435^450^CanInlineResult result = injector.canInlineReferenceToFunction ( t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^t, callNode, fs.setInline (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^t, callNode, fs .setInline ( decompose )  .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^439^440^^^^435^450^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^fs.setInline (  ) , mode, fs.getReferencesThis (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^fs .getReferencesThis (  )  , mode, fs.getReferencesThis (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^t, callNode, fs.getFn (  ) .getFunctionNode (  ) , fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^fs.getNamesToAlias (  ) , mode, fs.setRemove (  )  ) ;^440^^^^^435^450^fs.getNamesToAlias (  ) , mode, fs.getReferencesThis (  )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P2_Replace_Operator]^if  ( result >= CanInlineResult.NO )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P6_Replace_Expression]^if  ( result == AFTER_DECOMPOSITION )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P8_Replace_Mix]^if  ( result != CanInlineResult.4 )  {^441^^^^^435^450^if  ( result != CanInlineResult.NO )  {^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P3_Replace_Literal]^return false;^446^^^^^435^450^return true;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P4_Replace_Constructor]^fs.addReference ( new Reference (  module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode,  mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode, module,  decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P4_Replace_Constructor]^fs.addReference ( new Reference ( callNode, module, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^fs.addReference ( new Reference ( mode, module, callNode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^fs.addReference ( new Reference ( module, callNode, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^fs.addReference ( new Reference ( decompose, module, mode, callNode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P2_Replace_Operator]^boolean decompose = ( result <= CanInlineResult.AFTER_DECOMPOSITION ) ;^443^444^^^^435^450^boolean decompose = ( result == CanInlineResult.AFTER_DECOMPOSITION ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, mode, module, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P7_Replace_Invocation]^fs .getReferencesThis (  )  ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P14_Delete_Statement]^^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P11_Insert_Donor_Statement]^maybeAddReference ( t, fs, callNode, t.getModule (  )  ) ;fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P5_Replace_Variable]^fs.addReference ( new Reference ( callNode, module, decompose, mode )  ) ;^445^^^^^435^450^fs.addReference ( new Reference ( callNode, module, mode, decompose )  ) ;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P3_Replace_Literal]^return true;^449^^^^^435^450^return false;^[CLASS] FindCandidatesReferences  [METHOD] maybeAddReferenceUsingMode [RETURN_TYPE] boolean   NodeTraversal t FunctionState fs Node callNode JSModule module InliningMode mode [VARIABLES] CanInlineResult  result  boolean  decompose  NodeTraversal  t  InliningMode  mode  FunctionState  fs  Node  callNode  JSModule  module  
[P2_Replace_Operator]^Preconditions.checkState ( n.getType (  )  <= Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^Preconditions.checkState ( parent.getType (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( n.getAncestor (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( n.getAncestor (  )  == Token.null ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { Preconditions.checkState ( n.getType (  )  == Token.NAME ) ; }^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getString (  )   == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^Preconditions.checkState ( parent.getAncestor (  )  == Token.NAME ) ;^456^^^^^441^471^Preconditions.checkState ( n.getType (  )  == Token.NAME ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.VAR ) {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == VAR )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P15_Unwrap_Block]^return ;^458^459^^461^462^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P16_Remove_Block]^^458^459^^461^462^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {  return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^458^^^^^443^473^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^458^^^^^443^473^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^458^^^^^443^473^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.VAR || parent^458^^^^^443^473^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.CALL || parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  >= n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == gramps )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.3 && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && parent.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.CALL ) {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == CALL )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.CALL && parent.getAncestor (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  ( gramps.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P15_Unwrap_Block]^return ;^464^465^466^467^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {  return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P16_Remove_Block]^^464^465^466^467^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {  return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^464^^^^^449^479^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^464^^^^^449^479^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^464^^^^^449^479^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^464^^^^^449^479^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  ( n.getAncestor (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.CALL && parent.getAncestor (  )  == n )  {^464^^^^^449^479^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) || n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) && n <= parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( NodeUtil.isGet ( parent ) && n > parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "callca" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGet ( n ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGet ( parent ) && parent == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( NodeUtil.isGet ( n ) && parent == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( NodeUtil.isGet ( parent ) ) {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( isGet(parent) && (n == parent.getFirstChild()) && getType() == STRING) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( isGet(parent && n == parent.getFirstChild()) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( n == parent.getFirstChild (  ) )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( n.getNext (  ) .getType (  )  == STRING )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType() == CALL && gramps.getFirstChild() == parent )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getFirstChild (  )  == parent )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getAncestor (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .equals (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getAncestor (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  )  .getType (  )   )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .equals (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  )  .getType (  )  .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getAncestor (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  )  .getString (  )   == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  (  parent == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^477^478^479^480^^462^492^if  ( NodeUtil.isGet ( parent ) && n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  != Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  >= parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == n )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.this && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getAncestor (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps .getString (  )   == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps.getAncestor (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps .getString (  )   == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P15_Unwrap_Block]^return ;^482^483^^485^486^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P16_Remove_Block]^^482^483^^485^486^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^482^^^^^477^487^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^482^^^^^477^487^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^482^^^^^477^487^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^482^^^^^477^487^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -1 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^Node gramps = parent.getAncestor ( 2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -2 ) ;^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^481^^^^^477^487^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^477^487^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^&& parent.getFirstChild (  )  == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& gramps.getAncestor (  )  == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& gramps .getString (  )   == parent )  {^483^^^^^477^487^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^483^484^485^^^477^487^&& gramps.getFirstChild (  )  == parent )  {  return;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL || gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  != Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  >= parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == n )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.null && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == gramps )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == Token.CALL ) {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == CALL )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getAncestor (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps.getAncestor (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps.getType (  )  == Token.CALL && gramps .getString (  )   == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P15_Unwrap_Block]^return ;^482^483^^485^486^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P16_Remove_Block]^^482^483^^485^486^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^482^^^^^467^497^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^482^^^^^467^497^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     checkNameUsage ( t, n, parent ) ; }^482^^^^^467^497^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     fs.setInline ( false ) ; }else {     fs.setRemove ( false ) ; }^482^^^^^467^497^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( 6 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^Node gramps = parent.getAncestor ( 2 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^&& n == n.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^478^479^480^^^463^493^&& n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n == parent.getAncestor (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^478^479^480^^^463^493^&& n == parent.getFirstChild (  ) && n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^&& parent.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getNext (  ) .equals (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getNext (  )  .getString (  )   == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getAncestor (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^479^480^^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^479^480^481^^^464^494^&& n.getNext (  ) .getType (  )  == Token.STRING && n.getNext (  ) .getString (  ) .equals ( "call" )  )  { Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^&& n.getNext (  ) .getString (  ) .equals ( "aall" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^&& parent.getNext (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getNext (  ) .getString (  )  .getType (  )   )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getNext (  ) .equals (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getAncestor (  ) .getString (  ) .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^480^481^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  { Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& n.getNext (  )  .getType (  )  .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^&& parent.getNext (  )  .getType (  )  .equals ( "call" )  )  {^480^^^^^465^495^&& n.getNext (  ) .getString (  ) .equals ( "call" )  )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^Node gramps = n.getAncestor ( -6 ) ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^Node gramps = n .getNext (  )  ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^Node gramps = parent .getNext (  )  ;^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^481^^^^^466^496^Node gramps = n.getAncestor ( 2 ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( gramps .getString (  )   == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  ( parent.getAncestor (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^482^483^^^^467^497^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^&& parent.getFirstChild (  )  == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^&& gramps.getAncestor (  )  == parent )  {^483^^^^^468^498^&& gramps.getFirstChild (  )  == parent )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^483^484^485^^^468^498^&& gramps.getFirstChild (  )  == parent )  {  return;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P1_Replace_Type]^char name = n.getchar (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^String parentame = n.getString (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^String name = n.getAncestor (  ) ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^String name = n .getType (  )  ;^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^490^^^^^475^505^String name = n.getString (  ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^FunctionState fs = name.get ( fns ) ;^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^491^^^^^476^506^FunctionState fs = fns.get ( name ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( fs != null )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^if  ( fs == true )  {^492^^^^^477^507^if  ( fs == null )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P15_Unwrap_Block]^return ;^492^493^494^^^477^507^if  ( fs == null )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P16_Remove_Block]^^492^493^494^^^477^507^if  ( fs == null )  { return; }^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  ( ! ( fs.canInline (  )  )  )  {     return ; }^492^^^^^477^507^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  != n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( gramps.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.ASSIGN ) {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  (  parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getAncestor (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getAncestor (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( gramps.getType (  )  == Token.CALL && gramps.getFirstChild (  )  == parent )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( CALL )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( gramps.getType (  )  )  ==  ( CALL )  )  &&  (  ( gramps.getFirstChild (  )  )  == parent )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( VAR )  )  ||  (  ( parent.getType (  )  )  ==  ( FUNCTION )  )  )  {     return ; }^497^^^^^482^512^[Delete]^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^497^507^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^fs.setInline ( true ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^fs .canInline (  )  ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P11_Insert_Donor_Statement]^fs.setRemove ( false ) ;fs.setInline ( false ) ;^501^^^^^486^516^fs.setInline ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent .getString (  )   == n )  {^497^^^^^482^512^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P3_Replace_Literal]^fs.setRemove ( true ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P14_Delete_Statement]^^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P11_Insert_Donor_Statement]^fs.setInline ( false ) ;fs.setRemove ( false ) ;^506^^^^^491^521^fs.setRemove ( false ) ;^[CLASS] FindCandidatesReferences  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^private  FunctionInjector injector;^515^^^^^510^520^private final FunctionInjector injector;^[CLASS] Inline  [METHOD] checkNameUsage [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  NodeTraversal  t  Node  gramps  n  parent  FunctionState  fs  String  name  
[P8_Replace_Mix]^this.injector =  null;^518^^^^^517^519^this.injector = injector;^[CLASS] Inline  [METHOD] <init> [RETURN_TYPE] FunctionInjector)   FunctionInjector injector [VARIABLES] FunctionInjector  injector  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( fs.getReference (  )  ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P14_Delete_Statement]^^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^Preconditions.checkState ( fs .getSafeFnNode (  )   ) ;^523^^^^^521^537^Preconditions.checkState ( fs.hasExistingFunctionDefinition (  )  ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^if  ( fs.getReference (  )  )  {^524^^^^^521^537^if  ( fs.canInline (  )  )  {^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P2_Replace_Operator]^if  ( ref == null )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P8_Replace_Mix]^if  ( ref != this )  {^530^^^^^521^537^if  ( ref != null )  {^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P15_Unwrap_Block]^inlineFunction(t, callNode, fs, ref.mode); ref.inlined = true;^530^531^^^534^521^537^if  ( ref != null )  { inlineFunction ( t, callNode, fs, ref.mode ) ; ref.inlined = true; }^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P16_Remove_Block]^^530^531^^^534^521^537^if  ( ref != null )  { inlineFunction ( t, callNode, fs, ref.mode ) ; ref.inlined = true; }^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P3_Replace_Literal]^ref.inlined = false;^534^^^^^521^537^ref.inlined = true;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^inlineFunction (  callNode, fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^inlineFunction ( t,  fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^inlineFunction ( t, callNode,  ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^inlineFunction ( t, callNode, fs.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^inlineFunction ( t, callNode, fs ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^visitCallSite ( t, callNode, fs, ref.mode ) ;^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P14_Delete_Statement]^^531^^^^^521^537^inlineFunction ( t, callNode, fs, ref.mode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^Reference ref = fs.getReference ( parent ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P5_Replace_Variable]^Reference ref = callNode.getReference ( fs ) ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^Reference ref = fs .getSafeFnNode (  )  ;^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P14_Delete_Statement]^^525^^^^^521^537^Reference ref = fs.getReference ( callNode ) ;^[CLASS] Inline  [METHOD] visitCallSite [RETURN_TYPE] void   NodeTraversal t Node callNode Node parent FunctionState fs [VARIABLES] boolean  FunctionInjector  injector  NodeTraversal  t  Reference  ref  Node  callNode  parent  FunctionState  fs  
[P7_Replace_Invocation]^Function fn = fs.getReference (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;Function fn = fs.getFn (  ) ;^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^544^^^^^542^551^Function fn = fs.getFn (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P1_Replace_Type]^char fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Node fnNode = fs.getSafeFnNode (  ) ;String fnName = fn.getName (  ) ;^545^^^^^542^551^String fnName = fn.getName (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^545^546^^^^542^551^String fnName = fn.getName (  ) ; Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnNode = fs.getReference (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnNode = fs .getReference ( fnNode )  ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^Function fn = fs.getFn (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P11_Insert_Donor_Statement]^String fnName = fn.getName (  ) ;Node fnNode = fs.getSafeFnNode (  ) ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P7_Replace_Invocation]^Node fnNode = fs .getReference ( callNode )  ;^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^546^^^^^542^551^Node fnNode = fs.getSafeFnNode (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, fnNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, callNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline (  callNode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t,  fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode,  fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName,  mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( callNode, t, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, fnName, callNode, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnNode, fnName, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, fnNode, fnName, callNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = mode.inline ( t, callNode, fnName, fnNode, injector ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = fnName.inline ( t, callNode, injector, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, newCode, fnName, fnNode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, newCode, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( fnNode, callNode, fnName, t, mode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P5_Replace_Variable]^Node newCode = injector.inline ( t, callNode, fnName, mode, fnNode ) ;^548^^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^548^549^^^^542^551^Node newCode = injector.inline ( t, callNode, fnName, fnNode, mode ) ; t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  ) .addToDebugLog (  ) ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P7_Replace_Invocation]^t.getCompiler (  )  .addToDebugLog ( fnName )  ;^549^^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^549^550^^^^542^551^t.getCompiler (  ) .reportCodeChange (  ) ; t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P2_Replace_Operator]^t.getCompiler (  ) .addToDebugLog ( "Inlined function: "  <<  fn.getName (  )  ) ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P3_Replace_Literal]^t.getCompiler (  ) .addToDebugLog ( "Inlined function:  functi" + fn.getName (  )  ) ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^t.getCompiler (  )  .reportCodeChange (  )  ;^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P14_Delete_Statement]^^550^^^^^542^551^t.getCompiler (  ) .addToDebugLog ( "Inlined function: " + fn.getName (  )  ) ;^[CLASS] Inline  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private Function fn = false;^758^^^^^753^763^private Function fn = null;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private Node safeFnNode  = null ;^759^^^^^754^764^private Node safeFnNode = null;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P3_Replace_Literal]^private boolean inline = false;^760^^^^^755^765^private boolean inline = true;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private boolean inline  = null ;^760^^^^^755^765^private boolean inline = true;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P3_Replace_Literal]^private boolean remove = false;^761^^^^^756^766^private boolean remove = true;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private boolean remove  = null ;^761^^^^^756^766^private boolean remove = true;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P3_Replace_Literal]^private boolean inlineDirectly = true;^762^^^^^757^767^private boolean inlineDirectly = false;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P3_Replace_Literal]^private boolean referencesThis = true;^763^^^^^758^768^private boolean referencesThis = false;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private boolean referencesThis  = null ;^763^^^^^758^768^private boolean referencesThis = false;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private Map<Node, Reference> references ;^764^^^^^759^769^private Map<Node, Reference> references = null;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private JSModule module ;^765^^^^^760^770^private JSModule module = null;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P8_Replace_Mix]^private Set<String> namesToAlias  = null ;^766^^^^^761^771^private Set<String> namesToAlias = null;^[CLASS] FunctionState  [METHOD] inlineFunction [RETURN_TYPE] void   NodeTraversal t Node callNode FunctionState fs InliningMode mode [VARIABLES] Function  fn  boolean  NodeTraversal  t  InliningMode  mode  Node  callNode  fnNode  newCode  FunctionState  fs  String  fnName  FunctionInjector  injector  
[P2_Replace_Operator]^return  ( fn == null ) ;^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] FunctionState  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^return  ( fn ;^769^^^^^768^770^return  ( fn != null ) ;^[CLASS] FunctionState  [METHOD] hasExistingFunctionDefinition [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^this.referencesThis = remove;^773^^^^^772^774^this.referencesThis = referencesThis;^[CLASS] FunctionState  [METHOD] setReferencesThis [RETURN_TYPE] void   boolean referencesThis [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return remove;^777^^^^^776^778^return this.referencesThis;^[CLASS] FunctionState  [METHOD] getReferencesThis [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( entry.getValue (  ) .mode != InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P9_Replace_Statement]^if  ( r.mode == InliningMode.BLOCK )  {^784^^^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P15_Unwrap_Block]^i.remove();^784^785^786^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P16_Remove_Block]^^784^785^786^^^780^788^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( r.mode )  ==  ( BLOCK )  )  {     return true; }^784^^^^^780^788^[Delete]^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P8_Replace_Mix]^i .next (  )  ;^785^^^^^780^788^i.remove (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P14_Delete_Statement]^^785^^^^^780^788^i.remove (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .values (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P7_Replace_Invocation]^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i .next (  )  ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P8_Replace_Mix]^for  ( i = getReferencesInternal (  )  .get ( safeFnNode )  .iterator (  ) ; i.hasNext (  ) ; )  {^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P5_Replace_Variable]^Entry<Node, Reference> entry = null.next (  ) ;^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P8_Replace_Mix]^Entry<Node, Reference> entry = i .hasNext (  )  ;^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P14_Delete_Statement]^^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P8_Replace_Mix]^for  ( i  =  for  ( i ;^782^^^^^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  {^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P5_Replace_Variable]^Entry<Node, Reference> entry = this.next (  ) ;^783^^^^^780^788^Entry<Node, Reference> entry = i.next (  ) ;^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P14_Delete_Statement]^^782^783^784^785^786^780^788^for  ( i = getReferencesInternal (  ) .entrySet (  ) .iterator (  ) ; i.hasNext (  ) ; )  { Entry<Node, Reference> entry = i.next (  ) ; if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  { i.remove (  ) ; }^[CLASS] FunctionState  [METHOD] removeBlockInliningReferences [RETURN_TYPE] void   [VARIABLES] Function  fn  Entry  entry  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  Iterator  i  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( r.mode != InliningMode.BLOCK )  {^792^^^^^790^797^if  ( r.mode == InliningMode.BLOCK )  {^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P9_Replace_Statement]^if  ( entry.getValue (  ) .mode == InliningMode.BLOCK )  {^792^^^^^790^797^if  ( r.mode == InliningMode.BLOCK )  {^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P15_Unwrap_Block]^return true;^792^793^794^^^790^797^if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P16_Remove_Block]^^792^793^794^^^790^797^if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( entry.getValue (  ) .mode )  ==  ( BLOCK )  )  {     i.remove (  ) ; }^792^^^^^790^797^[Delete]^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P3_Replace_Literal]^return false;^793^^^^^790^797^return true;^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^for  ( Reference r : getReferencesInternal (  ) .entrySet (  )  )  {^791^^^^^790^797^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  {^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^791^792^793^794^^790^797^for  ( Reference r : getReferencesInternal (  ) .values (  )  )  { if  ( r.mode == InliningMode.BLOCK )  { return true; }^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P3_Replace_Literal]^return true;^796^^^^^790^797^return false;^[CLASS] FunctionState  [METHOD] hasBlockInliningReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  r  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^Preconditions.checkState ( this.fn != null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] FunctionState  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^Preconditions.checkState ( fn == null ) ;^804^^^^^803^806^Preconditions.checkState ( this.fn == null ) ;^[CLASS] FunctionState  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^804^805^^^^803^806^Preconditions.checkState ( this.fn == null ) ; this.fn = fn;^[CLASS] FunctionState  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.fn =  null;^805^^^^^803^806^this.fn = fn;^[CLASS] FunctionState  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.inline = inline;this.fn = fn;^805^^^^^803^806^this.fn = fn;^[CLASS] FunctionState  [METHOD] setFn [RETURN_TYPE] void   Function fn [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^return  ( safeFnNode == null )  ? safeFnNode : fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return  ( fn != null )  ? safeFnNode : safeFnNode.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P6_Replace_Expression]^return  ( safeFnNode ! =  fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P6_Replace_Expression]^return  ( safeFnNode ! =  safeFnNode ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^return  ( safeFnNode  =  fn.getFunctionNode (  ) ;^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^809^^^^^808^810^return  ( safeFnNode != null )  ? safeFnNode : fn.getFunctionNode (  ) ;^[CLASS] FunctionState  [METHOD] getSafeFnNode [RETURN_TYPE] Node   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.safeFnNode =  null;^813^^^^^812^814^this.safeFnNode = safeFnNode;^[CLASS] FunctionState  [METHOD] setSafeFnNode [RETURN_TYPE] void   Node safeFnNode [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.remove = remove;this.safeFnNode = safeFnNode;^813^^^^^812^814^this.safeFnNode = safeFnNode;^[CLASS] FunctionState  [METHOD] setSafeFnNode [RETURN_TYPE] void   Node safeFnNode [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return remove;^817^^^^^816^818^return inline;^[CLASS] FunctionState  [METHOD] canInline [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.inline =  null;^821^^^^^820^828^this.inline = inline;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.module = module;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.fn = fn;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.remove = remove;this.inline = inline;^821^^^^^820^828^this.inline = inline;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( inline > false )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P3_Replace_Literal]^if  ( inline == true )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^if  ( remove == false )  {^822^^^^^820^828^if  ( inline == false )  {^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P15_Unwrap_Block]^references = null; remove = false;^822^823^824^^826^820^828^if  ( inline == false )  {  references = null; remove = false; }^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P16_Remove_Block]^^822^823^824^^826^820^828^if  ( inline == false )  {  references = null; remove = false; }^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^references = false;^824^^^^^820^828^references = null;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P12_Insert_Condition]^if  ( references == null )  { references = null; }^824^^^^^820^828^references = null;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P3_Replace_Literal]^remove = true;^826^^^^^820^828^remove = false;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.remove = remove;remove = false;^826^^^^^820^828^remove = false;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^references = this;^824^^^^^820^828^references = null;^[CLASS] FunctionState  [METHOD] setInline [RETURN_TYPE] void   boolean inline [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return referencesThis;^831^^^^^830^832^return remove;^[CLASS] FunctionState  [METHOD] canRemove [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^this.remove = referencesThis;^835^^^^^834^836^this.remove = remove;^[CLASS] FunctionState  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.module = module;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] FunctionState  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^remove = false;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] FunctionState  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.inline = inline;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] FunctionState  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.safeFnNode = safeFnNode;this.remove = remove;^835^^^^^834^836^this.remove = remove;^[CLASS] FunctionState  [METHOD] setRemove [RETURN_TYPE] void   boolean remove [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return remove;^839^^^^^838^840^return inlineDirectly;^[CLASS] FunctionState  [METHOD] canInlineDirectly [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.inlineDirectly =  remove;^843^^^^^842^844^this.inlineDirectly = directReplacement;^[CLASS] FunctionState  [METHOD] inlineDirectly [RETURN_TYPE] void   boolean directReplacement [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^return  ( references != null || !references.isEmpty (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^return  ( references == null && !references.isEmpty (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return  ( references != null && !references.values (  )  ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return  ( references != null && !references .get ( safeFnNode )   ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^return   references .get ( safeFnNode )   ) ;^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^847^^^^^846^848^return  ( references != null && !references.isEmpty (  )  ) ;^[CLASS] FunctionState  [METHOD] hasReferences [RETURN_TYPE] boolean   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( references != null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^if  ( references == this )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P9_Replace_Statement]^if  ( namesToAlias == null )  {^851^^^^^850^855^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P15_Unwrap_Block]^return java.util.Collections.emptyMap();^851^852^853^^^850^855^if  ( references == null )  { return Collections.emptyMap (  ) ; }^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P16_Remove_Block]^^851^852^853^^^850^855^if  ( references == null )  { return Collections.emptyMap (  ) ; }^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( references )  == null )  {     references = newHashMap (  ) ; }^851^^^^^850^855^[Delete]^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( namesToAlias )  == null )  {     return emptySet (  ) ; }^851^^^^^850^855^[Delete]^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return Collections.emptySet (  ) ;^852^^^^^850^855^return Collections.emptyMap (  ) ;^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^852^^^^^850^855^[Delete]^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^852^^^^^850^855^return Collections.emptyMap (  ) ;^[CLASS] FunctionState  [METHOD] getReferencesInternal [RETURN_TYPE] Map   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( references != null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^if  ( references == false )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P9_Replace_Statement]^if  ( namesToAlias == null )  {^858^^^^^857^862^if  ( references == null )  {^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P15_Unwrap_Block]^references = com.google.common.collect.Maps.newHashMap();^858^859^860^^^857^862^if  ( references == null )  { references = Maps.newHashMap (  ) ; }^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P16_Remove_Block]^^858^859^860^^^857^862^if  ( references == null )  { references = Maps.newHashMap (  ) ; }^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^858^^^^^857^862^[Delete]^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^references ;^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( references )  == null )  {     references = newHashMap (  ) ; }^859^^^^^857^862^[Delete]^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^references  =  references ;^859^^^^^857^862^references = Maps.newHashMap (  ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^references.put ( ref.callNode ) ;^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^references.put (  ref ) ;^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^861^^^^^857^862^references.put ( ref.callNode, ref ) ;^[CLASS] FunctionState  [METHOD] addReference [RETURN_TYPE] void   Reference ref [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Reference  ref  Node  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return getReferencesInternal (  ) .entrySet (  ) ;^865^^^^^864^866^return getReferencesInternal (  ) .values (  ) ;^[CLASS] FunctionState  [METHOD] getReferences [RETURN_TYPE] Collection   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^865^^^^^864^866^return getReferencesInternal (  ) .values (  ) ;^[CLASS] FunctionState  [METHOD] getReferences [RETURN_TYPE] Collection   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return getReferencesInternal (  ) .get ( safeFnNode ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] FunctionState  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return getReferencesInternal (  ) .put ( n ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] FunctionState  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^return getReferencesInternal (  ) .put ( safeFnNode ) ;^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] FunctionState  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^869^^^^^868^870^return getReferencesInternal (  ) .get ( n ) ;^[CLASS] FunctionState  [METHOD] getReference [RETURN_TYPE] InlineFunctions$Reference   Node n [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P2_Replace_Operator]^if  ( namesToAlias != null )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^if  ( namesToAlias == true )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P9_Replace_Statement]^if  ( references == null )  {^873^^^^^872^877^if  ( namesToAlias == null )  {^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P15_Unwrap_Block]^return java.util.Collections.emptySet();^873^874^875^^^872^877^if  ( namesToAlias == null )  { return Collections.emptySet (  ) ; }^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P16_Remove_Block]^^873^874^875^^^872^877^if  ( namesToAlias == null )  { return Collections.emptySet (  ) ; }^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( references )  == null )  {     return emptyMap (  ) ; }^873^^^^^872^877^[Delete]^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return Collections.emptyMap (  ) ;^874^^^^^872^877^return Collections.emptySet (  ) ;^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P13_Insert_Block]^if  (  ( namesToAlias )  == null )  {     return emptySet (  ) ; }^874^^^^^872^877^[Delete]^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^874^^^^^872^877^return Collections.emptySet (  ) ;^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return Collections.emptySet ( namesToAlias ) ;^876^^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ;^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P7_Replace_Invocation]^return Collections .emptySet (  )  ;^876^^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ;^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P5_Replace_Variable]^return Collections.unmodifiableSet ( 4 ) ;^876^^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ;^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P14_Delete_Statement]^^876^877^^^^872^877^return Collections.unmodifiableSet ( namesToAlias ) ; }^[CLASS] FunctionState  [METHOD] getNamesToAlias [RETURN_TYPE] Set   [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^namesToAlias =  null;^880^^^^^879^881^namesToAlias = names;^[CLASS] FunctionState  [METHOD] setNamesToAlias [RETURN_TYPE] void   String> names [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  names  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P12_Insert_Condition]^if  ( namesToAlias == null )  { namesToAlias = names; }^880^^^^^879^881^namesToAlias = names;^[CLASS] FunctionState  [METHOD] setNamesToAlias [RETURN_TYPE] void   String> names [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  names  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.module =  null;^884^^^^^883^885^this.module = module;^[CLASS] FunctionState  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  names  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.inline = inline;this.module = module;^884^^^^^883^885^this.module = module;^[CLASS] FunctionState  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  names  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P11_Insert_Donor_Statement]^this.remove = remove;this.module = module;^884^^^^^883^885^this.module = module;^[CLASS] FunctionState  [METHOD] setModule [RETURN_TYPE] void   JSModule module [VARIABLES] Function  fn  boolean  directReplacement  inline  inlineDirectly  referencesThis  remove  Set  names  namesToAlias  Node  n  safeFnNode  JSModule  module  Map  references  
[P8_Replace_Mix]^this.fn =  null;^909^^^^^908^910^this.fn = fn;^[CLASS] NamedFunction  [METHOD] <init> [RETURN_TYPE] Node)   Node fn [VARIABLES] Node  fn  boolean  
[P7_Replace_Invocation]^return fn.getParent (  ) .getString (  ) ;^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] NamedFunction  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Node  fn  boolean  
[P14_Delete_Statement]^^913^^^^^912^914^return fn.getFirstChild (  ) .getString (  ) ;^[CLASS] NamedFunction  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Node  fn  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( fn.getFirstChild (  ) , fn ) ;^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] NamedFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  fn  boolean  
[P14_Delete_Statement]^^921^^^^^920^922^NodeUtil.removeChild ( fn.getParent (  ) , fn ) ;^[CLASS] NamedFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  fn  boolean  
[P8_Replace_Mix]^this.var =  null;^930^^^^^929^931^this.var = var;^[CLASS] FunctionVar  [METHOD] <init> [RETURN_TYPE] Node)   Node var [VARIABLES] Node  var  boolean  
[P7_Replace_Invocation]^return var.getFirstChild (  ) .getFirstChild (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionVar  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Node  var  boolean  
[P7_Replace_Invocation]^return var.getParent (  ) .getString (  ) ;^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionVar  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Node  var  boolean  
[P14_Delete_Statement]^^934^^^^^933^935^return var.getFirstChild (  ) .getString (  ) ;^[CLASS] FunctionVar  [METHOD] getName [RETURN_TYPE] String   [VARIABLES] Node  var  boolean  
[P7_Replace_Invocation]^return var.getString (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FunctionVar  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Node  var  boolean  
[P7_Replace_Invocation]^return var.getParent (  ) .getFirstChild (  ) ;^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FunctionVar  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Node  var  boolean  
[P8_Replace_Mix]^return var .getParent (  )^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FunctionVar  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Node  var  boolean  
[P14_Delete_Statement]^^938^^^^^937^939^return var.getFirstChild (  ) .getFirstChild (  ) ;^[CLASS] FunctionVar  [METHOD] getFunctionNode [RETURN_TYPE] Node   [VARIABLES] Node  var  boolean  
[P7_Replace_Invocation]^NodeUtil.removeChild ( var.getFirstChild (  ) , var ) ;^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] FunctionVar  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  var  boolean  
[P14_Delete_Statement]^^942^^^^^941^943^NodeUtil.removeChild ( var.getParent (  ) , var ) ;^[CLASS] FunctionVar  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  var  boolean  
[P8_Replace_Mix]^private  Node fn;^948^^^^^943^953^private final Node fn;^[CLASS] AnonymousFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  var  boolean  
[P1_Replace_Type]^private final char fakeName;^949^^^^^944^954^private final String fakeName;^[CLASS] AnonymousFunction  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  var  boolean  
[P8_Replace_Mix]^this.fn =  null;^952^^^^^951^956^this.fn = fn;^[CLASS] AnonymousFunction  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] String  fakeName  boolean  int  index  Node  fn  
[P8_Replace_Mix]^this.fakeName =  String.valueOf ( null ) ;^955^^^^^951^956^this.fakeName = String.valueOf ( index ) ;^[CLASS] AnonymousFunction  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] String  fakeName  boolean  int  index  Node  fn  
[P14_Delete_Statement]^^955^^^^^951^956^this.fakeName = String.valueOf ( index ) ;^[CLASS] AnonymousFunction  [METHOD] <init> [RETURN_TYPE] Node,int)   Node fn int index [VARIABLES] String  fakeName  boolean  int  index  Node  fn  
[P3_Replace_Literal]^boolean inlined = true;^973^^^^^968^978^boolean inlined = false;^[CLASS] Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  fn  String  fakeName  boolean  
[P8_Replace_Mix]^boolean inlined  = null ;^973^^^^^968^978^boolean inlined = false;^[CLASS] Reference  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Node  fn  String  fakeName  boolean  
[P5_Replace_Variable]^super (  module, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^super ( callNode,  mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^super ( callNode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^super ( module, callNode, mode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^super ( callNode, mode, module ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^super ( mode, module, callNode ) ;^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P14_Delete_Statement]^^976^^^^^974^978^super ( callNode, module, mode ) ;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
[P5_Replace_Variable]^this.requiresDecomposition = requiresDecomposition;^977^^^^^974^978^this.requiresDecomposition = decompose;^[CLASS] Reference  [METHOD] <init> [RETURN_TYPE] InliningMode,boolean)   Node callNode JSModule module InliningMode mode boolean decompose [VARIABLES] JSModule  module  boolean  decompose  inlined  requiresDecomposition  InliningMode  mode  Node  callNode  
