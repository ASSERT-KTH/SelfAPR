[P8_Replace_Mix]^private  Scope jsScope;^47^^^^^42^52^private final Scope jsScope;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [VARIABLES] 
[P8_Replace_Mix]^Multimap<Var, Node> mayUseMap;^85^^^^^80^90^final Multimap<Var, Node> mayUseMap;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [VARIABLES] 
[P4_Replace_Constructor]^super ( cfg, super ( cfg,  new ReachingUses ( input )   ) ;^52^^^^^50^59^super ( cfg, new ReachingUsesJoinOp (  )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^52^^^^^50^59^super ( cfg, new ReachingUsesJoinOp (  )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^this.jsScope =  null;^53^^^^^50^59^this.jsScope = jsScope;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^this.escaped ;^54^^^^^50^59^this.escaped = Sets.newHashSet (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^54^^^^^50^59^this.escaped = Sets.newHashSet (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeEscaped (  escaped, compiler ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeEscaped ( jsScope, escaped ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeEscaped ( jsScope,  compiler ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeEscaped ( compiler, escaped, jsScope ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P5_Replace_Variable]^computeEscaped ( jsScope, compiler, escaped ) ;^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P14_Delete_Statement]^^58^^^^^50^59^computeEscaped ( jsScope, escaped, compiler ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   Node> cfg Scope jsScope AbstractCompiler compiler [VARIABLES] Multimap  mayUseMap  AbstractCompiler  compiler  Set  escaped  boolean  Scope  jsScope  ControlFlowGraph  cfg  
[P8_Replace_Mix]^mayUseMap  =  mayUseMap ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P11_Insert_Donor_Statement]^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;mayUseMap = HashMultimap.create (  ) ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P8_Replace_Mix]^mayUseMap = HashMultimap .create (  )  ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P14_Delete_Statement]^^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P5_Replace_Variable]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P5_Replace_Variable]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P8_Replace_Mix]^mayUseMap =  HashMultimap.create ( null.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P11_Insert_Donor_Statement]^mayUseMap = HashMultimap.create (  ) ;mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P5_Replace_Variable]^mayUseMap = HashMultimap.create ( null ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P14_Delete_Statement]^^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  other  
[P2_Replace_Operator]^return  ( other instanceof ReachingUses )  || (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P2_Replace_Operator]^return  ( other  &&  ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P5_Replace_Variable]^return  ( this.mayUseMap instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( other ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P7_Replace_Invocation]^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.putAll ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P7_Replace_Invocation]^(  ( ReachingUses )  other ) .mayUseMap.putAll ( this.mayUseMap ) ;^103^^^^^101^104^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P14_Delete_Statement]^^103^^^^^101^104^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P11_Insert_Donor_Statement]^result.mayUseMap.putAll ( uses.mayUseMap ) ;(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^103^^^^^101^104^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  Set  escaped  boolean  Scope  jsScope  
[P8_Replace_Mix]^return mayUseMap .hashCode (  )  ;^108^^^^^107^109^return mayUseMap.hashCode (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P14_Delete_Statement]^^108^^^^^107^109^return mayUseMap.hashCode (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P4_Replace_Constructor]^ReachingUses result = new ReachingUses ( input )  ;^122^^^^^121^127^ReachingUses result = new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P11_Insert_Donor_Statement]^ReachingUses output = new ReachingUses ( input ) ;ReachingUses result = new ReachingUses (  ) ;^122^^^^^121^127^ReachingUses result = new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P7_Replace_Invocation]^result.mayUseMap.put ( uses.mayUseMap ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P8_Replace_Mix]^result.mayUseMap.put ( 0 ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P14_Delete_Statement]^^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P11_Insert_Donor_Statement]^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;result.mayUseMap.putAll ( uses.mayUseMap ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P11_Insert_Donor_Statement]^use.mayUseMap.put ( var, node ) ;result.mayUseMap.putAll ( uses.mayUseMap ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P5_Replace_Variable]^return uses;^126^^^^^121^127^return result;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] Multimap  mayUseMap  List  from  Set  escaped  boolean  Scope  jsScope  ReachingUses  result  uses  
[P3_Replace_Literal]^return true;^132^^^^^131^133^return false;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] isForward [RETURN_TYPE] boolean   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P4_Replace_Constructor]^return return  new ReachingUses ( input )  ;^137^^^^^136^138^return new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] createEntryLattice [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P8_Replace_Mix]^return  new ReachingUses ( input )  ;^137^^^^^136^138^return new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] createEntryLattice [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P4_Replace_Constructor]^return return  new ReachingUses ( input )  ;^142^^^^^141^143^return new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] createInitialEstimateLattice [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P8_Replace_Mix]^return  new ReachingUses ( input )  ;^142^^^^^141^143^return new ReachingUses (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] createInitialEstimateLattice [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  
[P4_Replace_Constructor]^ReachingUses output = new ReachingUsesJoinOp (  )  ;^147^^^^^146^150^ReachingUses output = new ReachingUses ( input ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^ReachingUses output = new ReachingUses ( output ) ;^147^^^^^146^150^ReachingUses output = new ReachingUses ( input ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P11_Insert_Donor_Statement]^ReachingUses result = new ReachingUses (  ) ;ReachingUses output = new ReachingUses ( input ) ;^147^^^^^146^150^ReachingUses output = new ReachingUses ( input ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P3_Replace_Literal]^computeMayUse ( n, n, output, true ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^computeMayUse ( n, n, input, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^computeMayUse (  n, output, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^computeMayUse ( n, n,  false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^computeMayUse ( output, n, n, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P14_Delete_Statement]^^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;computeMayUse ( n, n, output, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;computeMayUse ( n, n, output, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( n, n, output, false ) ;^148^^^^^146^150^computeMayUse ( n, n, output, false ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^return input;^149^^^^^146^150^return output;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] flowThrough [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   Node n ReachingUses input [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  input  output  Node  n  
[P5_Replace_Variable]^if  ( !NodeUtil.isForIn ( rhs )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( !NodeUtil.isAssign ( n )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( !NodeUtil.isAssign ( varName )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( NodeUtil.isVar ( lhs )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil .isName ( varName )   )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( !NodeUtil.isAssign ( n )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^lhs = lhs.getLastChild();^179^180^181^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^179^180^181^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( ! ( isAssign ( n )  )  )  {     addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^179^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^179^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^lhs = varName.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^lhs = lhs.getChildBefore (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^lhs = lhs .getFirstChild (  )  ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^lhs = name.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^lhs = varName .getFirstChild (  )  ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( name )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  (  !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil .isVar ( n )   && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( rhs )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^removeFromUseIfLocal(lhs.getString(), output);^182^183^184^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  { removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^182^183^184^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  { removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( ! ( isAssign ( n )  )  )  {     addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^182^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^182^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^182^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^182^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( lhs.getString (  )  ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^flowThrough ( lhs.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( lhs.getChildBefore (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( lhs .getLastChild (  )  , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^183^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^183^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^lhs =  rhs.getLastChild (  ) ;^180^^^^^172^186^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node lhs = n.getChildBefore (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node rhs = varName.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node rhs = lhs.getChildBefore (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node rhs = lhs .getType (  )  ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhs = varName.getChildBefore (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^172^186^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhs = name.getChildBefore (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^172^186^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( varName )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil .isName ( c )   )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^172^186^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^179^^^^^172^186^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( rhs )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( varName )  && !conditional )  {^182^^^^^172^186^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^183^^^^^172^186^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, varName, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse (  cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs,  output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, cfgNode,  conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, cfgNode, output ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode, rhs, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, output, cfgNode, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( conditional, cfgNode, output, rhs ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n, n, output, false ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^172^186^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( name ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , rhs, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , output, cfgNode, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, conditional, output ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , varName, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( name )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( lhs )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( varName )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( !NodeUtil.isForIn ( n )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( !NodeUtil.isAssign ( n )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^lhs = lhs.getLastChild();^179^180^181^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^179^180^181^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( ! ( isAssign ( n )  )  )  {     addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^179^^^^^164^194^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^179^^^^^164^194^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^lhs = rhs.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^lhs = lhs.getChildBefore (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^lhs =  varName.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;lhs = lhs.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P2_Replace_Operator]^if  ( NodeUtil.isName ( lhs )  || !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isName ( varName )  && !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  ( NodeUtil.isName ( lhs )  ) {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  (  !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( lhs )  && !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isName ( rhs )  && !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^removeFromUseIfLocal(lhs.getString(), output);^182^183^184^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  { removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^182^183^184^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  { removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( ! ( isAssign ( n )  )  )  {     addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^182^^^^^167^197^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^182^^^^^167^197^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^182^^^^^167^197^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^182^^^^^167^197^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( lhs.getString (  )  ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( output.getString (  ) , lhs ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^flowThrough ( lhs.getString (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( lhs.getChildBefore (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( lhs .getLastChild (  )  , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^183^^^^^168^198^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^183^^^^^168^198^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( rhs.hasChildren (  )  )  {^205^^^^^190^220^if  ( varName.hasChildren (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( varName.getChildBefore (  )  )  {^205^^^^^190^220^if  ( varName.hasChildren (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^computeMayUse(varName.getFirstChild(), cfgNode, output, conditional); if (!conditional) {    removeFromUseIfLocal(varName.getString(), output);};^205^206^207^208^209^190^220^if  ( varName.hasChildren (  )  )  { computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ; if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^205^206^207^208^209^190^220^if  ( varName.hasChildren (  )  )  { computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ; if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^removeFromUseIfLocal(varName.getString(), output);^207^208^209^^^192^222^if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^207^208^209^^^192^222^if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^207^^^^^192^222^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^207^^^^^192^222^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( varName.getString (  )  ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( output.getString (  ) , varName ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^flowThrough ( varName.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( varName.getChildBefore (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( n.getChildBefore (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;removeFromUseIfLocal ( varName.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;removeFromUseIfLocal ( varName.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;removeFromUseIfLocal ( varName.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^removeFromUseIfLocal ( name.getString (  ) , output ) ;removeFromUseIfLocal ( varName.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^208^^^^^193^223^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^208^^^^^193^223^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( n.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , rhs, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) ,  output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , cfgNode,  conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getFirstChild (  ) , cfgNode, varName, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getFirstChild (  ) , varName, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , output, cfgNode, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, conditional, output ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( varName.getChildBefore (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( varName .getLastChild (  )  , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( name .getLastChild (  )  , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( varName .getLastChild (  )  , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n )  || NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( varName )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  ( NodeUtil.isAssignmentOp ( n )  ) {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  (  NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P6_Replace_Expression]^if  ( c != null )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssign ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( lhs )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil .isVar ( cfgNode )   )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getChildBefore (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n .getLastChild (  )   )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isForInmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssignmentOp ( n )   )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isAssignmentOp ( rhs )  ) {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node name = n.getFirstChild(); if (!conditional) {    removeFromUseIfLocal(name.getString(), output);}; if (!(com.google.javascript.jscomp.NodeUtil.isAssign(n))) {    addToUseIfLocal(name.getString(), cfgNode, output);}; computeMayUse(name.getNext(), cfgNode, output, conditional);^214^215^216^217^218^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  { Node name = n.getFirstChild (  ) ; if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^214^215^216^217^218^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  { Node name = n.getFirstChild (  ) ; if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P2_Replace_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node c = rhs.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node varName = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^for  ( Node c = n.getChildBefore (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^for  ( Node c = n.getLastChild (  ) ; c != null; c = n .hasChildren (  )   )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^for  ( Node c = varName .getFirstChild (  )  ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, varName, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse (  cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c,  output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode,  conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode, output ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( conditional, cfgNode, output, c ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n, n, output, false ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^for  ( Node c =  varName.getLastChild (  ) ; c !^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node c = varName.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^for  ( Node c = varName.getChildBefore (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^for  ( Node c = n .getFirstChild (  )  ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^232^233^234^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  { computeMayUse ( c, cfgNode, output, conditional ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node rhs = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, name, output, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output, cfgNode, c, conditional ) ;^233^^^^^214^235^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( conditional )  {^216^^^^^201^231^if  ( !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^removeFromUseIfLocal(name.getString(), output);^216^217^218^^^201^231^if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^216^217^218^^^201^231^if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^216^^^^^201^231^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^216^^^^^201^231^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( n.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( name.getString (  )  ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( output.getString (  ) , name ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^flowThrough ( name.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( name.getChildBefore (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( varName.getChildBefore (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;removeFromUseIfLocal ( name.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;removeFromUseIfLocal ( name.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;removeFromUseIfLocal ( name.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;removeFromUseIfLocal ( name.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( name.getString (  ) , output ) ; }^217^^^^^202^232^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( !conditional )  {     removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^217^^^^^202^232^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( n.getChildBefore (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( !NodeUtil.isAssign ( varName )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( n )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P9_Replace_Statement]^if  ( NodeUtil.isVar ( lhs )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P15_Unwrap_Block]^addToUseIfLocal(name.getString(), cfgNode, output);^221^222^223^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  { addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P16_Remove_Block]^^221^222^223^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  { addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  (  ( isName ( lhs )  )  &&  ( !conditional )  )  {     removeFromUseIfLocal ( lhs.getString (  ) , output ) ; }^221^^^^^206^236^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^221^^^^^206^236^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( name.getString (  ) , varName, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( name.getString (  ) ,  output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( name.getString (  ) , cfgNode ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( cfgNode.getString (  ) , name, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( name.getString (  ) , output, cfgNode ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( output.getString (  ) , cfgNode, name ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^MaybeReachingVariableUse ( name.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^addToUseIfLocal ( name.getChildBefore (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^addToUseIfLocal ( rhs.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^addToUseIfLocal ( varName.getString (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node varNameame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node name = n.getChildBefore (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhsame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node name = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node name = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node name = n .getLastChild (  )  ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node nameame = n.getChildBefore (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node name = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^removeFromUseIfLocal ( name .getLastChild (  )  , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( !NodeUtil.isAssign ( name )  )  {^221^^^^^206^236^if  ( !NodeUtil.isAssign ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^MaybeReachingVariableUse ( name.getString (  ) , rhs, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^addToUseIfLocal ( n.getChildBefore (  ) , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , varName, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) ,  output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , cfgNode,  conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , cfgNode, output ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getNext (  ) , cfgNode, name, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getNext (  ) , name, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , cfgNode, conditional, output ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , conditional, output, cfgNode ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( name.getChildBefore (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( name .getType (  )  , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^217^^^^^202^232^removeFromUseIfLocal ( name.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P2_Replace_Operator]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node c = rhs.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node name = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node n = c.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^for  ( Node c = n.getChildBefore (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^for  ( Node c = varName.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, name, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse (  cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c,  output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode,  conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode, output ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode, c, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, conditional, output, cfgNode ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( c, cfgNode, conditional, output ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( c, varName, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n, n, output, false ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( c, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^for  ( Node c =  rhs.getLastChild (  ) ; c !^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node lhs = n.getChildBefore (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node lhs = rhs.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node rhs = lhs.getChildBefore (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhs = name.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node varName = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node varName = rhs.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node varName = n.getChildBefore (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node rhs = lhs.getNext (  ) ;Node varName = n.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^Node name = n.getFirstChild (  ) ;Node varName = n.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhsame = n.getChildBefore (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^switch  ( varName.getType (  )  )  {^154^^^^^139^169^switch  ( n.getType (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^switch  ( n.getChildBefore (  )  )  {^154^^^^^139^169^switch  ( n.getType (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( varName.getString (  ) , cfgNode, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( n.getString (  ) , varName, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( n.getString (  ) ,  output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( n.getString (  ) , cfgNode ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( cfgNode.getString (  ) , n, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( output.getString (  ) , cfgNode, n ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^MaybeReachingVariableUse ( n.getString (  ) , cfgNode, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^addToUseIfLocal ( n.getChildBefore (  ) , cfgNode, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^addToUseIfLocal ( n.getString (  ) , rhs, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^161^162^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ; return;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^addToUseIfLocal ( rhs.getString (  ) , cfgNode, output ) ;^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^161^^^^^146^176^addToUseIfLocal ( n.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( varName ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , varName, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) ,  output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode,  conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( cfgNode ) , n, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , output, cfgNode, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( NodeUtil .isForIn ( rhs )  , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( NodeUtil.isForIn ( varName ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^167^168^^^^152^182^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( varName ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^NodeUtil .isForIn ( rhs )  , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^NodeUtil.getConditionExpression ( name ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( rhs, cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^168^^^^^153^183^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^if  ( !NodeUtil.isForIn ( varName )  )  {^172^^^^^157^187^if  ( !NodeUtil.isForIn ( n )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^172^^^^^157^187^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( rhs ) , cfgNode, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( output ) , cfgNode, n, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( NodeUtil.getConditionExpression ( conditional ) , cfgNode, output, n ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( NodeUtil .isForIn ( varName )  , varName, output, conditional ) ;^173^174^^^^158^188^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^NodeUtil.getConditionExpression ( varName ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^NodeUtil.isForIn ( varName ) , cfgNode, output, conditional ) ;^174^^^^^159^189^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node lhs = name.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^177^178^^^^162^192^Node lhs = n.getFirstChild (  ) ; Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^177^^^^^162^192^Node lhs = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node rhs = rhs.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node rhs = lhs.getNext (  ) ;^178^^^^^163^193^Node rhs = lhs.getNext (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^164^194^if  ( NodeUtil.isVar ( lhs )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^179^^^^^164^194^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^lhs = name.getLastChild (  ) ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^lhs = lhs .getFirstChild (  )  ;^180^^^^^165^195^lhs = lhs.getLastChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil .isVar ( name )   && !conditional )  {^182^^^^^167^197^if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( rhs.getChildBefore (  ) , output ) ;^183^^^^^168^198^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, varName, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse (  cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs,  output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, cfgNode,  conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, cfgNode, output ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output, cfgNode, rhs, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, output, cfgNode, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs, conditional, output, cfgNode ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( c, cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n, n, output, false ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( rhs, cfgNode, output, conditional ) ;^185^^^^^170^200^computeMayUse ( rhs, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P3_Replace_Literal]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, false ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getLastChild (  ) , cfgNode, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) , rhs, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) ,  output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) , cfgNode,  true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getLastChild (  ) , cfgNode, n, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getChildBefore (  ) , cfgNode, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( name.getLastChild (  ) , cfgNode, output, true ) ;^191^^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^191^192^^^^176^206^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ; computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , name, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) ,  output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , output, cfgNode, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , conditional, output, cfgNode ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getChildBefore (  ) , cfgNode, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n.getChildBefore (  ) , varName, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n .getLastChild (  )  , cfgNode, output, conditional ) ;^192^^^^^177^207^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P3_Replace_Literal]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, false ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs.getLastChild (  ) , cfgNode, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) , varName, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) ,  output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getLastChild (  ) , cfgNode,  true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getLastChild (  ) , n, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getLastChild (  ) , cfgNode, n, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getChildBefore (  ) , cfgNode, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^196^197^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ; computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n .getFirstChild (  )  , cfgNode, output, true ) ;^196^^^^^181^211^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P3_Replace_Literal]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, false ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , rhs, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) ,  output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode,  true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getFirstChild (  ) .getNext (  ) , cfgNode, n, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getFirstChild (  ) .getNext (  ) , n, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , output, cfgNode, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getFirstChild (  ) .getNode (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getChildBefore (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( varName.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^197^198^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ; computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( n.getLastChild (  ) , cfgNode, output, true ) ;computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( name.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( rhs.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^197^^^^^182^212^computeMayUse ( n.getFirstChild (  ) .getNext (  ) , cfgNode, output, true ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , rhs, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) ,  output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , cfgNode,  conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , cfgNode, output ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( output.getFirstChild (  ) , cfgNode, n, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( cfgNode.getFirstChild (  ) , n, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( n.getFirstChild (  ) , conditional, output, cfgNode ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^computeMayUse ( n.getChildBefore (  ) , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n.getFirstChild (  ) , varName, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^198^199^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ; return;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getFirstChild (  ) , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( varName .getLastChild (  )  , cfgNode, output, conditional ) ;^198^^^^^183^213^computeMayUse ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node varName = varName.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Node varName = n .getLastChild (  )  ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node varName = name.getChildBefore (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^202^203^^^^187^217^Node varName = n.getFirstChild (  ) ; Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P11_Insert_Donor_Statement]^lhs = lhs.getLastChild (  ) ;Node varName = n.getFirstChild (  ) ;^202^^^^^187^217^Node varName = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P3_Replace_Literal]^Preconditions.checkState ( n.hasChildren (  ) , "AST should" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Preconditions.checkState ( rhs.hasChildren (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Preconditions.checkState ( n.getChildBefore (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Preconditions.checkState ( varName.getChildBefore (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Preconditions.checkState ( varName.hasChildren (  ) , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^Preconditions.checkState ( n .getChildBefore ( lhs )  , "AST should be normalized" ) ;^203^^^^^188^218^Preconditions.checkState ( n.hasChildren (  ) , "AST should be normalized" ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( varName .getChildBefore ( rhs )   )  {^205^^^^^190^220^if  ( varName.hasChildren (  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( varName.getFirstChild (  ) , name, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n.getChildBefore (  ) , cfgNode, output, conditional ) ;^206^^^^^191^221^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^removeFromUseIfLocal ( name.getChildBefore (  ) , output ) ;^208^^^^^193^223^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil .isAssign ( name )   && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P13_Insert_Block]^if  ( isVar ( lhs )  )  {     lhs = lhs.getLastChild (  ) ; }^214^^^^^199^229^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil .isVar ( name )   )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isAssignmentOp ( name )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^if  ( NodeUtil.isAssignmentOp ( rhs )  && NodeUtil.isName ( n.getChildBefore (  )  )  )  {^214^^^^^199^229^if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Node nameame = n.getFirstChild (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^Node varNameame = n.getChildBefore (  ) ;^215^^^^^200^230^Node name = n.getFirstChild (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P7_Replace_Invocation]^addToUseIfLocal ( name .getLastChild (  )  , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^addToUseIfLocal ( varName .getLastChild (  )  , cfgNode, output ) ;^222^^^^^207^237^addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( rhs.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( name.getNext (  ) , rhs, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^computeMayUse ( conditional.getNext (  ) , cfgNode, output, name ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( n.getNext (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( rhs.getChildBefore (  ) , cfgNode, output, conditional ) ;^225^^^^^210^240^computeMayUse ( name.getNext (  ) , cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P14_Delete_Statement]^^232^233^234^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  { computeMayUse ( c, cfgNode, output, conditional ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^for  ( Node varName = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^217^247^for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P8_Replace_Mix]^computeMayUse ( rhs, cfgNode, output, conditional ) ;^233^^^^^218^248^computeMayUse ( c, cfgNode, output, conditional ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] computeMayUse [RETURN_TYPE] void   Node n Node cfgNode ReachingUses output boolean conditional [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  conditional  Scope  jsScope  ReachingUses  output  Node  c  cfgNode  lhs  n  name  rhs  varName  
[P5_Replace_Variable]^Var var = name.getVar ( jsScope ) ;^245^^^^^244^252^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P14_Delete_Statement]^^245^^^^^244^252^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P2_Replace_Operator]^if  ( var == null && var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P2_Replace_Operator]^if  ( var != null || var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P2_Replace_Operator]^if  ( var == null || var.scope == jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P6_Replace_Expression]^if  ( var == null ) {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P6_Replace_Expression]^if  (  var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P8_Replace_Mix]^if  ( var == this || var.scope != jsScope )  {^246^^^^^244^252^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P15_Unwrap_Block]^return ;^246^247^248^^^244^252^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P16_Remove_Block]^^246^247^248^^^244^252^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P15_Unwrap_Block]^use.mayUseMap.put(var, node);^249^250^251^^^244^252^if  ( !escaped.contains ( var )  )  { use.mayUseMap.put ( var, node ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P16_Remove_Block]^^249^250^251^^^244^252^if  ( !escaped.contains ( var )  )  { use.mayUseMap.put ( var, node ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P13_Insert_Block]^if  ( ! ( escaped.contains ( var )  )  )  {     removeAll ( var ) ; }^249^^^^^244^252^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P5_Replace_Variable]^use.mayUseMap.put (  node ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P5_Replace_Variable]^use.mayUseMap.put ( var ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P14_Delete_Statement]^^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P11_Insert_Donor_Statement]^use.mayUseMap.removeAll ( var ) ;use.mayUseMap.put ( var, node ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P11_Insert_Donor_Statement]^result.mayUseMap.putAll ( uses.mayUseMap ) ;use.mayUseMap.put ( var, node ) ;^250^^^^^244^252^use.mayUseMap.put ( var, node ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] addToUseIfLocal [RETURN_TYPE] void   String name Node node ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  Node  node  String  name  
[P5_Replace_Variable]^Var var = name.getVar ( jsScope ) ;^260^^^^^259^267^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P14_Delete_Statement]^^260^^^^^259^267^Var var = jsScope.getVar ( name ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P2_Replace_Operator]^if  ( var == null && var.scope != jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P2_Replace_Operator]^if  ( var != null || var.scope != jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P2_Replace_Operator]^if  ( var == null || var.scope == jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P6_Replace_Expression]^if  ( var == null ) {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P6_Replace_Expression]^if  (  var.scope != jsScope )  {^261^^^^^259^267^if  ( var == null || var.scope != jsScope )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P15_Unwrap_Block]^return ;^261^262^263^^^259^267^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P16_Remove_Block]^^261^262^263^^^259^267^if  ( var == null || var.scope != jsScope )  { return; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P8_Replace_Mix]^if  ( escaped.contains ( var )  )  {^264^^^^^259^267^if  ( !escaped.contains ( var )  )  {^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P15_Unwrap_Block]^use.mayUseMap.removeAll(var);^264^265^266^^^259^267^if  ( !escaped.contains ( var )  )  { use.mayUseMap.removeAll ( var ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P16_Remove_Block]^^264^265^266^^^259^267^if  ( !escaped.contains ( var )  )  { use.mayUseMap.removeAll ( var ) ; }^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P13_Insert_Block]^if  ( ! ( escaped.contains ( var )  )  )  {     put ( var, node ) ; }^264^^^^^259^267^[Delete]^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P7_Replace_Invocation]^use.mayUseMap.put ( var ) ;^265^^^^^259^267^use.mayUseMap.removeAll ( var ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P14_Delete_Statement]^^265^^^^^259^267^use.mayUseMap.removeAll ( var ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P11_Insert_Donor_Statement]^use.mayUseMap.put ( var, node ) ;use.mayUseMap.removeAll ( var ) ;^265^^^^^259^267^use.mayUseMap.removeAll ( var ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] removeFromUseIfLocal [RETURN_TYPE] void   String name ReachingUses use [VARIABLES] Multimap  mayUseMap  Set  escaped  boolean  Scope  jsScope  ReachingUses  use  Var  var  String  name  
[P7_Replace_Invocation]^GraphNode<Node, Branch> n = getCfg (  )  .getNext (  )  ;^280^^^^^279^284^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( defNode ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P7_Replace_Invocation]^GraphNode<Node, Branch> n = get (  ) .getNode ( defNode ) ;^280^^^^^279^284^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( defNode ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P14_Delete_Statement]^^280^281^^^^279^284^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( defNode ) ; Preconditions.checkNotNull ( n ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P7_Replace_Invocation]^Preconditions.checkState ( n ) ;^281^^^^^279^284^Preconditions.checkNotNull ( n ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P14_Delete_Statement]^^281^282^^^^279^284^Preconditions.checkNotNull ( n ) ; FlowState<ReachingUses> state = n.getAnnotation (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P5_Replace_Variable]^FlowState<ReachingUses> state = 3.getAnnotation (  ) ;^282^^^^^279^284^FlowState<ReachingUses> state = n.getAnnotation (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P14_Delete_Statement]^^282^^^^^279^284^FlowState<ReachingUses> state = n.getAnnotation (  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P7_Replace_Invocation]^return state .getCfg (  )  .mayUseMap^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P14_Delete_Statement]^^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P8_Replace_Mix]^return null.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P5_Replace_Variable]^return state.getOut (  ) .mayUseMap.get ( name.getVar ( jsScope )  ) ;^283^^^^^279^284^return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P8_Replace_Mix]^Multimap<Var, Node> mayUseMap;^85^^^^^80^90^final Multimap<Var, Node> mayUseMap;^[CLASS] ReachingUses  [METHOD] getUses [RETURN_TYPE] Collection   String name Node defNode [VARIABLES] Multimap  mayUseMap  FlowState  state  Set  escaped  boolean  Scope  jsScope  Node  defNode  GraphNode  n  String  name  
[P8_Replace_Mix]^mayUseMap  = null ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  boolean  
[P11_Insert_Donor_Statement]^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;mayUseMap = HashMultimap.create (  ) ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  boolean  
[P7_Replace_Invocation]^mayUseMap = HashMultimap .create (  )  ;^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  boolean  
[P14_Delete_Statement]^^88^^^^^87^89^mayUseMap = HashMultimap.create (  ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses()   [VARIABLES] Multimap  mayUseMap  boolean  
[P5_Replace_Variable]^mayUseMap = HashMultimap.create ( other.mayUseMap.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[P5_Replace_Variable]^mayUseMap = HashMultimap.create ( other ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[P8_Replace_Mix]^mayUseMap =  HashMultimap.create ( null.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[P11_Insert_Donor_Statement]^mayUseMap = HashMultimap.create (  ) ;mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[P14_Delete_Statement]^^97^^^^^96^98^mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] <init> [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses)   ReachingUses other [VARIABLES] Multimap  mayUseMap  ReachingUses  other  boolean  
[P2_Replace_Operator]^return  ( other instanceof ReachingUses )  || (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[P2_Replace_Operator]^return  ( other  |  ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[P5_Replace_Variable]^return  ( this.mayUseMap instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( other ) ;^102^103^^^^101^104^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[P14_Delete_Statement]^^103^^^^^101^104^(  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[CLASS] ReachingUses  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] Multimap  mayUseMap  Object  other  boolean  
[P14_Delete_Statement]^^108^^^^^107^109^return mayUseMap.hashCode (  ) ;^[CLASS] ReachingUses  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] Multimap  mayUseMap  boolean  
[P8_Replace_Mix]^result.mayUseMap.putAll ( null ) ;^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
[P14_Delete_Statement]^^124^^^^^121^127^result.mayUseMap.putAll ( uses.mayUseMap ) ;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
[P8_Replace_Mix]^return uses;^126^^^^^121^127^return result;^[CLASS] ReachingUsesJoinOp  [METHOD] apply [RETURN_TYPE] MaybeReachingVariableUse$ReachingUses   ReachingUses> from [VARIABLES] boolean  ReachingUses  result  uses  List  from  
